<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>操作系统总结之进程篇</title>
      <link href="/2020/02/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AF%87/"/>
      <url>/2020/02/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h5 id="1-进程与线程的基本概念"><a href="#1-进程与线程的基本概念" class="headerlink" title="1. 进程与线程的基本概念"></a>1. 进程与线程的基本概念</h5><p><strong>什么是进程</strong></p><p>进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</p><p><strong>进程的运行状态</strong></p><ul><li><p>新建</p><p>进程正在被创建，尚未转到就绪状态</p></li><li><p>就绪</p><p>进程己处于准备运行的状态， 即进程获得了除处理机之外的一切所需资源，一旦得到处理机即可运行</p></li><li><p>运行</p><p>进程正在处理机上运行</p></li><li><p>阻塞</p><p>进程正在等待某一事件而暂停运行</p></li><li><p>终止</p><p>进程正从系统中消失，这可能是进程正常结束或其他原因中断退出运行</p></li></ul><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/process.png" alt=""></p><p><strong>进程控制</strong></p><ul><li><p>创建进程</p><ol><li>申请一个唯一的进程标识符，然后分配一个空白的PCB，如果PCB分配失败则进程创建失败</li><li>为进程分配资源，为进程的程序和数据以及用户栈分配内存空间</li><li>初始化PCB，主要包括初始化PCB的标志信息、进程状态和进程优先级等</li><li>如果就绪队列可以容纳新的进程，将当前进程放到就绪队列中等待调度</li></ol></li><li><p>进程终止</p><ol><li>根据被终止进程的标识符，检索PCB ，从中读出该进程的状态。</li><li>若被终止进程处于执行状态，立即终止该进程的执行，将处理机资源分配给其他进程。</li><li>若该进程还有子进程，则应将其所有子进程终止。</li><li>将该进程所拥有的全部资源，或归还给其父进程或归还给操作系统。</li><li>将该PCB 从所在队列（链表） 中删除。</li></ol></li><li><p>进程阻塞</p><ol><li>找到将要被阻塞进程的标识号对应的PCB </li><li>若该进程为运行状态，则保护其现场，将其状态转为阻塞状态，停止运行。</li><li>把该PCB 插入到相应事件的等待队列中去</li></ol></li><li><p>进程唤醒</p><ol><li>在该事件的等待队列中找到相应进程的PCB </li><li>将其从等待队列中移出，并置其状态为就绪状态</li><li>把该PCB 插入就绪队列中，等待调度程序调度</li></ol></li><li><p>进程切换</p><ol><li>保存处理机上下文，包括程序计数器和其他寄存器</li><li>更新PCB 信息</li><li>把进程的PCB 移入相应的队列，如就绪、在某事件阻塞等队列</li><li>选择另一个进程执行， 并更新其PCB </li><li>更新内存管理的数据结构</li><li>恢复处理机上下文</li></ol></li></ul><p><strong>进程的组成</strong></p><ul><li><p>PCB</p><p>是进程实体的一部分，是进程存在的唯一标准。包括进程描述信息，进程控制和管理信息、资源分配清单和处理机相关信息</p></li><li><p>程序段</p><p>程序段就是能被进程调度程序调度到CPU 执行的程序代码段</p></li><li><p>数据段</p><p>一个进程的数据段，可以是进程对应的程序加工处理的原始数据，也可以是程序执行时产生时的中间或最终结果</p></li></ul><p><strong>进程通信</strong></p><ul><li><p>共享存储</p><p>在通信的进程之间存在一块可直接访问的共享空间，通过对这片共享空间进行写／读操作实现进程之间的信息交换。</p></li><li><p>消息传递</p><ul><li><p>直接通信</p><p>发送进程直接把消息发送给接收进程，并将它挂在接收进程的消息缓冲队列上，接收进程从消息缓冲队列中取得消息</p></li><li><p>间接通信</p><p>发送进程把消息发送到某个中间实体中，接收进程从中间实体中取得消息。这种中间实体一般称为信箱，这种通信方式又称为信箱通信方式</p></li></ul></li><li><p>管道通信</p><p>管道通信是消息传递的一种特殊方式。所谓“ 管道“是指用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件，又名pipe文件</p></li></ul><p><strong>线程概念</strong></p><p>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位</p><p><strong>线程的实现方式</strong></p><ul><li><p>用户级线程</p><p>有关线程管理的所有工作都由应用程序完成，内核意识不到线程的存在。</p></li><li><p>内核级线程</p><p>线程管理的所有工作由内核完成，应用程序没有进行线程管理的代码，只有一个到内核级线程的编程接口</p></li></ul><p><strong>多线程模型</strong></p><ul><li><p>多对一</p><p>将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成。此模式中，用户级线程对操作系统不可见。</p><p>优点：线程管理是在用户空间进行的，因而效率比较高。<br>缺点： 当一个线程在使用内核服务时被阻塞，那么整个进程都会被阻塞：多个线程不能并行<br>地运行在多处理机上。</p></li><li><p>一对一</p><p>将每个用户级线程映射到一个内核级线程<br>优点：当一个线程被阻塞后，允许另一个线程继续执行，所以并发能力较强。<br>缺点：每创建一个用户级线程都需要创建一个内核级线程与其对应，这样创建线程的开销比较大，会影响到应用程序的性能。</p></li><li><p>一对多</p><p>将n 个用户级线程映射到m 个内核级线程上</p><p>在多对一模型和一对一模型中取了个折中，克服了多对一模型的并发度不高的缺点，又克服了一对一模型的一个用户进程占用太多内核级线程，开销太大的缺点。又拥有多对一模型和一对一模型各自的优点，可谓集两者之所长。</p></li></ul><h5 id="2-进程调度"><a href="#2-进程调度" class="headerlink" title="2. 进程调度"></a>2. 进程调度</h5><p><strong>什么是调度</strong></p><p>处理机的数量小于进程的数量，就存在进程争用处理机的情况， 处理机调度是对处理机进行分配，就是从就绪队列中，按照一定的算法（公平、高效）选择一个进程并将处理机分配给它运行， 以实现进程并发地执行。</p><p><strong>调度层次</strong></p><ul><li><p>作业调度</p><p>按一定的原则从外存上处于后备状态的作业中挑选作业，并分配内存、输入／输出设备等必要的资源，并建立相应的进程，以使其 获得竞争处理机的权利。</p></li><li><p>中级调度</p><p>引入中级调度是为了提高内存利用率和系统吞吐量。为此，应使那些暂时不能运行的进程，调至外存等待，把此时的进程状态称为挂起状态。当它们己具备运行条件且内存又稍有空闲时，由中级调度来决定，把外存上的那些己具备运行条件的就绪进程，再重新调入内存，并修改其状态为就绪状态，挂在就绪队列上等待。</p></li><li><p>进程调度</p><p>按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给它</p></li></ul><p><strong>不能进行进程调度的情况</strong></p><ol><li>处理中断过程</li><li>进程在操作系统内核临界区中</li><li>原子操作</li></ol><p><strong>调度的基本准则</strong></p><ul><li><p>CPU利用率</p></li><li><p>系统吞吐量</p><p>表示单位时间内CPU 完成作业的数量</p></li><li><p>周转时间</p><p>是指从作业提交到作业完成所经历的时间，包括作业等待、在就绪队列中排队、在处理机上运行以及进行输入／输出操作所花费时间的总和</p></li><li><p>等待时间</p><p>是指进程处于等处理机状态时间之和</p></li><li><p>响应时间</p><p>用户提交请求到系统首次产生响应所用的时间</p></li></ul><p><strong>调度算法</strong></p><ul><li><p>先来先服务调度算法</p><p>每次从就绪队列中选择最先进入该队列的进程，将处理机分配给它，使之投入运行，直到完成或因某种原因而阻塞时才释放处理机。</p></li><li><p>最短进程优先算法</p><p>从就绪队列中选择一个估计运行时间最短的进程，将处理机分配给它，使之立即执行，直到完成或发生某事件而阻塞时，才释放处理机。</p></li><li><p>优先级调度算法</p><p>优先级调度算法每次从就绪队列中选择优先级最高的进程，将处理机分配给它，使之投入运行</p></li><li><p>高响应比优先调度算法</p><p>高响应比优先调度算法主要用于作业调度，该算法是对FCFS 调度算法和SJF 调度算法的一种综合平衡，同时考虑每个作业的等待时间和估计的运行时间。在每次进行作业调度时，先计算后备作业队列中每个作业的响应比，从中选出响应比最高的作业投入运行。</p></li><li><p>时间片轮转调度算法</p><p>时间片轮转调度算法主要适用于分时系统。在这种算法中，系统将所有就绪进程按到达时间的先后次序排成一个队列，进程调度程序总是选择就绪队列中第一个进程执行，即先来先服务的原则，但仅能运行一个时间片，如100ms 。在使用完一个时间片后，即使进程并未完成其运行，它也必须释放出（被剥夺〉处理机给下一个就绪的进程，而被剥夺的进程返回到就绪队列的末尾重新排队，等候再次运行。</p></li><li><p>多级反馈队列调度算法</p><p>设置多个就绪队列，每一级就绪队列的优先级不一样，比如第一级队列的优先级最高，第二级次之，然后依次类推，每一级队列的时间片也不一样，优先级越高队列时间片越短。刚进入系统的进程放到第一级队列的末尾，运行该进程后如果没有在指定的时间片完成就放入下一级队列，同样在下一级队列中也是如此操作，但是每次只要上一级队列中有进程就会先调度上面的队列。</p></li></ul><h5 id="3-进程同步"><a href="#3-进程同步" class="headerlink" title="3. 进程同步"></a>3. 进程同步</h5><p><strong>进程同步的基本概念</strong></p><ul><li><p>临界资源</p><p>多个进程可以共享系统中的各种资源，但其中许多资源一次只能为一个进程所使用，我们把一次仅允许一个进程使用的资源称为临界资源。访问临界资源的代码称为临界区。</p></li><li><p>同步</p><p>同步亦称直接制约关系，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而等待、传递信息所产生的制约关系。</p></li><li><p>互斥</p><p>互斥亦称间接制约关系。当一个进程进入临界区使用临界资源时， 另一个进程必须等待，当占用临界资源的进程退出临界区后，另一进程才允许去访问此临界资源。</p></li></ul><p><strong>实现临界区的方法</strong></p><p><strong>软件实现</strong></p><p><strong>硬件实现</strong></p><ul><li><p>中断屏蔽方法</p><p>当一个进程正在使用处理机执行它的临界区代码时，要防止其他进程再进入其临界区访问的最简单方法是禁止一切中断发生，或称之为屏蔽中断、关中断。因为CPU 只在发生中断时引起进程切换，这样屏蔽中断就能保证当前运行进程将临界区代码顺利地执行完，从而保证了互斥的正确实现，然后再执行开中断。</p></li><li><p>硬件指令方法</p></li><li></li></ul><p><strong>信号量</strong></p><p><strong>管程</strong></p><p><strong>经典的同步问题</strong></p><ul><li>生产者-消费者问题</li><li>读者-写者问题</li><li>哲学家进程问题</li><li>吸烟者问题</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring探究之mvc</title>
      <link href="/2020/02/26/Spring%E6%8E%A2%E7%A9%B6%E4%B9%8Bmvc/"/>
      <url>/2020/02/26/Spring%E6%8E%A2%E7%A9%B6%E4%B9%8Bmvc/</url>
      
        <content type="html"><![CDATA[<h5 id="1-MVC的理解"><a href="#1-MVC的理解" class="headerlink" title="1. MVC的理解"></a>1. MVC的理解</h5><h5 id="2-Spring-MVC的实现"><a href="#2-Spring-MVC的实现" class="headerlink" title="2. Spring MVC的实现"></a>2. Spring MVC的实现</h5><p>以下面的代码启动一个web项目：</p><pre><code class="java">@SpringBootApplicationpublic class SpringBootMvcApplication {    public static void main(String[] args) {        new SpringApplicationBuilder(SpringBootMvcApplication.class)                .web(WebApplicationType.SERVLET).run();    }}</code></pre><pre><code class="java">@RestControllerpublic class HelloController {    @GetMapping(&quot;/hello&quot;)    public String hello(){        return &quot;hello&quot;;    }}</code></pre><p>Spring MVC的核心类叫做<code>DispatcherServlet</code>。首先来分析一下<code>DispatcherServlet</code>的初始化过程。</p><p><strong>Spring MVC初始化过程</strong></p><p><code>DispatcherServlet</code>是Spring MVC的核心类。其继承关系如下：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Spring%E5%8E%9F%E7%90%86/DispatcherServlet.png" alt=""></p><p>通过上图可以看出<code>DispatcherServlet</code>是Servlet的实现类。我们从最顶层的实现类<code>GenericServlet</code>开始分析，根据我们对<code>Servlet</code>生命周期的了解，可以知道初始化会触发<code>GenericServlet</code>的init方法，我们以此为起点跟踪初始化过程。</p><pre><code class="java">// 类: GenericServletpublic void init(ServletConfig config) throws ServletException {        this.config = config;        this.init();}</code></pre><p>上面代码调用子类的<code>init</code>方法</p><pre><code class="java">// 类：HttpServletBeanpublic final void init() throws ServletException {        // 前面代码省略        // 让子类去初始化，继续        initServletBean();}</code></pre><pre><code class="java">// 类：FrameworkServletprotected final void initServletBean() throws ServletException {    try {        this.webApplicationContext = initWebApplicationContext();// 继续        initFrameworkServlet();    }    // 后面代码省略}</code></pre><pre><code class="java">    protected WebApplicationContext initWebApplicationContext() {        // 前面代码省略        if (!this.refreshEventReceived) {            // Either the context is not a ConfigurableApplicationContext with refresh            // support or the context injected at construction time had already been            // refreshed -&gt; trigger initial onRefresh manually here.            synchronized (this.onRefreshMonitor) {                onRefresh(wac);// 进入下一步分析            }        }        return wac;    }</code></pre><p>终于到了</p><pre><code class="java">// DispatcherServletprotected void onRefresh(ApplicationContext context) {        initStrategies(context);}</code></pre><pre><code class="java">protected void initStrategies(ApplicationContext context) {         // 下面这九行代码的调用对应着Spring MVC九大组件的初始化        initMultipartResolver(context);// MultipartResolver用于处理上传请求        initLocaleResolver(context);// LocaleResolver用于实现国际化        initThemeResolver(context);// ThemeResolver用于解析主题        initHandlerMappings(context);// 初始化HandlerMapping        initHandlerAdapters(context);// 初始化HandlerAdapter        initHandlerExceptionResolvers(context);// Handler异常解析器        initRequestToViewNameTranslator(context);// ViewName是根据ViewName查找View        initViewResolvers(context);// 视图解析器        initFlashMapManager(context);// FlashMapManager}</code></pre><p>上面的代码时对Spring MVC的九大组件进行了初始化，后面处理Http请求的时候就是靠<code>DispatcherServlet</code>这些组件完成的。可以看到这些组件的初始化都需要一个<code>ApplicationContext</code>容器，这个容器代表着web容器。</p><p><strong>Spring MVC处理请求</strong></p><p>开门见山，先看一张总所周知的图。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/SSM%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/clipboard.png" alt=""></p><p>接下来用源码验证一遍,``DispatcherServlet<code>时一个Servlet，所以请求肯定会经过其父类的</code>service`方法到达该类的某个方法。</p><pre><code class="java">protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {        logRequest(request);        // 前面代码省略        try {            // 这一行把请求和响应交给doDispatch方法处理            doDispatch(request, response);        }        // 后面省略}</code></pre><pre><code class="java">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {        HttpServletRequest processedRequest = request;        HandlerExecutionChain mappedHandler = null;        boolean multipartRequestParsed = false;        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);        try {            ModelAndView mv = null;            Exception dispatchException = null;            try {                processedRequest = checkMultipart(request);                multipartRequestParsed = (processedRequest != request);                // 获取处理当前请求的handler                mappedHandler = getHandler(processedRequest);                if (mappedHandler == null) {                    noHandlerFound(processedRequest, response);                    return;                }                // 获取handler的适配器                HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());                // 这里是执行缓存策略                String method = request.getMethod();                boolean isGet = &quot;GET&quot;.equals(method);                if (isGet || &quot;HEAD&quot;.equals(method)) {                    long lastModified =                         ha.getLastModified(request, mappedHandler.getHandler());                    if (new ServletWebRequest                        (request, response).checkNotModified(lastModified) &amp;&amp; isGet) {                        return;                    }                }                // 拦截器：在handler方法执行前拦截                if (!mappedHandler.applyPreHandle(processedRequest, response)) {                    return;                }                // 调用handlerAdapter方法，得到ModelAndView，这一步就执行了我们实现的handler方法                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());                if (asyncManager.isConcurrentHandlingStarted()) {                    return;                }                applyDefaultViewName(processedRequest, mv);                // 拦截器：在handler方法执行后拦截                mappedHandler.applyPostHandle(processedRequest, response, mv);            }            catch (Exception ex) {                dispatchException = ex;            }            catch (Throwable err) {                dispatchException = new NestedServletException(&quot;Handler dispatch failed&quot;, err);            }            // 处理视图和异常            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);        }        catch (Exception ex) {            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);        }        catch (Throwable err) {            triggerAfterCompletion(processedRequest, response, mappedHandler,                    new NestedServletException(&quot;Handler processing failed&quot;, err));        }        finally {            if (asyncManager.isConcurrentHandlingStarted()) {                // Instead of postHandle and afterCompletion                if (mappedHandler != null) {                    mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);                }            }            else {                // Clean up any resources used by a multipart request.                if (multipartRequestParsed) {                    cleanupMultipart(processedRequest);                }            }        }    }</code></pre><p>这个方法基本证明了图中描述的处理过程是对的。</p><h5 id="3，-Spring-MVC容器分析"><a href="#3，-Spring-MVC容器分析" class="headerlink" title="3， Spring MVC容器分析"></a>3， Spring MVC容器分析</h5><h5 id="4-其他问题"><a href="#4-其他问题" class="headerlink" title="4. 其他问题"></a>4. 其他问题</h5><p><strong>filter与intercepter的区别</strong></p><p>filter是servlet中的一个接口，用来过滤http请求中的某些内容，在执行handler方法前执行，并且可以针对特定的servlet进行过滤。而intercepter是Spring框架提供的概念，在handler执行前后都可以调用相应的方法，不能配置对某个url进行拦截。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring探究之IoC</title>
      <link href="/2020/02/26/spring%E6%8E%A2%E7%A9%B6%E4%B9%8BIoC/"/>
      <url>/2020/02/26/spring%E6%8E%A2%E7%A9%B6%E4%B9%8BIoC/</url>
      
        <content type="html"><![CDATA[<h5 id="1-什么是IoC"><a href="#1-什么是IoC" class="headerlink" title="1. 什么是IoC"></a>1. 什么是IoC</h5><p>首先解释一下什么是IoC，IoC的意思是控制反转，控制反转是一种思想，指的是将类管理自身成员变量的权利交给第三方容器，也就是说在没有使用IoC容器的时候，一个对象所依赖的成员变量是需要自己管理、实例化的，但是如果一个项目涉及的类太多并且对象与对象之间的关系非常复杂，那么对象的依赖关系很难维护，为了解决这个问题就有了IoC，IoC是一个容器，里面存放了各种各样的对象实例，程序员只要通过配置信息描述对象与对象之间的关系，然后交给ioc容器，容器会自动帮我们实例化对象并且配置好类与类之间的关系，这样在我们写代码的时候如果需要用到某个类的实例，就只需要通过容器拿到这个实例对象就可以了，而不需要我们手动创建和设置。</p><h5 id="2-IoC容器的初始化"><a href="#2-IoC容器的初始化" class="headerlink" title="2. IoC容器的初始化"></a>2. IoC容器的初始化</h5><p>在Spring中实现控制反转的方式叫做DI，也就是依赖注入。首先我们使用Spring创建IOC容器是通过<code>ApplicationContex</code>这个类创建的，而这个类有一个顶层的类，叫做BeanFactory，BeanFactory这个类不是由用户直接使用的，而是Spring内部的一个很重要的类，它实现了ioc的基本功能。ApplicationContex也有几个子类，如</p><ul><li><p><code>ClassPathXmlApplicationContex</code></p></li><li><p><code>FileSystemXmlApplicationContex</code></p></li><li><p><code>AnnotationConfigApplicationContex</code></p></li></ul><p>这些子类的区别在于配置信息的位置和类型不同，比如<code>ClassPathXmlApplicationContex</code>的配置信息是XML文件，并且会在ClassPath下找，而<code>FileSystemXmlApplicationContex</code>的配置文件是xml文件，但是需要提供一个全路径名的xml文件，<code>AnnotationConfigApplicationContex</code>它的配置信息是java类和一些注解。</p><p>下面以最简单的<code>ClassPathXmlApplicationContex</code>为例说明IoC容器的初始化过程：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java IO与Reactor和Proactor模式</title>
      <link href="/2020/02/22/java%20IO%E4%B8%8EReactor%E5%92%8CProactor%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/22/java%20IO%E4%B8%8EReactor%E5%92%8CProactor%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="1-IO模型的演变"><a href="#1-IO模型的演变" class="headerlink" title="1. IO模型的演变"></a>1. IO模型的演变</h5><p>BIO是java最原始的IO模型，使用BIO实现的服务器最简单的方式如下：</p><pre><code class="java">public class Demo01 {    public static void main(String[] args) throws IOException {        ServerSocket serverSocket=new ServerSocket();        serverSocket.bind(new InetSocketAddress(8088));        while (true){            Socket socket = serverSocket.accept();            handler(socket);        }    }    private static void handler(Socket socket){        System.out.println(&quot;处理当前socket&quot;+socket);    }}</code></pre><p>上面这个代码有非常明显的确定，socket是阻塞的，如果服务端接收到一个连接需要将这个连接处理完成后才能接收下一个连接，可见上面这种模式是不支持并发的。</p><p>为了使得服务器支持多个并发的连接，可以考虑使用线程来处理handler方法，代码如下</p><pre><code class="java">public class Demo01 {    public static void main(String[] args) throws IOException {        ServerSocket serverSocket=new ServerSocket();        serverSocket.bind(new InetSocketAddress(8088));        while (true){            Socket socket = serverSocket.accept();            new Thread(()-&gt;{                handler(socket);            }).start();        }    }    private static void handler(Socket socket){        System.out.println(&quot;处理当前socket&quot;+socket);    }}</code></pre><p>上面的方法目前支持处理并发的请求，但是代价是有多少个连接就需要开辟多个线程，而线程创建和销毁有一定的开销，显然这种方式依然无法面对高并发。</p><p>为了解决这种局面，java引入了非阻塞的NIO，NIO对应着linux的IO多路复用模型，为了使得编程方便，又总结了不同的编程模式，如Reactor模式和Proactor模式</p><h5 id="2-Reactor模式"><a href="#2-Reactor模式" class="headerlink" title="2. Reactor模式"></a>2. Reactor模式</h5><p><strong>单Reactor单线程</strong></p><p>示意图如下：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/reactorA.png" alt=""></p><p>基本工作原理是Reactor负责循环监听IO事件，当有事件发生则会进行处理，整个过程都在一个线程中实现，他的特点是简单，没有线程通信和竞争的问题，但是不能完全发挥多核CPU的功能，如果线程崩溃服务则不可用，并且如果处理请求的时间太长，会导致后面的请求阻塞。这种模式适用于业务处理速度快的应用，如redis服务器。</p><p>实例代码如下：</p><pre><code class="java">public class Demo01 {    public static void main(String[] args) throws IOException {        Selector selector=Selector.open();        ServerSocketChannel serverSocketChannel=ServerSocketChannel.open();        serverSocketChannel.configureBlocking(false);        serverSocketChannel.bind(new InetSocketAddress(8088));        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);        while (true){            selector.select();            // 处理事件：连接事件/读事件            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();            while (iterator.hasNext()){                SelectionKey key = iterator.next();                if (key.isAcceptable()){                    handlerAcceptable(serverSocketChannel,selector);                }else if (key.isReadable()){                    handlerReadable((SocketChannel) key.channel());                }                iterator.remove();            }        }    }    private static void handlerAcceptable(ServerSocketChannel channel,Selector selector) throws IOException {        SocketChannel socketChannel = channel.accept();        socketChannel.configureBlocking(false);        socketChannel.register(selector,SelectionKey.OP_READ);    }    private static void handlerReadable(SocketChannel socketChannel) throws IOException {        ByteBuffer byteBuffer=ByteBuffer.allocate(1024);        socketChannel.read(byteBuffer);        System.out.println(new String(byteBuffer.array()));    }}</code></pre><p><strong>单Reactor多线程</strong></p><p>示意图如下：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/reactorB.png" alt=""></p><p>基本工作原理是Reactor只负责监听事件和处理连接事件，其他的事件会交给工作线程组去完成。优点是可以利用多核CPU的处理能力，缺点是数据共享会带来线程安全问题，并且Reactor要处理所有事件的分发，假如事件太多容易出现性能瓶颈。</p><p>示例代码如下：</p><pre><code class="java">public class Demo01 {    public static void main(String[] args) throws IOException {        Selector selector=Selector.open();        ServerSocketChannel serverSocketChannel=ServerSocketChannel.open();        serverSocketChannel.configureBlocking(false);        serverSocketChannel.bind(new InetSocketAddress(8088));        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);        ExecutorService executorService = Executors.newCachedThreadPool();        while (true){            selector.select();            // 处理事件：连接事件/读事件            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();            while (iterator.hasNext()){                SelectionKey key = iterator.next();                if (key.isAcceptable()){                    handlerAcceptable(serverSocketChannel,selector);                }else if (key.isReadable()){                    // 交给线程组处理                    executorService.submit(()-&gt;{                        handlerReadable((SocketChannel) key.channel());                    });                }                iterator.remove();            }        }    }    private static void handlerAcceptable(ServerSocketChannel channel,Selector selector) throws IOException {        SocketChannel socketChannel = channel.accept();        socketChannel.configureBlocking(false);        socketChannel.register(selector,SelectionKey.OP_READ);    }    private static void handlerReadable(SocketChannel socketChannel){        ByteBuffer byteBuffer=ByteBuffer.allocate(1024);        try {            socketChannel.read(byteBuffer);            System.out.println(new String(byteBuffer.array()));        } catch (IOException e) {            e.printStackTrace();        }    }}</code></pre><p><strong>主从Reactor多线程</strong></p><p>示意图如下：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/reactorC.png" alt=""></p><p>基本工作原理是Reactor的功能分离，主Ractor只负责处理连接事件，其他的事件交给子Reactor去处理，子Reactor进行事件分发，将事件交给工作线程去处理。优点是Reactor的功能实现了分离。</p><h5 id="3-Proactor模式"><a href="#3-Proactor模式" class="headerlink" title="3. Proactor模式"></a>3. Proactor模式</h5><p>Proactor模式也是一种基于IO多路复用的模式，只不过它基于异步IO，所以必须OS支持异步IO。</p><ol><li>应用程序启动，调用异步操作处理器提供的异步操作接口函数，调用之后应用程序和异步操作处理就独立运行；应用程序可以调用新的异步操作，而其它操作可以并发进行；</li><li>应用程序启动Proactor主动器，进行无限的事件循环，等待完成事件到来；</li><li>异步操作处理器执行异步操作，完成后将结果放入到完成事件队列；</li><li>主动器从完成事件队列中取出结果，分发到相应的完成事件回调函数处理逻辑中；</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis单机数据库的实现原理</title>
      <link href="/2020/02/17/Redis%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2020/02/17/Redis%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1. 数据库"></a>1. 数据库</h4><h5 id="1-Redis服务器的实现"><a href="#1-Redis服务器的实现" class="headerlink" title="1. Redis服务器的实现"></a>1. Redis服务器的实现</h5><pre><code class="c">struct redisServer {    redisDb *db;// 指向数据库数组表示     int dbnum;// 数据库的数量，默认16    // ... 后面还有很多参数};</code></pre><p>redisServer代表了redis服务器，里面的db指针指向数据库数组，dbnum表示当前服务器有多少个数组。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/redis_sever.png" alt=""></p><h5 id="2-数据库的切换"><a href="#2-数据库的切换" class="headerlink" title="2. 数据库的切换"></a>2. 数据库的切换</h5><p>每个redis客户端都有一个目标数据库，当客户端执行读或写命令时操作的都是目的数据库。</p><pre><code class="c">struct redisClient {    int fd;    redisDb *db;    // 还有其他字段}</code></pre><p>db指针指向当前客户端对应的目标数据库。</p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/redis_client.png" style="zoom:80%;" /><p>切换数据库时，只需要将redisClient的db指针指向相对应的数据库即可。</p><h5 id="3-redis数据库的实现"><a href="#3-redis数据库的实现" class="headerlink" title="3. redis数据库的实现"></a>3. redis数据库的实现</h5><p>Redis的数据库是一个键值对</p><pre><code class="c">struct redisDb{    dict * dict;// 就是哈希的底层结构，保存了所有的键值对}</code></pre><p>redisDb封装了一个字典，字典的键是字符串对象，字典的值是字符串对象、列表对象、集合对象、有序集合对象、哈希对象等。对键值对的增删查改就是在这个键值对空间中操作。对一个键的读取，redis服务器还会维护命中信息，lru信息等，如果发现过期还会进行删除。</p><h5 id="4-键的生存时间和过期时间的实现"><a href="#4-键的生存时间和过期时间的实现" class="headerlink" title="4. 键的生存时间和过期时间的实现"></a>4. 键的生存时间和过期时间的实现</h5><p>设置过期的时间如下：</p><ol><li><code>expire key ttl</code> 设置生存时间，单位秒</li><li><code>pexpire key ttl</code> 设置生存时间，单位毫秒</li><li><code>expireat key timestamp</code> 设置过期时间戳，单位秒</li><li><code>pexpireat key timestamp</code>设置过期时间戳，单位毫秒</li></ol><p>所有的命令都会转化成第4条命令执行。</p><p>redis数据库使用一个过期字典保存所有键的过期时间。</p><pre><code class="c">struct redisDb{    dict * dict;// 数据字典    dict * expire;//过期字典}</code></pre><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/expires.png" alt=""></p><p><strong>过期判断</strong></p><p>通过过期字典，程序可以用以下步骤检查一个给定键是否过期：检查给定键是否存在于过期字典：如果存在，那么取得键的过期时间。检查当前UNIX时间戳是否大于键的过期时间：如果是的话，那么键已经过期；否则的话，键未过期。</p><p><strong>过期删除策略</strong></p><ul><li><p>定时删除：在设置键的过期时间的同时，创建一个定时器（timer），让定时器在键的过期时间来临时，立即执行对键的删除操作。</p><p>采用定时删除，过期的数据可以被及时删除，有利于节约内存，但是定时删除需要创建定时器，因此需要消耗额外的CPU</p></li><li><p>惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键；如果没有过期，就返回该键。</p><p>惰性删除只有在获取键的时候才会判断，虽然不会消耗额外内存，但是会导致已经过期的数据积累在内存中，导致内存的利用率降低</p></li><li><p>定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。</p><p>定期删除是定时删除和惰性删除的一种折中，可以限制对CPU的影响，有避免大量的过期对象的堆积。</p></li></ul><p>在这三种策略中，第一种和第三种为主动删除策略，而第二种则为被动删除策略。Redis服务器<strong>实际使用的是惰性删除和定期删除两种策略</strong>。</p><h5 id="5-对过期键的操作"><a href="#5-对过期键的操作" class="headerlink" title="5. 对过期键的操作"></a>5. 对过期键的操作</h5><ul><li><p>定期删除</p><p>在规定的时间内分多次的去遍历服务器的各数据库，从中删除过期的键。</p></li><li><p>惰性删除</p><p>读写命令都会检查命令是否过期，如果过期返回不存在该键。</p></li><li><p>RDB过程</p><p>如果键已经过期，该键不会保存在RDB文件中，导入RDB文件时如果键已经过期则不会保存在内存中。</p></li><li><p>AOF过程</p><p>无论键是否过期都会保存到AOF文件中，如果键过期了会追加一条删除命令，AOF重写时，会把过期的命令删除。</p></li><li><p>主从复制模式</p><p>从服务不会删除过期的键，即使客户端请求一个过期的键也会返回，只有当服务器判断键过期后向从服务器显视发送一条删除命令，从服务器中的过期键才会被删除。</p></li></ul><hr><h4 id="2-RDB持久化"><a href="#2-RDB持久化" class="headerlink" title="2. RDB持久化"></a>2. RDB持久化</h4><h5 id="1-RDB介绍"><a href="#1-RDB介绍" class="headerlink" title="1. RDB介绍"></a>1. RDB介绍</h5><p>redis是一个基于内存的数据库，当服务器关机后内存的数据会消失，为了实现redis的持久化，有两种机制，RDB和AOF。RDB的基本原理是定时将内存中的数据备份到磁盘文件中。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/rdb.png" alt=""></p><h5 id="2-手动创建RDB文件的两种方式"><a href="#2-手动创建RDB文件的两种方式" class="headerlink" title="2. 手动创建RDB文件的两种方式"></a>2. 手动创建RDB文件的两种方式</h5><p><code>save</code>和<code>bgsave</code>命令是用来手动创建RDB文件。</p><ul><li>save命令执行后，会阻塞当前线程创建rdb文件直到创建完成，期间服务器不会响应任何命令</li><li>bgsave命令会先fork一个子进程然后由子进程去创建rdb文件，不会阻塞服务器</li><li>当服务器载入rdb文件时会阻塞</li></ul><h5 id="3-自动创建RDB的方式"><a href="#3-自动创建RDB的方式" class="headerlink" title="3. 自动创建RDB的方式"></a>3. 自动创建RDB的方式</h5><p>除了手动创建外，还有自动创建的方式，需要通过配置文件实现，默认是900秒内至少有一次修改或者300秒内至少有10次修改，或者60秒内至少有10000次修改就会自动创建rdb文件。服务器的内部使用savaparams来保存参数信息，还会维护一个计时器，计时器保存了距离上一次rdb一共进行了多少次修改操作。Redis的服务器周期性操作函数serverCron默认每隔100毫秒就会执行一次，该函数用于对正在运行的服务器进行维护，如果发现满足条件就会执行bgsave命令</p><h5 id="4-RDB文件结构"><a href="#4-RDB文件结构" class="headerlink" title="4. RDB文件结构"></a>4. RDB文件结构</h5><p>RDB文件的结构如下：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/redis_struction.png" alt=""></p><p>前面两个字段是用来确定这是某个版本的rdb文件，分别是REDIS魔数和redis版本号。database字段保存的是各个数据库的信息，如果数据库的个数为0，则database字段为空，eof表示rdb文件的末尾，checksum是校验和，用来判断当前rdb文件是否损坏。</p><p><strong>database结构</strong></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/rdb_database.png" alt=""></p><p>SELECTDB是一个常量表示这是一个数据库的开始，dbnumber是数据库的编号，kev_value_pairs是键值对。</p><p><strong>键值对结构</strong></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/rdb_keyvaluenoexpire.png" alt=""></p><p>上面是不带过期时间的键值对，type记录了value的类型，key是一个字符串对象，value表示值对象</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/rdb_keyvakye.png" alt=""></p><p>上面是带过期时间的键值对结构，EXPIRETIME_MS是一个常数标记这个键值对带过期时间，ms是过期的时间戳。</p><p><strong>value的结构</strong></p><hr><h4 id="3-AOF持久化"><a href="#3-AOF持久化" class="headerlink" title="3. AOF持久化"></a>3. AOF持久化</h4><h5 id="1-AOF介绍"><a href="#1-AOF介绍" class="headerlink" title="1. AOF介绍"></a>1. AOF介绍</h5><p>AOF也是一种持久化机制，与RDB持久化通过保存数据库中的键值对来记录数据库状态不同，AOF持久化是通过保存Redis服务器所执行的写命令来记录数据库状态的。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/aof.png" alt=""></p><h4 id="4-事件"><a href="#4-事件" class="headerlink" title="4. 事件"></a>4. 事件</h4><h5 id="1-事件介绍"><a href="#1-事件介绍" class="headerlink" title="1. 事件介绍"></a>1. 事件介绍</h5><p>Redis服务器是一个事件驱动程序，服务器主要处理文件事件和时间事件。</p><ul><li><p>文件事件</p><p>redis客户端与服务器通过socket进行连接，文件事件是对套接字的操作的抽象。服务器与客户端的通信会产生事件，服务器通过监听这些事件来完成网络操作。</p></li><li><p>时间事件</p><p>Redis服务器中的一些操作（比如serverCron函数）需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象。</p></li></ul><h5 id="2-文件事件"><a href="#2-文件事件" class="headerlink" title="2. 文件事件"></a>2. 文件事件</h5><p>redis基于reactor模式开发文件事件处理器来处理各种网络事件。文件事件处理器使用io多路复用模型通过一个线程去监听多个套接字，当被监听的套接字准备好连接，读取，写入，关闭等操作时文件事件处理器会调用与当前套接字关联的事件处理器来处理事件。</p><p>文件事件处理器由四个部分组成，分别是套接字，IO多路复用程序，文件事件分派器和事件处理器。Redis的IO多路复用程序封装了如select，poll，epoll等io多路复用函数库来实现。当套接字可读，比如客户端向套接字指向write操作，执行连接操作，执行关闭操作时产生读事件。当套接字可写时，套接字产生写事件。IO多路复用同时监听多个套接字的读写事件，如果有一个套接字产生了某个事件，IO多路复用程序会把这个事件交给文件事件分派器，文件事件分派器会选择相对应的事件处理器进行处理。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/event.png" alt=""></p><h5 id="3-时间事件"><a href="#3-时间事件" class="headerlink" title="3. 时间事件"></a>3. 时间事件</h5><p>Redis的时间事件分为定时事件和周期性事件，定时事件是在某个时间点发生，定期时间是程序每个一个后期产生一次的事件。一个时间时间主要由三个属性组成，id，when和timeProc。id是一个全局唯一的标识号，id从小到大递增，新事件的id比旧事件的id要大。when表示这个事件到达的时间，timeProc表示时间事件处理器，当时间时间达到时，服务器会调用相应的处理器来处理事件。事件处理器的返回值标识这个事件的类型，如果时定时事件，那么这个事件会被删除，如果时定期事件，会更新when属性。</p><p>redis将所有的时间时间都放在一个无需链表中，每当时间时间执行器运行时会遍历整个链表，查找已经到达的时间事件，然后调用响应的事件处理器。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/timeevent.png" alt=""></p><h5 id="4-事件调度"><a href="#4-事件调度" class="headerlink" title="4. 事件调度"></a>4. 事件调度</h5><p>因为服务器中同时存在文件事件和时间事件两种事件类型，所以服务器必须对这两种事件进行调度，决定何时应该处理文件事件，何时又应该处理时间事件，以及花多少时间来处理它们等等。</p><p>从事件处理的角度来看，Redis服务器的运行流程如下：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/eventloop.png" alt=""></p><hr><h4 id="5-客户端"><a href="#5-客户端" class="headerlink" title="5. 客户端"></a>5. 客户端</h4><h5 id="1-客户端介绍"><a href="#1-客户端介绍" class="headerlink" title="1. 客户端介绍"></a>1. 客户端介绍</h5><p>对于每个与服务器进行连接的客户端，服务器都为这些客户端建立了相应的redis.h/redisClient结构，这个结构保存了客户端当前的状态信息，以及执行相关功能时需要用到的数据结构。表示redis服务器的数据结构redisServer有一个成员为clients的链表，用来维护所有与服务器连接的客户端。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/redisclient.png" alt=""></p><h5 id="2-客户端常用属性"><a href="#2-客户端常用属性" class="headerlink" title="2. 客户端常用属性"></a>2. 客户端常用属性</h5><ul><li><p>套接字描述符</p><p>客户端状态的fd属性记录了客户端正在使用的套接字描述符，如果是伪客户端，这个值为-1</p></li><li><p>名字</p><p>默认情况下，没有名字，可以通过<code>client setname 名字</code>设置名字</p></li><li><p>标志</p><p>客户端的标志属性flags记录了客户端的角色（role），以及客户端目前所处的状态</p></li><li><p>输入缓冲区</p><p>客户端状态的输入缓冲区用于保存客户端发送的命令请求</p></li><li><p>命令与命令参数</p><p>在服务器将客户端发送的命令请求保存到客户端状态的输入缓冲区属性之后，服务器将对命令请求的内容进行分析，并将得出的命令参数以及命令参数的个数分别保存到客户端状态的argv属性和argc属性</p></li><li><p>命令表</p><p>当服务器从协议内容中分析并得出argv属性和argc属性的值之后，服务器将根据项argv[0]的值，在命令表中查找命令所对应的命令实现函数</p></li><li><p>输出缓冲区</p><p>执行命令所得的命令回复会被保存在客户端状态的输出缓冲区里面，每个客户端都有两个输出缓冲区可用，一个缓冲区的大小是固定的，另一个缓冲区的大小是可变的</p><ul><li>固定大小的缓冲区用于保存那些长度比较小的回复，比如OK、简短的字符串值、整数值、错误回复等等。</li><li>可变大小的缓冲区用于保存那些长度比较大的回复，比如一个非常长的字符串值，一个由很多项组成的列表，一个包含了很多元素的集合等等。</li></ul><p>固定缓冲区使用char数组和一个下标实现，可变缓冲区使用链表来链接所有的字符串对象</p></li><li><p>身份验证</p><p>客户端状态的authenticated属性用于记录客户端是否通过了身份验证，如果该值为0表示未通过身份认证，为1表示客户端已通过身份认证，当客户端authenticated属性的值为0时，除了AUTH命令之外，客户端发送的所有其他命令都会被服务器拒绝执行，authenticated属性仅在服务器启用了身份验证功能时使用。</p></li><li><p>时间</p><pre><code class="c">typedef struct redisClient{    time_t ctime;    time_t lastinteraction;    time_t obuf_soft_limit_reached_time}redisClient;</code></pre><p>ctime记录了创建客户端的时间</p><p>lastinteraction属性记录了客户端与服务器最后一次进行互动（interaction）的时间</p><p>obuf_soft_limit_reached_time属性记录了输出缓冲区第一次到达软性限制（soft limit）的时间</p></li></ul><h5 id="3-客户端的操作"><a href="#3-客户端的操作" class="headerlink" title="3. 客户端的操作"></a>3. 客户端的操作</h5><ul><li><p>创建客户端</p><p>如果客户端是通过网络连接与服务器进行连接的普通客户端，那么在客户端使用connect函数连接到服务器时，服务器就会调用连接事件处理器，为客户端创建相应的客户端状态，并将这个新的客户端状态添加到服务器状态结构clients链表的末尾</p></li><li><p>关闭客户端</p><p>关闭客户端的原因有很多，如：</p><ol><li>客户端进程退出或者被杀死</li><li>客户端向服务器发送了带有不符合协议格式的命令请求</li><li>客户端成为了CLIENT KILL命令的目标</li><li>用户为服务器设置了timeout配置选项，那么当客户端的空转时间超过timeout选项设置的值时，客户端将被关闭</li><li>客户端发送的命令请求的大小超过了输入缓冲区的限制大小（默认为1 GB）</li><li>发送给客户端的命令回复的大小超过了输出缓冲区的限制大小，那么这个客户端会被服务器关闭</li></ol><p>客户端输出缓冲区有两种模式限制</p><ul><li><p>硬性限制</p><p>如果输出缓冲区的大小超过了硬性限制所设置的大小，那么服务器立即关闭客户端</p></li><li><p>软性限制</p><p>如果输出缓冲区的大小超过了软性限制所设置的大小，但还没超过硬性限制，那么服务器将使用客户端状态结构的obuf_soft_limit_reached_time属性记录下客户端到达软性限制的起始时间；之后服务器会继续监视客户端，如果输出缓冲区的大小一直超出软性限制，并且持续时间超过服务器设定的时长，那么服务器将关闭客户端；相反地，如果输出缓冲区的大小在指定时间之内，不再超出软性限制，那么客户端就不会被关闭，并且obuf_soft_limit_reached_time属性的值也会被清零</p></li></ul></li></ul><hr><h4 id="6-服务器"><a href="#6-服务器" class="headerlink" title="6. 服务器"></a>6. 服务器</h4><h5 id="1-命令请求的执行过程"><a href="#1-命令请求的执行过程" class="headerlink" title="1. 命令请求的执行过程"></a>1. 命令请求的执行过程</h5><ul><li><p>发送命令请求</p><p>Redis服务器的命令请求来自Redis客户端，当用户在客户端中键入一个命令请求时，客户端会将这个命令请求转换成协议格式，然后通过连接到服务器的套接字，将协议格式的命令请求发送给服务器</p></li><li><p>读取命令请求</p><p>当客户端与服务器之间的连接套接字因为客户端的写入而变得可读时，服务器会读取套接字中协议格式的命令请求，并将其保存到客户端状态的输入缓冲区里面。对输入缓冲区中的命令请求进行分析，提取出命令请求中包含的命令参数，以及命令参数的个数，然后分别将参数和参数个数保存到客户端状态的argv属性和argc属性里面，最后调用命令执行器，执行客户端指定的命令。</p></li></ul><p><strong>命令执行器的实现</strong></p><p>据客户端状态的argv[0]参数，在命令表中查找参数所指定的命令，并将找到的命令保存到客户端状态的cmd属性里面。然后在执行命令之前会对参数进行检测以及身份认证的检测，之后调用命令函数执行命令，最后服务器还会执行一些后续操作如AOF。</p><p>命令实现函数会将命令回复保存到客户端的输出缓冲区里面，并为客户端的套接字关联命令回复处理器，当客户端套接字变为可写状态时，服务器就会执行命令回复处理器，将保存在客户端输出缓冲区中的命令回复发送给客户端。客户端收到回复后会打印出来。</p><h5 id="2-severCron函数"><a href="#2-severCron函数" class="headerlink" title="2. severCron函数"></a>2. severCron函数</h5><p>Redis服务器中的serverCron函数默认每隔100毫秒执行一次，这个函数负责管理服务器的资源，并保持服务器自身的良好运转。</p><ul><li><p>更新服务器时间缓存</p><p>Redis服务器中有不少功能需要获取系统的当前时间，而每次获取系统的当前时间都需要执行一次系统调用，为了减少系统调用的执行次数，服务器状态中的unixtime属性和mstime属性被用作当前时间的缓存：unixtime保存了秒级精度的系统当前unix时间戳，mstime保存了毫秒精度的系统当前unix时间戳。注意这些时间是不精确的，只能用在对时间精度要求不高的应用上</p></li><li><p>更新LRU时钟</p><p>服务器状态中的lruclock属性保存了服务器的LRU时钟，这个属性和上面介绍的unixtime属性、mstime属性一样，都是服务器时间缓存的一种。当服务器要计算一个数据库键的空转时间，程序会用服务器的lruclock属性记录的时间减去对象的lru属性记录的时间，得出的计算结果就是这个对象的空转时间</p></li><li><p>更新服务器每秒执行命令次数</p></li><li><p>更新服务器内存峰值记录</p></li><li><p>处理sigtem信号</p></li><li><p>管理客户端资源</p></li><li><p>管理数据库资源</p></li><li><p>执行被延迟的bgrewriteraof</p><p>在服务器执行BGSAVE命令的期间，如果客户端向服务器发来BGREWRITEAOF命令，那么服务器会将BGREWRITEAOF命令的执行时间延迟到BGSAVE命令执行完毕之后。</p></li><li><p>检查持久化操作的运行状态</p></li><li><p>将AOF缓冲区的内容写入AOF文件</p></li><li><p>关闭异步客户端</p></li><li><p>增加cronloops计数器的值</p></li></ul><h5 id="3-初始化服务器"><a href="#3-初始化服务器" class="headerlink" title="3. 初始化服务器"></a>3. 初始化服务器</h5><p>一个Redis服务器从启动到能够接受客户端的命令请求，需要经过一系列的初始化和设置过程，比如初始化服务器状态，接受用户指定的服务器配置，创建相应的数据结构和网络连接等等。</p><ul><li>初始化服务器状态结构</li><li>载入配置选项</li><li>初始化服务器数据结构</li><li>还原数据库状态</li><li>执行事件循环</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis底层数据结构实现原理与源码分析</title>
      <link href="/2020/02/10/Redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/02/10/Redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h4 id="一-字符串"><a href="#一-字符串" class="headerlink" title="一. 字符串"></a>一. 字符串</h4><h5 id="1-介绍Redis中的字符串"><a href="#1-介绍Redis中的字符串" class="headerlink" title="1. 介绍Redis中的字符串"></a>1. 介绍Redis中的字符串</h5><p>Redis是由C语言实现的，而C语言中使用char数组表示字符串，并以<code>\0</code>表示字符串的结尾。但是redis并没有使用C语言中的这种形式的字符串，Redis在设计与实现过程中充分考虑了性能问题，比如在C语言中实现获取字符长度的时间复杂度为O(n)，某些操作C语言字符串也很难完成，比如字符串动态扩容。因此Redis自己实现了字符串，称为简单动态字符串，简称SDS。</p><h5 id="2-SDS的结构"><a href="#2-SDS的结构" class="headerlink" title="2. SDS的结构"></a>2. SDS的结构</h5><pre><code class="c">struct __attribute__ ((__packed__)) sdshdr64 {    uint64_t len; /* used */    uint64_t alloc; /* excluding the header and null terminator */    unsigned char flags; /* 3 lsb of type, 5 unused bits */    char buf[];};</code></pre><p>sds使用结构体来表示，实际上一共有4个类似的结构体，分别是<code>sdshdr8</code>，<code>sdshdr16</code>，<code>sdshdr32</code>,<code>sdshdr64</code>。</p><p>结构体的成员包含一个char数组，实际字符串长度len和数组长度alloc。char数组用来存放实际的字符串数据，以<code>\0</code>结尾，len表示字符串的长度，这样在计算字符串长度时就可以直接获取而不需要去遍历数组。alloc用来表示当前结构体可以容纳多长的字符串，如果字符串在执行appen之类的操作导致字符串长度动态增长，如果新的字符串长度大于alloc，那么就会引发扩容。</p><h5 id="3-字符串扩容"><a href="#3-字符串扩容" class="headerlink" title="3. 字符串扩容"></a>3. 字符串扩容</h5><pre><code class="c">sds sdscatlen(sds s, const void *t, size_t len) {    size_t curlen = sdslen(s);    s = sdsMakeRoomFor(s,len);    if (s == NULL) return NULL;    memcpy(s+curlen, t, len);    sdssetlen(s, curlen+len);    s[curlen+len] = &#39;\0&#39;;    return s;}</code></pre><p>这个函数的作用是将一个长度为len的字符串附加在字符串s后面。<code>sdsMakeRoomFor</code>用来扩大sds的缓存空间</p><pre><code class="c">sds sdsMakeRoomFor(sds s, size_t addlen) {    void *sh, *newsh;    // 1. 获取sds空闲空间的长度    size_t avail = sdsavail(s);    size_t len, newlen;    char type, oldtype = s[-1] &amp; SDS_TYPE_MASK;    int hdrlen;    // 2. 如果sds空闲空间够用，就不需要进行扩容直接返回    if (avail &gt;= addlen) return s;    // 3. 获取sds的字符串长度    len = sdslen(s);    sh = (char*)s-sdsHdrSize(oldtype);    newlen = (len+addlen);    // SDS_MAX_PREALLOC=1024x1024    // 下面的代码说明，如果新字符串的长度小于1m，则sds的数组长度为新字符串的长度的2倍，否则加上1MB    if (newlen &lt; SDS_MAX_PREALLOC)        newlen *= 2;    else        newlen += SDS_MAX_PREALLOC;    // 判断新字符串使用哪个类型的sds头部    type = sdsReqType(newlen);    /* Don&#39;t use type 5: the user is appending to the string and type 5 is     * not able to remember empty space, so sdsMakeRoomFor() must be called     * at every appending operation. */    if (type == SDS_TYPE_5) type = SDS_TYPE_8;    // 计算sds头部，用于后面分配内存    hdrlen = sdsHdrSize(type);    if (oldtype==type) {        // 重新分配内存        newsh = s_realloc(sh, hdrlen+newlen+1);        if (newsh == NULL) return NULL;        s = (char*)newsh+hdrlen;    } else {        /* Since the header size changes, need to move the string forward,         * and can&#39;t use realloc */        newsh = s_malloc(hdrlen+newlen+1);        if (newsh == NULL) return NULL;        memcpy((char*)newsh+hdrlen, s, len+1);        s_free(sh);        s = (char*)newsh+hdrlen;        s[-1] = type;        sdssetlen(s, len);    }    sdssetalloc(s, newlen);    return s;}</code></pre><p>通过上面的函数可以得到扩容机制：首先计算出新字符串的长度，如果该长度小于1MB，则翻倍否则增加1MB，然后判断新字符串属于哪种sds类型，最后重新分配内存得到新的sds返回。</p><h5 id="4-Redis对象的表示"><a href="#4-Redis对象的表示" class="headerlink" title="4. Redis对象的表示"></a>4. Redis对象的表示</h5><p>Redis的对象使用一个叫做redisObj的结构体表示</p><pre><code class="c">typedef struct redisObject {    unsigned type:4;    unsigned encoding:4;    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or                            * LFU data (least significant 8 bits frequency                            * and most significant 16 bits access time). */    int refcount;    void *ptr;} robj;</code></pre><p>type表示对象类型，encodeing表示对象编码，lru表示lru时间，refcount表示该对象的计数器，用来实现内存自动回收，ptr是一个void指针，可以指向任何类型的变量，指向内存实际的空间。</p><p>看完这个结构体可以发现，Redis的开发者虽然使用C语言实现的Redis，C语言是一门面向过程的语言，但是redis的开发者试图构造出一个面向对象的体系。</p><h5 id="5-字符串编码"><a href="#5-字符串编码" class="headerlink" title="5. 字符串编码"></a>5. 字符串编码</h5><p>Redis中的字符串对象有三种编码：int、embstr，raw。</p><pre><code class="c">robj *createStringObject(const char *ptr, size_t len) {    // OBJ_ENCODING_EMBSTR_SIZE_LIMIT=44    if (len &lt;= OBJ_ENCODING_EMBSTR_SIZE_LIMIT)        // 使用emb编码        return createEmbeddedStringObject(ptr,len);    else        // 使用raw编码        return createRawStringObject(ptr,len);}</code></pre><p>可以看出分配字符串对象时，如果字符串长度小于或等于44时使用embstr编码，否则使用raw编码。</p><p><strong>embstr与raw出来字符串长度不同还有什么区别</strong></p><p>embstr编码</p><pre><code class="c">/* 使用编码OBJ_ENCODING_EMBSTR创建一个string对象，在这个对象中，sds字符串实际上是与对象本身在同一块中分配的不可修改的字符串。 */robj *createEmbeddedStringObject(const char *ptr, size_t len) {    robj *o = zmalloc(sizeof(robj)+sizeof(struct sdshdr8)+len+1);    struct sdshdr8 *sh = (void*)(o+1);    o-&gt;type = OBJ_STRING;    o-&gt;encoding = OBJ_ENCODING_EMBSTR;    o-&gt;ptr = sh+1;    o-&gt;refcount = 1;    if (server.maxmemory_policy &amp; MAXMEMORY_FLAG_LFU) {        o-&gt;lru = (LFUGetTimeInMinutes()&lt;&lt;8) | LFU_INIT_VAL;    } else {        o-&gt;lru = LRU_CLOCK();    }    sh-&gt;len = len;    sh-&gt;alloc = len;    sh-&gt;flags = SDS_TYPE_8;    if (ptr) {        memcpy(sh-&gt;buf,ptr,len);        sh-&gt;buf[len] = &#39;\0&#39;;    } else {        memset(sh-&gt;buf,0,len+1);    }    return o;}</code></pre><p>raw编码</p><pre><code class="c">/* 用编码OBJ_ENCODING_RAW创建一个字符串对象，这是一个普通的字符串对象，其中o-&gt;ptr指向一个适当的sds字符串 */robj *createRawStringObject(const char *ptr, size_t len) {    // sdsnewlen实际上内部调用malloc分配了一个sds的内存空间    // createObject继续分配redisObject    return createObject(OBJ_STRING, sdsnewlen(ptr,len));}</code></pre><pre><code class="c">/* ===================== Creation and parsing of objects ==================== */robj *createObject(int type, void *ptr) {    // 分配redisObject    robj *o = zmalloc(sizeof(*o));    o-&gt;type = type;    o-&gt;encoding = OBJ_ENCODING_RAW;    o-&gt;ptr = ptr;    o-&gt;refcount = 1;    /* Set the LRU to the current lruclock (minutes resolution), or     * alternatively the LFU counter. */    if (server.maxmemory_policy &amp; MAXMEMORY_FLAG_LFU) {        o-&gt;lru = (LFUGetTimeInMinutes()&lt;&lt;8) | LFU_INIT_VAL;    } else {        o-&gt;lru = LRU_CLOCK();    }    return o;}</code></pre><p><strong>embstr</strong> 存储形式将 <strong>RedisObject 对象头和 SDS 对象连续存在一起</strong>，使用 malloc 方法一次分配。而 <strong>raw</strong> 存储形式不一样，它<strong>需要两次 malloc，两个对象头在内存地址上一般是不连续的</strong>。如下图所示:</p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/sds.png" style="zoom:67%;" /><h5 id="6-sds的优点"><a href="#6-sds的优点" class="headerlink" title="6. sds的优点"></a>6. sds的优点</h5><ul><li>获取字符串长度的复杂度为O(1)</li><li>API是安全的，不会造成缓冲区溢出</li><li>修改字符串长度N次最多需要执行N次内存重分配，预分配和惰性释放</li><li>可以保存文本或者二进制数据，可以使用len属性判断是否结束</li><li>可以使用C库中的函数</li></ul><h5 id="7-疑问"><a href="#7-疑问" class="headerlink" title="7. 疑问"></a>7. 疑问</h5><ul><li><p>为什么以44作为两种编码的分界点</p><p>内存分配器一次能分配64字节，如果超过64字节就会转化为raw格式。字符串对象由对象头和sds头以及字符串组成。对象头占了16字节，sds头占了（sdshdr8）占了3字节。64-16-3=45字节，但是字符串末尾需要使用<code>\0</code>，所以还剩下44字节。</p></li><li><p>字符串的应用</p><ol><li>作为计数器</li><li>存储简单的键值对</li><li>将对象json序列化后存储，获取时反序列化</li></ol></li></ul><hr><h4 id="二-链表"><a href="#二-链表" class="headerlink" title="二. 链表"></a>二. 链表</h4><h5 id="1-介绍Redis中的list"><a href="#1-介绍Redis中的list" class="headerlink" title="1. 介绍Redis中的list"></a>1. 介绍Redis中的list</h5><h5 id="2-linkedlist的结构"><a href="#2-linkedlist的结构" class="headerlink" title="2. linkedlist的结构"></a>2. linkedlist的结构</h5><p><strong>list节点</strong></p><pre><code class="c">typedef struct listNode {    struct listNode *prev;    struct listNode *next;    void *value;} listNode;</code></pre><p>list节点包含前后指针以及一个void类型的指针，说明该链表节点可以放任何类型的数据（有点泛型的意思）。前后指针说明这个链表是双向链表</p><p><strong>list底层数据结构</strong></p><pre><code class="c">typedef struct list {    listNode *head;    listNode *tail;    void *(*dup)(void *ptr);    void (*free)(void *ptr);    int (*match)(void *ptr, void *key);    unsigned long len;} list;</code></pre><p>使用结构体list表示链表，list结构体中包含头尾指针和链表长度。</p><p><strong>list相关的常用方法</strong></p><pre><code class="c">list *listCreate(void);// 创建链表void listRelease(list *list);// 释放链表void listEmpty(list *list);// 清空链表list *listAddNodeHead(list *list, void *value);// 在链表头添加元素list *listAddNodeTail(list *list, void *value);// 在链表尾添加元素list *listInsertNode(list *list, listNode *old_node, void *value, int after);void listDelNode(list *list, listNode *node);listIter *listGetIterator(list *list, int direction);listNode *listNext(listIter *iter);void listReleaseIterator(listIter *iter);list *listDup(list *orig);listNode *listSearchKey(list *list, void *key);listNode *listIndex(list *list, long index);void listRewind(list *list, listIter *li);void listRewindTail(list *list, listIter *li);void listRotate(list *list);void listJoin(list *l, list *o);</code></pre><p>上面说明redis实现了对list的各种操作，list结构非常简单。</p><hr><h4 id="三-压缩列表"><a href="#三-压缩列表" class="headerlink" title="三. 压缩列表"></a>三. 压缩列表</h4><h5 id="1-介绍压缩列表"><a href="#1-介绍压缩列表" class="headerlink" title="1. 介绍压缩列表"></a>1. 介绍压缩列表</h5><p>当一个列表只包含少量表项，并且每个列表项要么是小整数，要么是较短的字符串 ，那么redis就会使用压缩列表来作为列表的底层实现。</p><h5 id="2-ziplist的结构"><a href="#2-ziplist的结构" class="headerlink" title="2. ziplist的结构"></a>2. ziplist的结构</h5><pre><code class="c">unsigned char *ziplistNew(void) {    unsigned int bytes = ZIPLIST_HEADER_SIZE+1;// ZIPLIST_HEADER_SIZE=10字节    unsigned char *zl = zmalloc(bytes);    ZIPLIST_BYTES(zl) = intrev32ifbe(bytes);// bytes为4字节    ZIPLIST_TAIL_OFFSET(zl) = intrev32ifbe(ZIPLIST_HEADER_SIZE);// tail_offset=4字节    ZIPLIST_LENGTH(zl) = 0;// len=2字节    zl[bytes-1] = ZIP_END;// end=1字节    return zl;}</code></pre><p>一般来说使用C语言定义数据结构一般会使用结构体，但是这里是直接分配内存。通过上面的方法可以看出ziplist的结构如下图。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/ziplist.png" alt=""></p><ul><li><p>bytes是一个4字节无符号整数，用来存储整个ziplist占用的字节数</p></li><li><p>tail是一个4字节无符号整数，用来存储ziplist最后一个节点的相对于ziplist首地址偏移量</p></li><li><p>len是一个2字节无符号整数，存储ziplist中节点的数目，最大值为(2^16 - 2)，当zllen大于最大值时，需要遍历整个ziplist才能获取ziplist节点的数目</p></li><li><p>entry是数据节点</p></li></ul><p>ziplist占用的是一段连续的内存空间。</p><h5 id="3-ziplist节点"><a href="#3-ziplist节点" class="headerlink" title="3. ziplist节点"></a>3. ziplist节点</h5><pre><code class="c">typedef struct zlentry {    unsigned int prevrawlensize; /* 记录prevrawlen长度数值所需要的字节数*/    unsigned int prevrawlen;     /* 上一个节点的长度 */    unsigned int lensize;        /* 表示当前长度表示所需的字节数*/    unsigned int len;            /* 表示当前数据节点的长度 */    unsigned int headersize;     /* 数据结点的头部信息长度的字节数 */    unsigned char encoding;      /* 编码方式 */    unsigned char *p;            /* Pointer to the very start of the entry, that                                    is, this points to prev-entry-len field. */} zlentry;</code></pre><pre><code class="c">/* Return a struct with all information about an entry. */void zipEntry(unsigned char *p, zlentry *e) {    ZIP_DECODE_PREVLEN(p, e-&gt;prevrawlensize, e-&gt;prevrawlen);    ZIP_DECODE_LENGTH(p + e-&gt;prevrawlensize, e-&gt;encoding, e-&gt;lensize, e-&gt;len);    e-&gt;headersize = e-&gt;prevrawlensize + e-&gt;lensize;    e-&gt;p = p;// 节点实际内容}</code></pre><p>ziplist节点如图所示</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/ziplist2.png" alt=""></p><ul><li><p>previous_entry_length</p><p>表示前一个节点的长度，已知当前节点首地址可以计算出上一个节点的首地址，用来实现从后往前遍历压缩列表，占1个字节或者5个字节。当上一个节点的长度小于254字节时，占一个字节。当上一个节点的长度大于等于254时，占5个字节，其中第一个字节值为254，后面4个字节用来表示长度</p></li><li><p>encoding</p><p>记录了节点的content属性所保存的数据的类型和长度，使用前两位表示类型，类型有字节数组和整数两种。其他的位表示长度。</p><p>字节数组</p><table><thead><tr><th>编码</th><th>编码长度</th><th>conten属性保存的值</th></tr></thead><tbody><tr><td>00</td><td>1字节</td><td>长度小于2^6-1的字节数组</td></tr><tr><td>01</td><td>2字节</td><td>长度小于2^14-1的字节数组</td></tr><tr><td>10</td><td>5字节</td><td>长度小于2^38-1的字节数组</td></tr></tbody></table><p>整数</p><table><thead><tr><th>编码</th><th>编码长度</th><th>content属性保存的值</th></tr></thead><tbody><tr><td>11000000</td><td>1字节</td><td>int16类型的整数</td></tr><tr><td>11010000</td><td>1字节</td><td>int32类型的整数</td></tr><tr><td>11100000</td><td>1字节</td><td>int64类型的整数</td></tr><tr><td>11110000</td><td>1字节</td><td>24位有符号整数</td></tr><tr><td>11111110</td><td>1字节</td><td>8位有符号整数</td></tr><tr><td>1111xxxx</td><td>1字节</td><td>没有相应的content，encoding属性表示0到12的数字</td></tr></tbody></table></li></ul><ul><li><p>content</p><p>保存节点的值</p></li></ul><h5 id="4-压缩列表的连锁更新"><a href="#4-压缩列表的连锁更新" class="headerlink" title="4. 压缩列表的连锁更新"></a>4. 压缩列表的连锁更新</h5><p>previous_entry_length：当前一个节点长度小于254字节时占用一个字节；大于或等于254字节时占用5个字节，所以当在某个元素之前插入一个较大的节点，可能导致后面的节点中的previous_entry_length属性由1个字节变成5个字节从而导致后面那个节点也变大，后面的那个节点也可能会超过254字节，这种更新可能会持续下去，称为连锁更新，连锁更新发生后需要重新分配内存。</p><hr><h4 id="四-哈希表"><a href="#四-哈希表" class="headerlink" title="四. 哈希表"></a>四. 哈希表</h4><h5 id="1-介绍哈希表"><a href="#1-介绍哈希表" class="headerlink" title="1. 介绍哈希表"></a>1. 介绍哈希表</h5><h5 id="2-哈希表实现"><a href="#2-哈希表实现" class="headerlink" title="2. 哈希表实现"></a>2. 哈希表实现</h5><pre><code class="c">typedef struct dict {    dictEntry **table;    dictType *type;    unsigned long size;    unsigned long sizemask;    unsigned long used;    void *privdata;} dict;</code></pre><p>上面的结构体表示一个哈希表结构</p><pre><code class="c">typedef struct dictEntry {    void *key;    void *val;    struct dictEntry *next;} dictEntry;</code></pre><p>上面的结构体表示一个哈希表Entry节点，包括key，value和一个指针指向下一个节点。</p><h5 id="3-冲突解决"><a href="#3-冲突解决" class="headerlink" title="3. 冲突解决"></a>3. 冲突解决</h5><p><strong>添加元素</strong></p><pre><code class="c">/* Add an element to the target hash table */static int dictAdd(dict *ht, void *key, void *val) {    int index;    dictEntry *entry;    /*获取节点插入的位置，如果为-1证明已经存在一个key相等的结点 */    if ((index = _dictKeyIndex(ht, key)) == -1)        return DICT_ERR;    /* 为节点分配内存，并使用头插法插入元素 */    entry = malloc(sizeof(*entry));    entry-&gt;next = ht-&gt;table[index];    ht-&gt;table[index] = entry;    /* Set the hash entry fields. */    dictSetHashKey(ht, entry, key);    dictSetHashVal(ht, entry, val);    ht-&gt;used++;    return DICT_OK;}</code></pre><p>通过上面的方法可以知道Redis解决哈希冲突使用的是拉链法</p><h5 id="4-rehash"><a href="#4-rehash" class="headerlink" title="4. rehash"></a>4. rehash</h5><p>随着操作的不断进行，哈希表保存的键值对会逐渐的增多，为了让哈希表的负载因子维持在一个合理的范围之内，当哈希表保存的键值对太多或者太少了，会对哈希表进行扩展或者收缩。这个步骤就是rehash的过程。</p><pre><code class="c">int dictRehash(dict *d, int n) {    int empty_visits = n*10; /* 最多可以遇到10*n个空桶 */    if (!dictIsRehashing(d)) return 0;    while(n-- &amp;&amp; d-&gt;ht[0].used != 0) {        dictEntry *de, *nextde;        /* 保证rehasIdx不会超过旧桶的大小 */        assert(d-&gt;ht[0].size &gt; (unsigned long)d-&gt;rehashidx);        // 如果遇到某个桶是空的，empt_visits要减去1，如果等于0就结束这次rehash操作        while(d-&gt;ht[0].table[d-&gt;rehashidx] == NULL) {            d-&gt;rehashidx++;            if (--empty_visits == 0) return 1;        }        // 获取到要rehash的桶        de = d-&gt;ht[0].table[d-&gt;rehashidx];        /* 将旧桶中的所有key移动到新的哈希表中 */        while(de) {            uint64_t h;            nextde = de-&gt;next;            /* Get the index in the new hash table */            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[1].sizemask;            de-&gt;next = d-&gt;ht[1].table[h];            d-&gt;ht[1].table[h] = de;            d-&gt;ht[0].used--;            d-&gt;ht[1].used++;            de = nextde;        }        // 清空旧桶中的元素        d-&gt;ht[0].table[d-&gt;rehashidx] = NULL;        // 继续进行下一步        d-&gt;rehashidx++;    }    /* 如果旧的哈希表中没有元素了，说明rehash完成，把新的哈希表赋给旧的哈希表，然后返回0 */    if (d-&gt;ht[0].used == 0) {        zfree(d-&gt;ht[0].table);        d-&gt;ht[0] = d-&gt;ht[1];        _dictReset(&amp;d-&gt;ht[1]);        d-&gt;rehashidx = -1;        return 0;    }    /* rehash过程没有完全完成，返回1*/    return 1;}</code></pre><p>从上面的方法可以看出redis的rehash过程不是一步完成的，这个过程称为<strong>渐进式rehash</strong>，哈希表的结构如下：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/rehash.png" alt=""></p><p><strong>渐进式rehash过程</strong></p><ul><li>为table[1]分配内存空间，让哈希表同时持有两个空间</li><li>在哈希表维持一个索引计数器变量rehashidx，并将它设置成0，表示rehash工作正式开始</li><li>在rehash进行期间，对哈希表的添加删除查找和更新操作，程序除了执行指定操作外，还会顺带将table[0]在rehashidx位置rehash到table[1],当rehash完成，rehashidx的值会增加</li><li>经过多次rehash操作，最终会将所有元素都rehash至table[1]，完成后将rehashidx设为-1，表示rehash结束</li></ul><p><strong>渐进式rehash过程的其他操作</strong></p><p>对于查找、删除、更新操作会在两个table中进行。</p><p><strong>渐进式rehash操作的优点</strong></p><p>如果不采取rehash的操作，当一个哈希表的元素太多的时候，需要很长的时间才能完成rehash操作，而redis是单线程处理命令的，所以会导致其他命令阻塞。渐进式rehash可以把rehash的时间分摊到多次操作中。</p><hr><h4 id="五-跳跃表"><a href="#五-跳跃表" class="headerlink" title="五. 跳跃表"></a>五. 跳跃表</h4><h5 id="1-介绍跳跃表"><a href="#1-介绍跳跃表" class="headerlink" title="1. 介绍跳跃表"></a>1. 介绍跳跃表</h5><p>跳跃表是一种有序的支持快速查找的数据结构，其效率与平衡树差不多，但是实现比平衡树简单。在redis中跳跃表是有序集合的底层结构。</p><h5 id="2-跳跃表的实现"><a href="#2-跳跃表的实现" class="headerlink" title="2. 跳跃表的实现"></a>2. 跳跃表的实现</h5><pre><code class="java">package datastruct;import java.util.*;public class SkipList&lt;K,V&gt;{    private Comparator&lt;K&gt; comparator;    // 最大高度    private int maxLevel;    private int level;    private Entry header;    // 概率参数    private double p;    public SkipList(){        this(5,0.5);    }    public SkipList(int maxLevel,double p){        this.maxLevel=maxLevel;        this.p=p;        header=new Entry(null,null,maxLevel);    }    public SkipList(Comparator&lt;K&gt; comparator){        this();        this.comparator=comparator;    }    public V search(K key){        Entry entry = searchElement(key);        return entry==null?null:(V)entry.value;    }    private Entry searchElement(K key){        Entry current=header;        for (int i=level-1;i&gt;=0;i--){            while (current.next[i]!=null&amp;&amp;this.compare(current.next[i].key,key)&lt;0){                current=current.next[i];            }        }        current=current.next[0];        if (current!=null&amp;&amp;compare(current.key,key)==0){            return current;        }        return null;    }    public void insert(K key,V value){        Entry current=header;        Entry[] update=new Entry[maxLevel];        for (int i=level-1;i&gt;=0;i--){            while (current.next[i]!=null                    &amp;&amp;compare(current.next[i].key,key)&lt;0){                current=current.next[i];            }            update[i]=current;        }        current=current.next[0];        if (current==null||compare(current.key,key)!=0){            int randomLevel= randomLevel();            if (randomLevel&gt;level){                for (int i=level;i&lt;randomLevel;i++){                    update[i]=header;                }                level=randomLevel;            }            Entry entry=new Entry(key,value,randomLevel);            for (int i=0;i&lt;randomLevel;i++){                entry.next[i]=update[i].next[i];                update[i].next[i]=entry;            }        }    }    public void remove(K key){        Entry[] update=new Entry[level];        Entry current=header;        for(int i=level-1;i&gt;=0;i--){            while (current.next[i]!=null&amp;&amp;compare(current.next[i].key,key)&lt;0){                current=current.next[i];            }            update[i]=current;        }        for (int i=level-1;i&gt;=0;i--){            if (update[i].next!=null&amp;&amp;update[i].next[i].key == key){                update[i].next[i]=update[i].next[i].next[i];            }        }    }    /**     * 获取随机的高度     * @return 高度     */    private int randomLevel(){        int level=1;        double temp=Math.random();        while (level&lt;maxLevel&amp;&amp;temp&lt;p){            temp=Math.random();            level++;        }        return level;    }    public List&lt;V&gt; valueList(){        List&lt;V&gt; list=new ArrayList&lt;&gt;();        Entry current=header.next[0];        while (current!=null){            list.add((V)current.value);            current=current.next[0];        }        return list;    }    @SuppressWarnings(&quot;unchecked&quot;)    private int compare(Object k1,Object k2){        return comparator!=null?comparator.compare((K)k1,(K)k2):                ((Comparable&lt;? super K&gt;)k1).compareTo((K)k2);    }    static final class Entry{        Object key;        Object value;        Entry[] next;        int level;        Entry(Object key,Object value,int level){            this.key=key;            this.value=value;            this.level=level;            this.next=new Entry[level];        }    }}</code></pre><p>上面是自己实现的一个跳跃表</p><h5 id="3-跳跃表特点分析"><a href="#3-跳跃表特点分析" class="headerlink" title="3. 跳跃表特点分析"></a>3. 跳跃表特点分析</h5><p><strong>跳表思想</strong></p><p>跳跃表是一种支持快速查找删除插入的有序的列表结构，首先对于列表我们常见的由数组和链表，数组的特点是内存空间连续，对于排序的数组可以通过二分法进行快速查找，但是对于增加元素和删除元素操作，数组需要调整大量元素的位置，并且可能需要重新分配内存空间完成扩容操作。链表的优点是对于修改开销小，但是由于每个元素不是连续的，所以查找需要从第一个元素向后遍历才能找到目标元素。而跳跃表就是在链表的基础上解决了查找的问题，它的思路是普通的单链表查找时每次只能移动一个元素，根据二分查找的思想，如果可以直接找到中间的元素就可以少移动一半的元素，但是链表的元素不是内存连续的，所以无法计算出了，而跳跃表的实现是每个节点不在像单链表一样只有一个后继指针指向下一个结点，而是有多个指针组成的数组。利用这些指针数组就可以实现类似二分查找的操作，理想情况下每隔两个元素连接起来，然后是每隔4个，8个以此类推。这样在查找元素时每次都可以淘汰一半的元素不用考虑。当然理想情况很难实现，为此跳跃表的实现使用概率的方式去决定每隔元素有多少个指针指向下一个元素。</p><p><strong>时间复杂度</strong></p><p>查找，删除，插入的时间复杂度是O(logn)</p><h5 id="4-为什么使用跳跃表"><a href="#4-为什么使用跳跃表" class="headerlink" title="4. 为什么使用跳跃表"></a>4. 为什么使用跳跃表</h5><p>为什么redis使用跳跃表来实现有序集合而不是平衡树如B+树。</p><p>Redis的作者是这样说的</p><blockquote><p>1) They are not very memory intensive. It’s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.</p><p>2) A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.</p><p>3) They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.</p></blockquote><p>大概意思是</p><ul><li>跳跃表比平衡树占用更少的内存（所有平衡树一般用于基于磁盘的查找，跳跃表用于基于内存的查找）</li><li>跳跃表方便进行范围查找</li><li>跳跃表的实现比平衡树简单，但是性能差不多</li></ul><hr><h4 id="六-整数集合"><a href="#六-整数集合" class="headerlink" title="六. 整数集合"></a>六. 整数集合</h4><h5 id="1-整数集合介绍"><a href="#1-整数集合介绍" class="headerlink" title="1. 整数集合介绍"></a>1. 整数集合介绍</h5><p>整数集合是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合键的底层实现。</p><h5 id="2-整数集合的实现"><a href="#2-整数集合的实现" class="headerlink" title="2. 整数集合的实现"></a>2. 整数集合的实现</h5><pre><code class="c">typedef struct intset {    uint32_t encoding;    uint32_t length;    int8_t contents[];} intset;</code></pre><p>整数集合的结构体如上所示，包括一个uint32_t的encoding成员代表编码对象，length表示集合元素个数，int8_t数组content用来存放实际的数据，数据的解码按照编码encoding的值来确定。下面时对整数集合的一些操作。</p><pre><code class="c">intset *intsetNew(void);// 创建一个新的整数集合intset *intsetAdd(intset *is, int64_t value, uint8_t *success);// 插入元素intset *intsetRemove(intset *is, int64_t value, int *success);// 删除元素uint8_t intsetFind(intset *is, int64_t value);// 查找元素，使用的是二分查找int64_t intsetRandom(intset *is);// 随机返回一个元素uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value);// 取出底层数组指定索引中的数uint32_t intsetLen(const intset *is);// 返回集合大小size_t intsetBlobLen(intset *is);// 返回整数集合占用的内存数</code></pre><p>整数集合的结构如图所示</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/intset.png" alt=""></p><p><strong>插入元素</strong></p><pre><code class="c">intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {    uint8_t valenc = _intsetValueEncoding(value);    uint32_t pos;    if (success) *success = 1;    /* 升级操作 */    if (valenc &gt; intrev32ifbe(is-&gt;encoding)) {        return intsetUpgradeAndAdd(is,value);    } else {        /* 查找待插入的值，如果找到了就进入if语句，否则插入位置赋给pos */        if (intsetSearch(is,value,&amp;pos)) {            if (success) *success = 0;            return is;        }        // 扩容并将pos位置的值往后移动        is = intsetResize(is,intrev32ifbe(is-&gt;length)+1);        if (pos &lt; intrev32ifbe(is-&gt;length)) intsetMoveTail(is,pos,pos+1);    }    // 将值插入到pos位置    _intsetSet(is,pos,value);    // 更新长度    is-&gt;length = intrev32ifbe(intrev32ifbe(is-&gt;length)+1);    return is;}</code></pre><p>插入总能保证数组有序，时间复杂度位O(n)</p><p><strong>查找操作</strong></p><pre><code class="c">uint8_t intsetFind(intset *is, int64_t value) {    uint8_t valenc = _intsetValueEncoding(value);    return valenc &lt;= intrev32ifbe(is-&gt;encoding) &amp;&amp; intsetSearch(is,value,NULL);}</code></pre><p><code>intsetSearch</code>是一个二分查找，具体代码不列出，所以查找的时间复杂度为O(logN)</p><p><strong>升级操作</strong></p><p>整数集合对应不同的编码，编码包括：<code>INTSET_ENC_INT16</code>,<code>INTSET_ENC_INT32</code>,<code>INTSET_ENC_INT64</code>,分别表示集合元素为16位，32位，64位整数，当插入一个较大的数就可能导致原来的编码无法容纳当前的元素，需要扩大编码，如从16位变成32位。</p><pre><code class="c">/* 升级整数集合的编码，然后插入value */static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {    uint8_t curenc = intrev32ifbe(is-&gt;encoding);// 获取当前编码    uint8_t newenc = _intsetValueEncoding(value);// 根据当前待插入的值计算出其编码    int length = intrev32ifbe(is-&gt;length);    int prepend = value &lt; 0 ? 1 : 0;    /* 设置新的编码并扩容*/    is-&gt;encoding = intrev32ifbe(newenc);    is = intsetResize(is,intrev32ifbe(is-&gt;length)+1);    //从后往前升级，这样就不会覆盖值。注意，“prepend”变量用于确保intset的开头或结尾都有一个空格。    while(length--)        _intsetSet(is,length+prepend,_intsetGetEncoded(is,length,curenc));    // 设置当前值    if (prepend)        _intsetSet(is,0,value);// 设置再第0位    else        _intsetSet(is,intrev32ifbe(is-&gt;length),value);// 设置在最后一位    is-&gt;length = intrev32ifbe(intrev32ifbe(is-&gt;length)+1);// 修改数组长度    return is;}</code></pre><p>从上面的方法可以总结出升级过程：</p><ol><li>根据新元素的类型确定编码并且将数组扩容。</li><li>根据新的编码从后往前将原来的元素转化成新的编码并放置到合适的位置</li><li>设置当前元素（引发当前数组扩容的新元素一定比所有的旧元素大或者小，因此放到第0位或者最后一位</li></ol><p><strong>降级操作</strong></p><p>没有降级操作</p><h5 id="3-整数集合的优点"><a href="#3-整数集合的优点" class="headerlink" title="3. 整数集合的优点"></a>3. 整数集合的优点</h5><p>采用编码和升级的方式保证数组内部的元素类型相同，并且可以节约内存。</p><h5 id="4-整数集合总结"><a href="#4-整数集合总结" class="headerlink" title="4. 整数集合总结"></a>4. 整数集合总结</h5><p>整数集合是集合对象的底层实现之一，用来保存不重复的整数集合。底层是一个有序数组，使用二分法进行查找，插入元素是需要维护数组的有序性，使用升级操作带来了灵活性和节约了内存。</p><hr><h4 id="七-对象"><a href="#七-对象" class="headerlink" title="七. 对象"></a>七. 对象</h4><h5 id="1-Redis对象介绍"><a href="#1-Redis对象介绍" class="headerlink" title="1. Redis对象介绍"></a>1. Redis对象介绍</h5><p>上面的实现是Redis对象底层数据结构，Redis并没有直接使用这些结构去实现键值对数据库，而是基于这些结构创建了一个对象系统，这个对象系统有多态的概念也有内存回收机制，并且对象还可以共享，极大的提高了Redis的灵活性和节约了内存。Redis对象用一个redisObject结构体表示。</p><pre><code class="c">typedef struct redisObject {    unsigned type:4;    unsigned encoding:4;    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or                            * LFU data (least significant 8 bits frequency                            * and most significant 16 bits access time). */    int refcount;    void *ptr;} robj;</code></pre><p>Redis对象如图所示：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/redisobject.png" alt=""></p><ul><li><p>type</p><p>表示对象类型，如字符串对象，列表对象，集合对象，有序集合对象，哈希对象等</p></li><li><p>encoding</p><p>编码，表示的是对象的底层数据结构</p></li><li><p>lru</p><p>当内存紧张时，通过lru算法淘汰对象</p></li><li><p>refcount</p><p>引用计数</p></li><li><p>ptr</p><p>指向对象的底层数据结构</p></li></ul><h5 id="2-字符串对象"><a href="#2-字符串对象" class="headerlink" title="2. 字符串对象"></a>2. 字符串对象</h5><p>字符串对象有三种编码，分别是int,embstr和raw。</p><p>如果一个字符串对象的值可以转化成数字，并且数字的范围不会超过long，则会使用int编码，ptr指针直接指向一个数字，对于int对象，只要执行某个命令使得值不在是一个long型的数字，编码都会发生变化。如果对象保存的是字符串值并且长度小于44，会使用embstr编码，当字符串长度大于44时会转换成raw编码。embstr和raw编码都会对应一个sds对象。embstr编码是一种内存优化的编码技术，它通过一次内存分配，redisObject与sds是连续的。而raw则需要通过两次内存分配，redisObject与sds不是连续的。</p><h5 id="3-列表对象"><a href="#3-列表对象" class="headerlink" title="3. 列表对象"></a>3. 列表对象</h5><p>列表对象的编码是压缩列表和双端链表。但在后序版本中使用quiklist来代替传统的压缩列表和双端链表。quickList 是 zipList 和 linkedList 的混合体，它将 linkedList 按段切分，每一段使用 zipList 来紧凑存储，多个 zipList 之间使用双向指针串接起来。</p><h5 id="4-哈希对象"><a href="#4-哈希对象" class="headerlink" title="4. 哈希对象"></a>4. 哈希对象</h5><p>哈希对象的编码有压缩列表和哈希表。</p><p>当哈希对象保存的元素的键和值的长度都小于64字节并且哈希对象保存的元素个数不超过512字节时使用压缩列表。</p><h5 id="5-集合对象"><a href="#5-集合对象" class="headerlink" title="5. 集合对象"></a>5. 集合对象</h5><p>集合对象的编码是整数集合和哈希表。</p><p>当集合中的每个元素都是数字并且元素个数不超过512时使用整数集合。</p><h5 id="6-有序集合对象"><a href="#6-有序集合对象" class="headerlink" title="6. 有序集合对象"></a>6. 有序集合对象</h5><p>有序集合的编码是跳跃表和压缩列表</p><p>跳表编码的有序集合使用zset作为结构作为底层实现，zset结构同时包含一个字典和一个跳跃表。字典和跳跃表都保存了对象和分数。其中字典的key保存对象，value保存分数，用来实现查找某个对象的分数。跳跃表方便实现范围操作。</p><p>当有序集合保存的元素数量小于128个并且元素的长度都小于64字节时使用压缩列表实现。</p><h5 id="7-类型检查与多态命令"><a href="#7-类型检查与多态命令" class="headerlink" title="7. 类型检查与多态命令"></a>7. 类型检查与多态命令</h5><p>当向服务器发送一个对key进行操作的命令，首先回去检查这个key所对应redisObject对象的类型，然后判断该操作是不是可以用在这种类型的值，如果不能则返回错误给客户端，否则会根据redisObject的编码去决定调用底层数据结构的方法去执行。</p><h5 id="8-内存回收"><a href="#8-内存回收" class="headerlink" title="8. 内存回收"></a>8. 内存回收</h5><p>当创建一个对象时引用计数值会被初始化为1，当这个对象被其他引用指向时，它的引用计数值会增加1，当对象不被其他引用指向时，引用计数会减1。当对象的引用计数值为0时，对象所占用的内存会被释放。</p><h5 id="9-对象共享"><a href="#9-对象共享" class="headerlink" title="9.对象共享"></a>9.对象共享</h5><p>通过引用计数值，可以实现对象的共享，但是只有整数对象才能被共享，因为判断两个整数是否相等的时间复杂度为常数时间。对于0到9999的共享，执行<code>object refcount key</code>指令会返回<code>2147483647</code>。</p><h5 id="10-对象的空转时长"><a href="#10-对象的空转时长" class="headerlink" title="10. 对象的空转时长"></a>10. 对象的空转时长</h5><p>对象的空转时长是指当前对象有多久没有被访问过，某些内存回收策略会使得空转时长更长的元素淘汰，使用<code>object idletime key</code>查询空转时长。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发总结</title>
      <link href="/2020/02/09/java%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/09/java%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="1-并发编程基础"><a href="#1-并发编程基础" class="headerlink" title="1. 并发编程基础"></a>1. 并发编程基础</h5><ul><li><p>为什么要使用并发编程</p><p>硬件发展初期，CPU的性能遵循摩尔定律，但是后来摩尔定律失效了，单核CPU的性能很难继续提高，于是计算机CPU向多核方向发展，使用<strong>并发编程可以提高CPU的使用效率</strong>。另外，对于某些应用，使用<strong>并发编程可以提高运行的效率</strong>，比如一些并发计算框架。还有就是<strong>并发编程方便业务的拆分</strong>，比如java虚拟机的实现就有多条线程，每条线程负责不同的功能，如gc线程，final线程等。</p></li><li><p>并发编程的缺点</p><ol><li>线程上下文切换导致程序的效率降低</li><li>可能会带来线程安全性问题，如死锁</li></ol></li><li><p>一些易混淆的概念</p><ul><li><p>同步与异步</p><p>同步是指方法调用后，需要等到方法返回才能执行后面的代码，异步是方法调用后不用关心结果，可以直接执行后续代码，当被调用的方法完成后会通知调用者。</p></li><li><p>并行与并发</p><p>并行是在一个时间点上多个线程可以同时运行，需要硬件的支持。并发是在一段时间内，线程通过交替运行，看上去同时运行。</p></li></ul></li><li><p>临界区</p><p>如果一个资源只能同时被一个线程访问，那么这个资源就称临界资源，访问临界资源的代码称为临界区。</p></li></ul><hr><h5 id="2-java内存模型"><a href="#2-java内存模型" class="headerlink" title="2. java内存模型"></a>2. java内存模型</h5><hr><h5 id="3-并发关键字"><a href="#3-并发关键字" class="headerlink" title="3. 并发关键字"></a>3. 并发关键字</h5><ul><li><p><strong>synchronized关键字</strong></p><ul><li><p><strong>synchronized如何使用，锁住的是什么</strong></p><ul><li><p>synchronized可以修饰方法</p><ol><li>当修饰静态方法时，锁住的是这个类对应Class对象</li><li>当修饰的是实例方法时，锁住的是当前这个方法所在的实例对象</li></ol></li><li><p>synchronized可以修饰代码块</p><ol><li>同步代码块中写的是什么对象，锁的就是哪个对象</li></ol></li></ul></li><li><p><strong>synchronized的可重入性</strong></p><p>获得同步锁的线程再次获得该锁，不需要释放，可以直接获取，释放时，只有释放多次才能真正释放</p></li><li><p><strong>synchronized的实现原理</strong></p><p>添加同步代码块的代码字节码中会在进入同步代码块的位置添加一个叫做<code>monitorenter</code>的指令，在退出同步代码块或者发生异常的位置添加指令<code>monitorexit</code>。每一个对象都对应一个<code>monitor</code>对象监视器，执行<code>monitorenter</code>的线程会去尝试获取对象监视器，这个获取的过程是互斥的，也就是说只有一个线程可以获取得到，获取到的线程可以继续进行，没有获取到的线程视synchronized锁状态而定，如果是重量级锁，线程会加入同步队列中处于阻塞状态。当执行<code>monitorexit</code>指令时，会释放对象监视器，并通知同步队列中的线程出队尝试获取对象同步器。</p></li><li><p><strong>synchronized的happen-before规则</strong></p><p>对同一个监视器的解锁happen-before对该监视器的加锁</p></li><li><p><strong>synchronized的内存语义</strong></p><p>获取锁的后会去主内存中读取数据，释放锁后会将工作内存的数据刷新到主内存中。</p></li><li><p><strong>java对象头与锁的状态</strong></p><p>java对象头的markworld部分记录了锁的状态，一共有四种状态，分别是：</p><ul><li>无锁状态</li><li>偏向锁状态、</li><li>轻量级锁状态</li><li>重量级锁状态</li></ul><p>锁可以升级但是不能降级</p></li><li><p><strong>synchronized优化</strong></p><ul><li><p><strong>CAS</strong></p><ul><li><p><strong>什么是CAS</strong></p><p>CAS是一种乐观策略，乐观策略假设线程访问共享资源不会存在冲突，既然不会发生冲突就不需要加锁解锁。CAS的大致过程是这样的，有三个参数，内存中的实际值，预期的值和新值，当执行CAS操作时，先会判断预期的值与实际的值是否相等，如果相等证明没有别的线程在访问，然后赋上新值，如果失败，通常会进行自旋尝试。</p></li><li><p><strong>CAS的优点</strong></p><p>不加锁响应速度快。</p></li><li><p><strong>CAS的缺点</strong></p><ul><li><p>ABA问题</p><p>添加版本号，jdk提供了<code>AtomicStampedReference</code></p></li><li><p>自旋时间太长，浪费CPU</p></li><li><p>只能保证一个共享变量的原子操作</p><p>解决方案是利用对象整合多个共享变量，即一个类中的成员变量就是这几个共享变量。然后将这个对象做CAS操作就可以保证其原子性。atomic中提供了<code>AtomicReference</code>来保证引用对象之间的原子性。</p></li></ul></li></ul></li><li><p><strong>自旋锁</strong></p><ul><li><p><strong>自旋锁的获取</strong></p><p>当一个线程获取锁的时候，会在对象头中记录偏向的线程id，以后在该线程获取锁的时候不需要重新获取锁，只需要简单从测试一下对象头的markworld中记录的偏向的线程id是否为当前线程，如果是则获取锁成功，如果获取锁失败，会判断对象头的偏向锁是否开启，如果未开启则去竞争锁，则尝试使用CAS将对象头的偏向锁指向当前线程。</p></li><li><p><strong>自旋锁的撤销</strong></p><p>偏向锁使用了一种<strong>等到竞争出现才释放锁</strong>的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。首先会等到现在运行到一个全局的安全点，然后暂停偏向锁偏向的线程并判断该线程是否存活，如果不存活，则将对象头设置为无锁状态。否则偏向其他线程或者恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程。</p></li></ul></li><li><p><strong>轻量级锁</strong></p><ul><li><p><strong>轻量级锁的获取</strong></p><p>在执行同步代码块之前，JVM会在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为<strong>Displaced Mark Word</strong>。然后尝试使用CAS将对象头修改为指向锁记录的指针，如果成功则获取到了轻量级锁，否则当前线程会进行自旋来获取锁。</p></li><li><p><strong>轻量级锁的释放</strong></p><p>轻量级锁释放时会通过CAS将<strong>Displaced Mark Word</strong>的值赋给对象头，如果成功，则说明没有竞争，否则会将锁膨胀成重量级锁。</p></li></ul></li><li><p><strong>重量级锁</strong></p><p>获取重量级锁失败会进入阻塞状态。</p></li></ul></li><li><p>不同锁的优缺点对比</p><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>获取锁的开销小</td><td>如果线程间存在竞争，偏向锁的撤销会带来额外的开销</td><td>适用于只有一个线程访问同步代码块的场景</td></tr><tr><td>轻量级锁</td><td>线程不会阻塞，提高了线程的响应速度</td><td>自旋会消耗CPU</td><td>追求响应速度，同步代码块执行时间短，自旋时间短</td></tr><tr><td>重量级锁</td><td>线程竞争不会自旋，不消耗CPU</td><td>线程阻塞，响应时间变慢</td><td>追求吞吐量，同步块执行时间长</td></tr></tbody></table></li></ul></li><li><p><strong>volatitle关键字</strong></p><ul><li><p><strong>volatitle的作用</strong></p><ul><li>保证可见性</li><li>禁止指令重排序</li><li>不保证原子性</li></ul></li><li><p><strong>volatitle的原理</strong></p><p>在生成汇编代码时会在volatile修饰的共享变量进行写操作的时候会多出<strong>Lock前缀的指令</strong>，Lock前缀指令会将当前处理器缓存行的数据写回到主存中，由于缓存一致性原理，<strong>每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期</strong>了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行读操作的时候，会重新从系统内存中把数据读到处理器缓存里。</p></li><li><p><strong>volatitle的happen-before规则</strong></p><p>对volatitle变量的写happen-before与对volatitle变量的读</p></li><li><p><strong>volatitle的内存语义</strong></p><p>当volatile变量写后，线程中本地内存中共享变量就会置为失效的状态，因此线程B再需要读取从主内存中去读取该变量的最新值。</p></li><li><p><strong>volatitle的内存语义的实现（禁止指令重排序的实现）</strong></p><p>通过添加内存屏障实现禁止处理器和编译器进行重排序。</p><ul><li><p><strong>内存屏障有哪些</strong></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/java%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/image-20200209171142.png" alt=""></p></li><li><p><strong>volatitle禁止指令重排的规则</strong></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/java%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/image-20200209171552.png" alt=""></p></li><li><p><strong>volatitle是如何添加内存屏障的</strong></p><ol><li><p>在每个volatile写操作的<strong>前面</strong>插入一个StoreStore屏障；</p><p>禁止上面的普通写和下面的volatile写重排序；</p></li><li><p>在每个volatile写操作的<strong>后面</strong>插入一个StoreLoad屏障；</p><p>防止上面的volatile写与下面可能有的volatile读/写重排序</p></li><li><p>在每个volatile读操作的<strong>后面</strong>插入一个LoadLoad屏障；</p><p>禁止下面所有的普通读操作和上面的volatile读重排序</p></li><li><p>在每个volatile读操作的<strong>后面</strong>插入一个LoadStore屏障。</p><p>禁止下面所有的普通写操作和上面的volatile读重排序</p></li></ol></li></ul></li></ul></li><li><p><strong>final关键字</strong></p><ul><li><p><strong>fnal的作用</strong></p><ol><li><p>被final修饰的变量，如果是基本数据类型，值不能改变，如果是引用数据类型引用不能改变</p></li><li><p>被final修饰的方法不能被重写</p></li><li><p>被final修饰的类不能被继承</p></li></ol></li><li><p><strong>final域的初始化</strong></p><ol><li><p>实例final域：直接初始化，代码块，构造方法</p></li><li><p>静态final域：直接初始化，静态代码块</p></li><li><p>其他：直接初始化</p></li></ol></li><li><p><strong>final域重排序规则</strong></p><p><strong>如果final域是基本数据类型</strong></p><ol><li>对final域的初始化不能重排序到构造方法之外</li><li>对final域所在对象的引用的读不能重排序到对final域对象的读之后</li></ol><p><strong>如果final域是引用数据类型</strong></p><ol><li>禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序</li></ol></li><li><p><strong>final重排序的实现原理</strong></p><p>写final域会要求编译器在final域写之后，构造函数返回前插入一个StoreStore屏障。读final域的重排序规则会要求编译器在读final域的操作前插入一个LoadLoad屏障。</p></li></ul></li></ul><hr><h5 id="4-Lock体系"><a href="#4-Lock体系" class="headerlink" title="4. Lock体系"></a>4. Lock体系</h5><ul><li><p><strong>AQS</strong></p><p>AQS的全称是抽象队列同步器，是java并发包中的一个抽象类，是实现锁和其他同步类的基础框架，AQS的内部维护了一个int型的变量表示同步状态，并提供了一些方法用来原子的修改或获取同步状态，还使用一个双向链表实现的队列用来管理线程。AQS的设计使用了模板方法设计模式，它将一些方法开放给子类进行重写，而同步器给同步组件所提供模板方法又会重新调用被子类所重写的方法。同步器是面向锁的实现者，它简化了锁的实现方式，屏蔽了同步状态的管理，线程的排队，等待和唤醒等底层操作。AQS推荐在实现同步器的时候使用一个内部类继承AQS并通过模板方法实现同步组件语义。</p><p><strong>同步队列</strong></p><p>AQS使用同步队列来管理线程，AQS中有一个内部类Node，表示队列的一个节点，这个类包含所代表的的线程，节点状态，前驱节点和后继结点。AQS的同步队列是通过双向链表实现的，并使用头尾指针进行管理。当一个线程获取锁失败，就会进入同步队列，如果同步队列中的线程获取锁成功，则会进行出队操作。</p><p><strong>独占锁</strong></p><ul><li><p>独占锁的获取</p><p>获取同步状态成功则直接返回，失败则通过CAS算法实现入队操作。位于同步队列的线程会去不断的尝试获取同步状态，具体的规则是</p><ol><li><strong>如果当前节点的前驱节点是头节点，并且能够获得同步状态的话，当前线程能够获得锁该方法执行结束退出</strong>；</li><li><strong>获取锁失败的话，先将节点状态设置成SIGNAL，然后调用LookSupport.park方法使得当前线程阻塞</strong>。</li></ol></li><li><p>独占锁的释放</p><p>每一次锁释放后就会唤醒队列中该节点的后继节点所引用的线程，从而进一步可以佐证获得锁的过程是一个FIFO（先进先出）的过程</p></li><li><p>总结</p><p>在获取同步状态时，AQS维护一个同步队列，获取同步状态失败的线程会加入到队列中进行自旋；移除队列的条件是前驱节点是头结点并且成功获得了同步状态。在释放同步状态时，同步器会调用unparkSuccessor()方法唤醒所有的后继节点。</p></li></ul><p><strong>共享锁</strong></p><p>​    共享锁的获取和释放与独占锁类似，不同点在于判断同步状态时，state的值大于0则表示获取到了。</p></li><li><p><strong>ReentrantLock</strong></p><p><strong>重入锁的实现原理</strong></p><p>在获取锁状态的时候如果该锁未被任何线程占有，则该锁能够被当前线程获取，如果被占有会检查占有线程是不是当前线程，如果是的话，会使得状态加1。</p><p>在释放锁的时候，会将同步状态减1，只有同步状态为0，锁才释放成功。</p><p><strong>公平锁与非公平锁的实现原理</strong></p><p>公平锁的实现：当线程会判断同步队列中有前驱节点，如果有前驱节点说明有线程比当前线程更早的请求资源，根据公平性，当前线程请求资源失败。如果当前节点没有前驱节点的话，再才有做后面的逻辑判断的必要性。</p><p>非公平性锁的实现原理：不用去判断是否有前驱节点。</p></li><li><p><strong>ReentreanReadWriteLock</strong></p><p><strong>写锁的获取</strong></p><p>首先获取同步状态，同步状态是一个int型的整数。写锁的次数用低16位表示，使用二进制掩码计算获得。如果读锁以被获取或者当前线程不是已经获取写锁的线程，则当前获取失败，否则更新写锁的次数，获取锁成功。</p><p>当读锁已经被读线程获取或者写锁已经被其他写线程获取，则写锁获取失败；否则，获取成功并支持重入，增加写状态。</p><p><strong>写锁的释放</strong></p><p>写锁次数减去1，如果写状态为0.则释放写锁，否则不更新同步状态。</p><p><strong>读锁的获取</strong></p><p>判断当前写锁释放被其他线程获取，如果是则获取读锁失败，否则获取成功，同步状态的高16位表示读锁获取次数，更新相关状态即可。</p><p><strong>读锁的释放</strong></p><p> 读锁释放 将同步状态减去读状态即可</p><p><strong>锁降级</strong></p><p>遵循按照获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁</p></li><li><p><strong>Condition</strong></p><p><strong>使用Condition实现的等待/通知机制与wait和notify实现的区别</strong></p><ol><li>Condition能够支持不响应中断，而通过使用Object方式不支持；</li><li>Condition能够支持多个等待队列（new 多个Condition对象），而Object方式只能支持一个；</li><li>Condition能够支持超时时间的设置，而Object不支持</li></ol><p><strong>等待队列</strong></p><p>创建一个condition对象是通过<code>lock.newCondition()</code>,而这个方法实际上是会new出一个ConditionObject对象，该类是AQS的一个内部类，内部维护了一个 <strong>等待队列</strong>，所有调用condition.await方法的线程会加入到等待队列中，并且线程状态转换为等待状态，<strong>等待队列是一个单向队列</strong>。</p><ul><li><p><strong>await实现原理</strong></p><p>首先检测当前线程是否获取了同步状态，如果没有就抛出异常。</p><p>释放当前线程所占用的lock，在释放的过程中会唤醒同步队列中的下一个节点</p><p>调用LockSuport.park方法使得当前线程进入到等待状态</p><p>线程被唤醒的条件有两个，第一个是由其他线程调用signal和signalAll方法唤醒，第二个是被中断</p><p>被唤醒的线程会自旋等待获取到同步状态（即获取到lock）</p></li><li><p><strong>signal实现原理</strong></p><p>先检测当前线程是否已经获取lock</p><p>将等待队列的头结点从等待队列中移除</p><p>将该节点移入到同步队列中去</p></li><li><p><strong>signalAll实现原理</strong></p><p>将等待队列中的每一个节点都移入到同步队列中，即“通知”当前调用condition.await()方法的每一个线程</p></li></ul></li><li><p><strong>LockSupport</strong></p><p>LockSupprot是线程的阻塞原语，用来阻塞线程和唤醒线程。每个使用LockSupport的线程都会与一个许可关联，如果该许可可用，并且可在线程中使用，则调用park()将会立即返回，否则可能阻塞。如果许可尚不可用，则可以调用 unpark 使其可用。但是注意许可<strong>不可重入</strong>，也就是说只能调用一次park()方法，否则会一直阻塞。内部使用Unsafe类实现的。</p></li></ul><hr><h5 id="5-并发容器"><a href="#5-并发容器" class="headerlink" title="5. 并发容器"></a>5. 并发容器</h5><ul><li><p><strong>ConcurrentHashMap</strong></p></li><li><p><strong>CopyOnWriteArrayList</strong></p><p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p><p>读的时候不需要加锁，写的时候先加锁，然后复制一份容器，添加元素后把他赋给新的引用。CopyOnWrite容器适合读多写少的应用，缺点是：</p><ul><li><p><strong>内存占用问题</strong></p><p>因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。</p></li><li><p><strong>数据一致性问题</strong></p><p>CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p></li></ul></li><li><p><strong>ConcurrentLinkedQueue</strong></p></li><li><p><strong>ThreadLocal</strong></p><p><strong>ThreadLocal是什么</strong></p><p>ThreadLocal表示线程的“本地变量”，即每个线程都拥有该变量副本，这样就可以避免共享资源的竞争。</p><p><strong>ThreadLocal的实现原理</strong></p><ul><li><p><strong>ThreadLocalMap</strong></p><p>ThreadLocalMap是ThreadLocal的内部类，是一个键值对，每个Thread都持有一个ThreadLocalMap，ThreadLoca持有的副本就存放在ThreadLocaMap中。</p><p>ThreadLocalMap使用开放定址法解决冲突问题，即如果冲突了就找下一个位置。</p><p>ThreadLocalMap的Entry的key是弱引用，value是强引用，可能造成内存泄漏问题。</p></li><li><p><strong>set方法</strong></p><p>首先会获取当前线程，并从当前Thread中获取ThreadLocalMap是否为null，如果不为null则可以创建一个，否则会将当前ThreadLocal类作为key，value作为值，放入map中。</p></li><li><p><strong>get方法</strong></p><p>获取当前线程锁对应的ThreadLocalMap，如果ThreadLocalMap不为null，则从这个map中进行查找。</p></li></ul><p><strong>为什么要使用弱引用</strong></p><p>ThreadLocal存在两个引用，一个是在业务中使用的强引用，一个是在ThreadLocalMap中的Entry中保存的弱引用，如果Entry中不使用弱引用而是使用强引用，当业务中的ThreadLocal为null或者不访问时ThreadLocal变量会因为Map中保存了Entry中存在该引用导致对象不能使用，也不能释放，从而造成内存泄漏问题。使用弱引用虽然没有办法完全解决内存泄漏的问题，但是他带来了两个好处，一是虽然value不能释放，但是ThreadLocal可以释放，另外因为ThreadLocal是弱引用，所以下一次GC时会被释放，从而导致Entry中的key为null，这样的Entry为脏Entry，只要检查是否存在一个Entry引用不为null，但是key为null，就可以判断一个Entry是否为脏Entry，这样就方便进行清除工作。</p><p><strong>如何解决内存泄漏问题</strong></p><ul><li><p>进行set操作时：</p><ol><li>如果当前table[i]！=null的话说明hash冲突就需要向后环形查找，若在查找过程中遇到脏entry就通过<code>replaceStaleEntry</code>进行处理；</li><li>如果当前table[i]==null的话说明新的entry可以直接插入，但是插入后会调用<code>cleanSomeSlots</code>方法检测并清除脏entry</li></ol></li><li><p>cleanSomeSlots:</p><p>cleanSomeSlots的功能是循环向后扫描脏Entry，从i位置的下一个位置开始，循环次数为log2(n)次，如果扫描到了一个脏Entry，i会重新设置，n的值会设置成数组的长度，也就是扫描的范围会变大</p><pre><code class="java">private boolean cleanSomeSlots(int i, int n) {    boolean removed = false;    Entry[] tab = table;    int len = tab.length;    do {        i = nextIndex(i, len);        Entry e = tab[i];        if (e != null &amp;&amp; e.get() == null) {            n = len;            removed = true;            i = expungeStaleEntry(i);        }    } while ( (n &gt;&gt;&gt;= 1) != 0);    return removed;}</code></pre></li><li><p>expungeStaleEntry</p><p>遇到了脏Entry会调用该方法进行清除，该方法首先会清理当前脏entry，即将其value引用置为null，并且将table[staleSlot]也置为null。然后还会继续向后扫描如果发现了脏Entry也会清除，直到遇到某个Entry为null。</p></li><li><p>replaceStaleEntry</p><pre><code class="java"> private void replaceStaleEntry(ThreadLocal&lt;?&gt; key, Object value,                                       int staleSlot) {            Entry[] tab = table;            int len = tab.length;            Entry e;     ////向前找到第一个脏entry            int slotToExpunge = staleSlot;            for (int i = prevIndex(staleSlot, len);                 (e = tab[i]) != null;                 i = prevIndex(i, len))                if (e.get() == null)                    slotToExpunge = i;            for (int i = nextIndex(staleSlot, len);                 (e = tab[i]) != null;                 i = nextIndex(i, len)) {                ThreadLocal&lt;?&gt; k = e.get();                if (k == key) {                    e.value = value;                    tab[i] = tab[staleSlot];                    tab[staleSlot] = e;                    if (slotToExpunge == staleSlot)                        slotToExpunge = i;                    cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);                    return;                }                if (k == null &amp;&amp; slotToExpunge == staleSlot)                    slotToExpunge = i;            }            tab[staleSlot].value = null;            tab[staleSlot] = new Entry(key, value);            if (slotToExpunge != staleSlot)                cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);        }</code></pre></li></ul></li><li><p><strong>BlockingQueue</strong></p><p>BlockingQueue 提供了可阻塞的插入和移除的方法。当队列容器已满，生产者线程会被阻塞，直到队列未满；当队列容器为空时，消费者线程会被阻塞，直至队列非空时为止。</p><p><strong>常用的阻塞队列</strong></p><ul><li><p>ArrayBlockingQueue</p><p>由数组实现的有界阻塞队列，一旦创建，容量不能改变，默认非公平的</p></li><li><p>LinkedBlockingQueue</p><p>用链表实现的有界阻塞队列，通常在创建 LinkedBlockingQueue 对象时，会指定其大小，如果未指定，容量等于 Integer.MAX_VALUE</p></li><li><p>PriorityBlockingQueue</p><p>支持优先级的无界阻塞队列</p></li><li><p>SynchronousQueue</p><p>每个插入操作必须等待另一个线程进行相应的删除操作</p></li><li><p>LinkedBlockingDeque</p><p>基于链表数据结构的有界阻塞双端队列，如果在创建对象时为指定大小时，其默认大小为 Integer.MAX_VALUE</p></li></ul></li><li><p><strong>ArrayBlockingQueue、LinkedBlockingQueue</strong></p><p><strong>ArrayBlockingQueue</strong></p><p>内部使用一把ReentreanLock和两个Condition实现</p><ul><li><p>put方法的实现</p><p>先检查队列是否已满，如果当前队列已满，将线程移入到notFull等待队列中。否则直接进行入队操作，然后调用noEmpty的signal方法通知消费者线程，当前队列中有数据可供消费。</p></li><li><p>take方法的实现</p><p>如果队列为空，没有数据，将消费者线程移入等待队列中，否则获取数据并调用noFull的signal方法通知生产者线程，当前队列没有满可以继续生产数据。</p></li></ul><p><strong>LinkedBlockingQueue</strong></p><p>LinkedBlockingQueue 在插入数据和删除数据时分别是由两个不同的 lock（<code>takeLock</code>和<code>putLock</code>）来控制线程安全的，因此，也由这两个 lock 生成了两个对应的 condition（<code>notEmpty</code>和<code>notFull</code>）来实现可阻塞的插入和删除数据。并且，采用了链表的数据结构来实现队列</p><ul><li><p>put方法的实现</p><p>如果队列已满，则阻塞当前线程，将其移入等待队列，否则进行入队操作，插入数据，若队列满足插入数据的条件，则通知被阻塞的生产者线程</p></li><li><p>take方法的实现</p><p>当前队列为空，则阻塞当前线程，将其移入到等待队列中，直至满足条件，否则移除队头元素，获取数据。如果当前满足移除元素的条件，则通知被阻塞的消费者线程</p></li></ul><p><strong>对比</strong></p><ul><li><p>相同点</p><ol><li>ArrayBlockingQueue 和 LinkedBlockingQueue 都是通过 condition 通知机制来实现可阻塞式插入和删除元素，并满足线程安全的特性；</li></ol></li><li><p>不同点</p><ol><li><p>ArrayBlockingQueue 底层是采用的数组进行实现，而 LinkedBlockingQueue 则是采用链表数据结 构；</p></li><li><p>ArrayBlockingQueue 插入和删除数据，只采用了一个 lock，而 LinkedBlockingQueue 则是在插入和删除分别采用了<code>putLock</code>和<code>takeLock</code>，这样可以降低线程由于线程无法获取到 lock 而进入 WAITING 状态的可能性，从而提高了线程并发执行的效率。</p></li></ol></li></ul></li></ul><hr><h5 id="6-线程池"><a href="#6-线程池" class="headerlink" title="6. 线程池"></a>6. 线程池</h5><p><strong>为什么要使用线程池</strong></p><ol><li><strong>降低资源消耗</strong>。通过复用已存在的线程和降低线程关闭的次数来尽可能降低系统性能损耗；</li><li><strong>提升系统响应速度</strong>。通过复用线程，省去创建线程的过程，因此整体上提升了系统的响应速度；</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，</li></ol><p><strong>工作原理</strong></p><ul><li><p>先判断线程池中<strong>核心线程池</strong>所有的线程是否都在执行任务。如果不是，则新创建一个线程执行刚提交的任务，否则，核心线程池中所有的线程都在执行任务，则进入第 2 步；</p></li><li><p>判断当前<strong>阻塞队列</strong>是否已满，如果未满，则将提交的任务放置在阻塞队列中；否则，则进入第 3 步；</p></li><li><p>判断<strong>线程池中所有的线程</strong>是否都在执行任务，如果没有，则创建一个新的线程来执行任务，否则，则交给饱和策略进行处理</p></li></ul><p><strong>饱和策略</strong></p><ul><li>AbortPolicy： 直接拒绝所提交的任务，并抛出<strong>RejectedExecutionException</strong>异常；</li><li>CallerRunsPolicy：只用调用者所在的线程来执行任务；</li><li>DiscardPolicy：不处理直接丢弃掉任务；</li><li>DiscardOldestPolicy：丢弃掉阻塞队列中存放时间最久的任务，执行当前任务</li></ul><p><strong>线程池的关闭</strong></p><p>关闭线程池，可以通过<code>shutdown</code>和<code>shutdownNow</code>这两个方法。它们的原理都是遍历线程池中所有的线程，然后依次中断线程。<code>shutdown</code>和<code>shutdownNow</code>还是有不一样的地方：</p><ol><li><code>shutdownNow</code>首先将线程池的状态设置为<strong>STOP</strong>,然后尝试<strong>停止所有的正在执行和未执行任务</strong>的线程，并返回等待执行任务的列表；</li><li><code>shutdown</code>只是将线程池的状态设置为<strong>SHUTDOWN</strong>状态，然后中断所有没有正在执行任务的线程</li></ol><p><strong>如何配置合理的参数</strong></p><p>要想合理的配置线程池，就必须首先分析任务特性，可以从以下几个角度来进行分析：</p><ol><li>任务的性质：CPU 密集型任务，IO 密集型任务和混合型任务。</li><li>任务的优先级：高，中和低。</li><li>任务的执行时间：长，中和短。</li><li>任务的依赖性：是否依赖其他系统资源，如数据库连接。</li></ol><hr><h5 id="7-并发工具"><a href="#7-并发工具" class="headerlink" title="7. 并发工具"></a>7. 并发工具</h5><ul><li><p><strong>CountDownLatch与CyclicBarrier对比</strong></p><ol><li>CountDownLatch 一般用于某个线程 A 等待若干个其他线程执行完任务之后，它才执行；而 CyclicBarrier 一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；CountDownLatch 强调一个线程等多个线程完成某件事情。CyclicBarrier 是多个线程互等，等大家都完成，再携手共进。</li><li>调用 CountDownLatch 的 countDown 方法后，当前线程并不会阻塞，会继续往下执行；而调用 CyclicBarrier 的 await 方法，会阻塞当前线程，直到 CyclicBarrier 指定的线程全部都到达了指定点的时候，才能继续往下执行；</li><li>CountDownLatch 方法比较少，操作比较简单，而 CyclicBarrier 提供的方法更多，比如能够通过 getNumberWaiting()，isBroken()这些方法获取当前多个线程的状态，<strong>并且 CyclicBarrier 的构造方法可以传入 barrierAction</strong>，指定当所有线程都到达时执行的业务功能；</li><li>CountDownLatch 是不能复用的，而 CyclicBarrier 是可以复用的</li></ol></li><li><p><strong>Semaphore</strong></p><p>Semaphore 可以理解为<strong>信号量</strong>，用于控制资源能够被并发访问的线程数量，以保证多个线程能够合理的使用特定资源。Semaphore 就相当于一个许可证，线程需要先通过 acquire 方法获取该许可证，该线程才能继续往下执行，否则只能在该方法出阻塞等待。当执行完业务功能后，需要通过<code>release()</code>方法将许可证归还，以便其他线程能够获得许可证继续执行。</p><p>Semaphore 可以用于做流量控制，特别是公共资源有限的应用场景，比如数据库连接。假如有多个线程读取数据后，需要将数据保存在数据库中，而可用的最大数据库连接只有 10 个，这时候就需要使用 Semaphore 来控制能够并发访问到数据库连接资源的线程个数最多只有 10 个。在限制资源使用的应用场景下，Semaphore 是特别合适的。</p></li><li><p><strong>Exchanger</strong> </p><p>Exchanger 是一个用于线程间协作的工具类，用于两个线程间能够交换。它提供了一个交换的同步点，在这个同步点两个线程能够交换数据。具体交换数据是通过 exchange 方法来实现的，如果一个线程先执行 exchange 方法，那么它会同步等待另一个线程也执行 exchange 方法，这个时候两个线程就都达到了同步点，两个线程就可以交换数据。</p></li></ul><hr><h5 id="8-生产者消费者模型"><a href="#8-生产者消费者模型" class="headerlink" title="8. 生产者消费者模型"></a>8. 生产者消费者模型</h5><ul><li><p><strong>wait/notify实现</strong></p><pre><code class="java">public class Demo01 {    public static void main(String[] args) {        Queue&lt;Integer&gt; queue=new LinkedList&lt;&gt;();        ExecutorService executorService = Executors.newFixedThreadPool(10);        for (int i=0;i&lt;5;i++){            executorService.submit(new Producer(queue,10));            executorService.submit(new Consumer(queue));        }    }    private static class Producer implements Runnable{        private Queue&lt;Integer&gt; queue;        private Integer maxSize;        public Producer(Queue&lt;Integer&gt; queue,int maxSize){            this.queue=queue;            this.maxSize=maxSize;        }        private boolean isFull(){            return queue.size()==maxSize;        }        @Override        public void run() {            while (true){                synchronized (queue){                    while (isFull()){                        try {                            queue.wait();                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                    int prodNum=new Random().nextInt();                    queue.add(prodNum);                    System.out.println(&quot;生产者生产:&quot;+prodNum);                    queue.notifyAll();                }            }        }    }    private static class Consumer implements Runnable{        private Queue&lt;Integer&gt; queue;        public Consumer(Queue&lt;Integer&gt; queue){            this.queue=queue;        }        private boolean isEmpty(){            return queue.size()==0;        }        @Override        public void run() {            while (true){                synchronized (queue){                    while (isEmpty()){                        try {                            queue.wait();                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                    Integer poll = queue.poll();                    System.out.println(&quot;消费者消费:&quot;+poll);                    queue.notifyAll();                }            }        }    }}</code></pre></li><li><p><strong>condition实现</strong></p><pre><code class="java">public class Demo02 {    public static void main(String[] args) {        Queue&lt;Integer&gt; queue=new LinkedList&lt;&gt;();        Lock lock=new ReentrantLock();        Condition condition=lock.newCondition();        ExecutorService executorService = Executors.newFixedThreadPool(10);        for (int i=0;i&lt;10;i++){            executorService.submit(new Producer(queue,10,lock,condition));            executorService.submit(new Consumer(queue,lock,condition));        }    }    private static class Producer implements Runnable{        private Queue&lt;Integer&gt; queue;        private Condition condition;        private int maxSize;        private Lock lock;        Producer(Queue&lt;Integer&gt; queue, int maxSize,Lock lock,Condition condition){            this.queue=queue;            this.lock=lock;            this.condition=condition;            this.maxSize=maxSize;        }        private boolean isFull(){            return queue.size()==maxSize;        }        @Override        public void run() {            while (true){                try {                    lock.lock();                    while (isFull()){                        try {                            condition.await();                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                    int prodNum=new Random().nextInt();                    queue.add(prodNum);                    System.out.println(&quot;生产者生产数据:&quot;+prodNum);                    condition.signalAll();                }finally {                    lock.unlock();                }            }        }    }    private static class Consumer implements Runnable{        private Queue&lt;Integer&gt; queue;        private Condition condition;        private Lock lock;        Consumer(Queue&lt;Integer&gt; queue,Lock lock,Condition condition){            this.queue=queue;            this.lock=lock;            this.condition=condition;        }        private boolean isEmpty(){            return queue.size()==0;        }        @Override        public void run() {            while (true){                try {                    lock.lock();                    while (isEmpty()){                        try {                            condition.await();                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                    Integer poll = queue.poll();                    System.out.println(&quot;消费者消费:&quot;+poll);                    condition.signalAll();                }finally {                    lock.unlock();                }            }        }    }}</code></pre></li><li><p><strong>BlockingQueue实现</strong></p><pre><code class="java">public class Demo03 {    public static void main(String[] args) {        BlockingQueue&lt;Integer&gt; blockingQueue=new LinkedBlockingQueue&lt;&gt;(10);        ExecutorService executorService = Executors.newFixedThreadPool(10);        for (int i=0;i&lt;5;i++){            executorService.submit(new Producer(blockingQueue));            executorService.submit(new Consumer(blockingQueue));        }    }    private static class Producer implements Runnable{        private BlockingQueue&lt;Integer&gt; queue;        Producer(BlockingQueue&lt;Integer&gt; queue){            this.queue=queue;        }        @Override        public void run() {            while (true){                int i = new Random().nextInt();                try {                    queue.put(i);                    System.out.println(&quot;生产者生产:&quot;+i);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }    }    private static class Consumer implements Runnable{        private BlockingQueue&lt;Integer&gt; queue;        Consumer(BlockingQueue&lt;Integer&gt; queue){            this.queue=queue;        }        @Override        public void run() {            while (true){                Integer take = null;                try {                    take = queue.take();                    System.out.println(&quot;消费者消费:&quot;+take);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }    }}</code></pre></li></ul><hr><h5 id="9-其他问题"><a href="#9-其他问题" class="headerlink" title="9. 其他问题"></a>9. 其他问题</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java内存模型</title>
      <link href="/2020/02/06/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/02/06/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="1-Java内存模型的基础"><a href="#1-Java内存模型的基础" class="headerlink" title="1. Java内存模型的基础"></a>1. Java内存模型的基础</h5><p>在并发编程中，需要处理两个关键问题：线程之间如何通信及线程之间如何同步。</p><p>有两种方式实现：</p><ul><li><p>共享内存</p><p>线程之间共享程序的公共状态，通过写-读内存中的公共状态进行隐式通信</p></li><li><p>消息传递</p><p>线程之间必须通过发送消息来显式进行通信</p></li></ul><p>Java的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的Java程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</p><p><strong>JMM的抽象结构</strong></p><p>Java线程之间的通信由Java内存模型控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。</p><p>如果线程A与线程B之间要通信的话，必须要经历下面2个步骤：</p><ul><li>线程A把本地内存A中更新过的共享变量刷新到主内存中去</li><li>线程B到主内存中去读取线程A之前已更新过的共享变量</li></ul><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%BB%93%E6%9E%84.jpg" style="zoom:50%;" /><p><strong>重排序简介</strong></p><p>在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。</p><p>重排序分成三种类型：</p><ul><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句<br>的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li></ul><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/%E6%BA%90%E7%A0%81%E5%88%B0%E6%89%A7%E8%A1%8C%E5%BA%8F%E5%88%97.jpg" style="zoom:80%;" /><p><strong>happen-before简介</strong></p><p>happens-before的概念来阐述操作之间的内存可见性。在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系。</p><hr><h5 id="2-重排序"><a href="#2-重排序" class="headerlink" title="2. 重排序"></a>2. 重排序</h5><p>重排序是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段。</p><p><strong>数据依赖性</strong></p><p>如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。</p><p><strong>as-if-serial语义</strong></p><p>不管怎么重排序，（单线程）程序的执行结果不能被改变。</p><hr><h5 id="3-顺序一致性"><a href="#3-顺序一致性" class="headerlink" title="3. 顺序一致性"></a>3. 顺序一致性</h5><p>顺序一致性内存模型是一个理论参考模型，在设计的时候，处理器的内存模型和编程语言的内存模型都会以顺序一致性内存模型作为参照。</p><h5 id="4-volatitle的内存语义"><a href="#4-volatitle的内存语义" class="headerlink" title="4. volatitle的内存语义"></a>4. volatitle的内存语义</h5><h5 id="5-锁的内存语义"><a href="#5-锁的内存语义" class="headerlink" title="5. 锁的内存语义"></a>5. 锁的内存语义</h5><h5 id="6-final域的内存语义"><a href="#6-final域的内存语义" class="headerlink" title="6. final域的内存语义"></a>6. final域的内存语义</h5><h5 id="7-happen-before"><a href="#7-happen-before" class="headerlink" title="7. happen-before"></a>7. happen-before</h5><h5 id="8-双重检查锁的与延迟初始化"><a href="#8-双重检查锁的与延迟初始化" class="headerlink" title="8. 双重检查锁的与延迟初始化"></a>8. 双重检查锁的与延迟初始化</h5><h5 id="9-Java内存模型综述"><a href="#9-Java内存模型综述" class="headerlink" title="9. Java内存模型综述"></a>9. Java内存模型综述</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP抓包探究</title>
      <link href="/2020/02/01/TCP%E6%8A%93%E5%8C%85%E6%8E%A2%E7%A9%B6/"/>
      <url>/2020/02/01/TCP%E6%8A%93%E5%8C%85%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h5 id="1-连接超时问题"><a href="#1-连接超时问题" class="headerlink" title="1. 连接超时问题"></a>1. 连接超时问题</h5><p>首先使用<code>telnet</code>命令对一个不存在的ip或端口进行测试，同时使用抓包工具抓包。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E6%8A%93%E5%8C%85%E6%8E%A2%E7%A9%B6/image-20200201165627.png" alt=""></p><p>抓包数据</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E6%8A%93%E5%8C%85%E6%8E%A2%E7%A9%B6/image-20200201165935.png" alt=""></p><p>分析结果</p><p>可以看到时间的变化近似为1、2、4、8、16，即第一个报文发送后隔了1秒发送，然后隔了2秒发送，然后隔了4秒发送，最后隔了8秒发送。可以看出TCP连接建立超时后采用指数退避的方式重新发送连接请求报文。</p><h5 id="2-TCP的连接释放"><a href="#2-TCP的连接释放" class="headerlink" title="2. TCP的连接释放"></a>2. TCP的连接释放</h5><p>理论告诉我们TCP的连接释放需要经过三次握手和四次挥手，我们基于这个理论进行探究，看是否可以使用抓包工具抓到七个这样的报文。</p><p>三次握手：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E6%8A%93%E5%8C%85%E6%8E%A2%E7%A9%B6/image-20200201170702.png" alt=""></p><p>四次挥手：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E6%8A%93%E5%8C%85%E6%8E%A2%E7%A9%B6/image20200201170858.png" alt=""></p><p>其中第1,2,3,6这几个报文是四次挥手报文</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring探究之AOP</title>
      <link href="/2020/01/30/Spring%E6%8E%A2%E7%A9%B6%E4%B9%8BAOP/"/>
      <url>/2020/01/30/Spring%E6%8E%A2%E7%A9%B6%E4%B9%8BAOP/</url>
      
        <content type="html"><![CDATA[<h5 id="1-什么是AOP"><a href="#1-什么是AOP" class="headerlink" title="1. 什么是AOP"></a>1. 什么是AOP</h5><blockquote><p>Aspect-oriented Programming (AOP) complements Object-oriented Programming (OOP) by providing another way of thinking about program structure. The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. Aspects enable the modularization of concerns (such as transaction management) that cut across multiple types and objects. (Such concerns are often termed “crosscutting” concerns in AOP literature.)</p></blockquote><p>上面是Spring官网对AOP的解释，大致的意思是：面向方面编程通过提供另一种考虑程序结构的方式补充了面向对象编程。OOP中模块化的关键单元是类，而在AOP中模块化的单元是方面。方面支持跨多个类型和对象的关注点的模块化。</p><p>官方术语好像看不懂，接下来看下面这个例子：</p><pre><code class="java">@RestControllerpublic class MyTestController {    @GetMapping(&quot;/hello&quot;)    public String hello(){        try {            // 模拟方法执行的时间            System.out.println(&quot;方法执行...&quot;);            Thread.sleep((long) (Math.random()*2000));        } catch (InterruptedException e) {            e.printStackTrace();        }        return &quot;success&quot;;    }}</code></pre><p>上面的方法是一个很简单的Handler用来处理http请求，现在的要求是用日志打印出这个handler处理时间。很显然只需要在业务的前面和后面增加一个获取当前时间的代码，最后计算两个值的差，就像下面这个方法一样。</p><pre><code class="java">@RestControllerpublic class MyTestController {    @GetMapping(&quot;/hello&quot;)    public String hello(){        // 求开始时间        long starTime=System.currentTimeMillis();        try {            // 模拟方法执行的时间            System.out.println(&quot;方法执行...&quot;);            Thread.sleep((long) (Math.random()*2000));        } catch (InterruptedException e) {            e.printStackTrace();        }        // 求结束时间        long endTime=System.currentTimeMillis();        // 计算消耗的时间        System.out.println(&quot;all time:&quot;+(endTime-starTime)+&quot;ms&quot;);        return &quot;success&quot;;    }}</code></pre><p>但是一个web应用可能涉及到数十上百的handler，如果现在要求每个handler都要拥有打印运行时间的要求，如何实现呢？以OOP编程思想来看，只有在每一个类中都写重复的代码，显然这些冗余的代码会在后期维护时带来问题，比如有一天要求所有handler都不用打印运行时间，那就只能去每一个类里面找到这些代码逐行删除了。</p><p>其实上面的问题在于，有一些功能与业务无关，但是却需要应用到多个类中，如果使用传统的OOP思想，只能够在每个类的方法中都添加相同的代码，这些代码散落在各个类中，且与业务无关，难以维护。</p><p>那么看一下AOP是怎么解决这个问题的。</p><p> 本文使用的是Spring Boot，Spring Boot开启注解的方式很简单。首先添加starter</p><pre><code class="xml">  &lt;dependency&gt;          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;  &lt;/dependency&gt;</code></pre><p>然后只需要在Spring Boot的启动类中添加注解@EnableAspectProxy代理即可（不加注解也可以）</p><pre><code class="java">@Aspect@Componentpublic class RunTimeAspect {    @Pointcut(&quot;execution(* site.zeng.demo.springbootstudy.aoptest.controller.*.*(..))&quot;)    public void runTimePointCut(){}    @Around(&quot;runTimePointCut()&quot;)    public Object printRunTime(ProceedingJoinPoint joinPoint){        Object ret=null;        System.out.println(&quot;hello&quot;);        try {            long startTime=System.currentTimeMillis();            ret = joinPoint.proceed();            long endTime=System.currentTimeMillis();            System.out.println(&quot;all time:&quot;+(endTime-startTime)+&quot;ms&quot;);        } catch (Throwable throwable) {            throwable.printStackTrace();        }        return ret;    }}</code></pre><p>只需要实现上面这个类就可以统计所有的handler中方法的执行时间，并且也只需在这个类中进行修改就可以改变功能。</p><p>通过上面的例子我们大概可以总结一下AOP的思想：</p><p>AOP编程思想是对OOP编程思想的一种补充，解决了OOP难以解决的问题，在OOP编程中，模块化的单位是类，当需要实现业务功能时是依靠不同类的对象的方法采用从上至下的方式组合而成，比如一个普通的web应用程序，业务功能的实现是从controller层到service层再到dao层，这种良好的分层结构使得代码的耦合性降低，但是有一类与业务无关的方法可能会散落再每一层的各个类中，比如一个统计方法运行时间的代码，如果我们的需求是作用再每一个controller方法中，或者指定的某些方法中，那么我们就需要将重复的代码写多编，显然这样会带来几个问题，第一个是散落的代码难以维护，第二个是业务无关的代码与业务代码发生了耦合。而AOP就可以解决这样的问题，AOP关注的不是某一个类或者式某一个方法，而是关注的是一系列方法运行的某些点，比如方法调用前，方法调用后等等，这样就可以使用AOP在这些散落在各个类的关注点增加类方法的功能，其基本的做法是使用一些表达式来描述这些位置，然后使用方法对这些位置进行增强，这样的好处是，不在需要将与业务无关的代码与业务代码耦合再一起，第二是这些与业务无关的代码可以集中写在一个地方，而不需要把它重复写在各个类中，使得代码更加容易维护。</p><h5 id="2-AOP的基本使用"><a href="#2-AOP的基本使用" class="headerlink" title="2. AOP的基本使用"></a>2. AOP的基本使用</h5><p>使用AOP只需要掌握三个知识点：AOP的基本概念，表达式的规范，通知的类型。</p><p><strong>AOP的基本概念</strong></p><ul><li>Aspect</li><li>Join Point</li><li>Advice</li><li>Poincut</li><li>Introduction</li><li>Target Object</li><li>Aop proxt</li><li>Weaving</li></ul><p><strong>表达式规范</strong></p><p><strong>通知类型</strong></p><h5 id="3-AOP源码分析"><a href="#3-AOP源码分析" class="headerlink" title="3. AOP源码分析"></a>3. AOP源码分析</h5><p>总所周知，AOP的实现靠的时JDK的Proxy类和Cglib（真的是众所周知），那么我们来用代码验证一下全部过程。既然我们都知道Spring AOP会生成代理对象，那么一定会经历这样一个流程，在获取bean对象的某一步会先创建一个非代理类对象，然后调用某些方法生成代理对象，我们的目标就是找到这个调用点。</p><p>一个简单的Demo:</p><pre><code class="java">@SpringBootApplication@EnableAspectJAutoProxypublic class SpringBootAopApplication {    public static void main(String[] args) {        ConfigurableApplicationContext context = new SpringApplicationBuilder(SpringBootAopApplication.class)                .web(WebApplicationType.NONE).run(args);        // 通过beanName从容器中获取bean对象        DemoBean bean = (DemoBean) context.getBean(&quot;demoBean&quot;);        bean.test();    }}</code></pre><p>这里的DemoBean这个bean对象的作用域是prototype，这意味着获取bean不能从单例池中获取而是要重新创建。</p><p>进入<code>context.getBean(&quot;demoBean&quot;)</code>方法</p><pre><code class="java">//所属类：AbstractApplicationContextpublic Object getBean(String name) throws BeansException {    assertBeanFactoryActive();    return getBeanFactory().getBean(name);}</code></pre><p>继续进入<code>getBeanFactory().getBean(name)</code>方法</p><pre><code class="java">public Object getBean(String name) throws BeansException {    return doGetBean(name, null, null, false);}</code></pre><p>继续进入<code>doGetBean(name, null, null, false);</code>方法</p><pre><code class="java">protected &lt;T&gt; T doGetBean(final String name, @Nullable final Class&lt;T&gt; requiredType,            @Nullable final Object[] args, boolean typeCheckOnly) throws BeansException {        final String beanName = transformedBeanName(name);        Object bean;        // 从单例池中获取对象，如果存在就返回        Object sharedInstance = getSingleton(beanName);        if (sharedInstance != null &amp;&amp; args == null) {            // 省略日志代码            bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);        }        else {            // 当前正在创建这个bean，说明出现了循环引用并且无法解决，如何解决循环引用？            if (isPrototypeCurrentlyInCreation(beanName)) {                throw new BeanCurrentlyInCreationException(beanName);            }            // 检查bean所对应的定义BeanDefinition是否在容器中            BeanFactory parentBeanFactory = getParentBeanFactory();            if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) {                // 如果找不到就找其父容器，这部分代码省略            }            // 省略部分代码            try {                final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);                checkMergedBeanDefinition(mbd, beanName, args);                // 保证当前bean所依赖的bean初始化                String[] dependsOn = mbd.getDependsOn();                if (dependsOn != null) {                    // 这部分代码省略，与我们的目标无关                }                // 下面这个if选择语句时根据bean的类型去决定后面的操作，我们只考虑prototype类型的                if (mbd.isSingleton()) {                    // 这里省略处理的代码                }                else if (mbd.isPrototype()) {                    Object prototypeInstance = null;                    try {                           // 在创建bean之前进行某些操作 这里先不管                        beforePrototypeCreation(beanName);                        // 这里创建bean的实例，经过debug发现，返回值已经是代理对象                        prototypeInstance = createBean(beanName, mbd, args);// 下一步分析                    }                    // 省略                }                // 后面代码与目标无关，全部省略        }</code></pre><p>继续进入<code>createBean(beanName, mbd, args)</code>方法</p><pre><code class="java">    @Override    protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)            throws BeanCreationException {        if (logger.isTraceEnabled()) {            logger.trace(&quot;Creating instance of bean &#39;&quot; + beanName + &quot;&#39;&quot;);        }        RootBeanDefinition mbdToUse = mbd;        // 通过bean的名称获取class对象        Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);        if (resolvedClass != null &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != null) {            mbdToUse = new RootBeanDefinition(mbd);            mbdToUse.setBeanClass(resolvedClass);        }        //         try {            // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.            // 上面的官方注释的翻译是：给beanpostprocessor一个机会来返回代理而不是目标bean实例            // 到此我为止我们知道了产生代理的过程与beanpostprocessor有关            // 进入下一步，目标越来越清晰了,不信的是这个方法返回了null，所以需要继续分析            Object bean = resolveBeforeInstantiation(beanName, mbdToUse);            if (bean != null) {                return bean;            }        }        // 异常处理代码省略        try {            // 创建bean实例，由于后面直接返回了，所以需要进入这个方法            Object beanInstance = doCreateBean(beanName, mbdToUse, args);            // 日志代码省略            // 返回bean实例            return beanInstance;        }        // 后面代码全部省略    }</code></pre><p>继续进入<code>doCreateBean(beanName, mbdToUse, args)</code></p><pre><code class="java">    protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)            throws BeanCreationException {                // 前面代码全部省略        // Initialize the bean instance. 初始化bean实例，此时bean不是代理对象        // 而这个方法返回值确实exposedObject，所以肯定后面作了某些操作        Object exposedObject= bean;        try {            populateBean(beanName, mbd, instanceWrapper);            // debug发现这一步返回的是一个代理对象            exposedObject = initializeBean(beanName, exposedObject, mbd);// 下一步进入        }        // 后面代码省略        return exposedObject;    }</code></pre><p>继续进入<code>initializeBean(beanName, exposedObject, mbd)</code></p><pre><code class="java">    protected Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd) {        // 前面代码省略        if (mbd == null || !mbd.isSynthetic()) {            // 这一步返回了代理对象，继续深入            wrappedBean =                 applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);        }        return wrappedBean;    }</code></pre><p>接下来进入<code>applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)</code></p><pre><code class="java">@Override    public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)            throws BeansException {        Object result = existingBean;        for (BeanPostProcessor processor : getBeanPostProcessors()) {            Object current = processor.postProcessAfterInitialization(result, beanName);            if (current == null) {                return result;            }            result = current;        }        return result;    }</code></pre><p>首先代码没有手动添加任何<code>BeanPostProcessor</code>对象，那么我们看一下容器自身有哪些<code>BeanPostProcessor</code>，其中有一个一定与动态代理有关。</p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Spring%E5%8E%9F%E7%90%86/clipboard_20200225095722.png" style="zoom: 50%;" /><p>框出来的那个类看上去就和生成代理对象有关，debug发现确实与这个对象有关。</p><p>至此我们知道了生成代理对象与<code>AnnotationAwareAspectJAutoProxyCreator</code>的实例有关，接下来的分析过程很简单，只需要研究这个类即可。首先看一下类的继承关系。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Spring%E5%8E%9F%E7%90%86/AnnotationAwareAspectJAutoProxyCreator.png" alt=""></p><p>可以看到<code>AnnotationAwareAspectAutoProxyCreator</code>是<code>AbstractAutoProxyCreator</code>的子类，并且也是<code>BeanPostProcessor</code>的实现类。</p><p>只要探究一下<code>AnnotationAwareAspectAutoProxyCreator</code>的方法就可以知道如何生成代理的。</p><pre><code class="java">public Object postProcessAfterInitialization       (@Nullable Object bean, String beanName) {    if (bean != null) {        Object cacheKey = getCacheKey(bean.getClass(), beanName);        if (this.earlyProxyReferences.remove(cacheKey) != bean) {            // 返回代理对象            return wrapIfNecessary(bean, beanName, cacheKey);        }    }    return bean;}</code></pre><pre><code class="java">protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {        if (StringUtils.hasLength(beanName) &amp;&amp; this.targetSourcedBeans.contains(beanName)) {            return bean;        }        if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {            return bean;        }        if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {            this.advisedBeans.put(cacheKey, Boolean.FALSE);            return bean;        }        // Create proxy if we have advice.        Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);        if (specificInterceptors != DO_NOT_PROXY) {            this.advisedBeans.put(cacheKey, Boolean.TRUE);            // 生成代理对象的语句，下一步分析            Object proxy = createProxy(                    bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));            this.proxyTypes.put(cacheKey, proxy.getClass());            return proxy;        }        this.advisedBeans.put(cacheKey, Boolean.FALSE);        return bean;    }</code></pre><pre><code class="java">protected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName,            @Nullable Object[] specificInterceptors, TargetSource targetSource) {        // 前面代码省略        // 继续深入        return proxyFactory.getProxy(getProxyClassLoader());    }</code></pre><pre><code class="java">public Object getProxy(@Nullable ClassLoader classLoader) {        return createAopProxy().getProxy(classLoader);}</code></pre><pre><code class="java">protected final synchronized AopProxy createAopProxy() {        if (!this.active) {            activate();        }        return getAopProxyFactory().createAopProxy(this);}</code></pre><pre><code class="java">public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {        if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {            // 获取被代理的对象的Class对象            Class&lt;?&gt; targetClass = config.getTargetClass();            if (targetClass == null) {                // 抛出异常省略            }            if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {                // jdk代理对象                return new JdkDynamicAopProxy(config);            }            // cglib代理对象            return new ObjenesisCglibAopProxy(config);        }        else {            return new JdkDynamicAopProxy(config);        }    }</code></pre><p>到此为止大功告成，我们找到了如何生成AOP代理对象。</p><h5 id="4-AOP总结"><a href="#4-AOP总结" class="headerlink" title="4. AOP总结"></a>4. AOP总结</h5><p>Aop的实现与IoC容器有关，Ioc容器在实现的时候提供了<code>BeanPostProcessor</code>接口供用户实现，这个类的作用是在IoC容器创建bean实例之后提供一个机会给用户去改变这个bean，<code>BeanPostProcessor</code>有两个接口，一个是<code>postProcessBeforeInitialization</code>方法，另一个是<code>postProcessAfterInitialization</code>方法，前者在创建完bean实例之后，调用初始化方法之前调用，后再在初始化方法调用完之后再调用，这两个方法的参数都是传入一个bean，然后返回值也是一个bean，这样就可以在方法中对bean进行操作甚至是修改替换，然后返回。而Aop正是利用这个接口实现的，AOP实现了一个叫做AbstractAutoProxyCreator抽象类，这个抽象类的子类以不同的方式实现AOP，比如常见的使用注解那一套，就对应着子类<code>AnnotaionAwareAspectAutoProxyCreator</code>。AOP会根据bean实例的特点选择不同的方式生成动态代理，比如如果bean实现了接口接口，那么就使用JDK的Proxy类，否则会使用Cglib实现。</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux五种IO模型与Java三种IO模型</title>
      <link href="/2020/01/10/Linux%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B%E4%B8%8EJava%E4%B8%89%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/01/10/Linux%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B%E4%B8%8EJava%E4%B8%89%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="1-一次IO操作的分析"><a href="#1-一次IO操作的分析" class="headerlink" title="1. 一次IO操作的分析"></a>1. 一次IO操作的分析</h5><p>所谓的IO操作是指对除了寄存器和内存以外的设备进行读写请求，如文件、网络、键盘等，站在用户的角度来看就是调用一次IO系统调用。对于一次读操作具体过程如下：</p><ul><li>用户进程发起IO系统调用从用户态进入内核态完成上下文切换，内核中存在一个内核缓冲区，读或写时都是将数据从内核缓冲区拷贝到进程缓冲区中</li><li>内核不会直接使用CPU去操作数据，而是发送操作指令给DMA，DMA完成数据的读写后会通过总线发送一个系统中断给内核。</li><li>数据从外存拷贝到内核缓冲区后，再由内核将内核缓冲区中的数据拷贝到进程缓冲区中，之后切换到用户态，完成系统调用，这样用户进程就得到了数据</li></ul><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/io.png" alt=""></p><hr><h5 id="2-Linux的五种IO模型"><a href="#2-Linux的五种IO模型" class="headerlink" title="2. Linux的五种IO模型"></a>2. Linux的五种IO模型</h5><p>Linux有五种IO模型，分别是同步阻塞、同步非阻塞、IO多路复用、信号驱动、异步IO模型</p><p><strong>同步阻塞</strong></p><p>发出IO系统调用后，内核会通知DMA准备数据，这个过程有两个特点，第一是不占用CPU，第二是需要一定的时间，同步阻塞就是指发出IO系统调用后，用户进程会进入阻塞状态等待内核缓存区数据准备好后，直到数据从内核缓冲区复制到应用进程缓冲区中才返回</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/syn_block.png" alt=""></p><p><strong>同步非阻塞</strong></p><p>同步阻塞的问题在于只要内核没有准备好数据，那么就会进入阻塞状态而不同完成其他操作，同步非阻塞则是采用询问的方式<strong>不断的从用户态进入内核态询问数据</strong>是否准备好。其有点是不需要阻塞，但是缺点是需要多次系统调用询问。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/syn_nonblock.png" alt=""></p><p><strong>IO多路复用</strong></p><p>同步阻塞和同步非阻塞每次从用户态进入内核态都只能得到一次IO的情况，如果有多个IO操作，那么就需要使用多个线程才能同时完成。IO多路复用模型是在一个线程中处理多个IO请求的模型。如select/poll/epoll等函数就是IO多路复用函数。可以向IO多路复用函数中注册多个文件描述符，然后交给内核去监控每个文件描述符是否有对应的IO事件产生，如果有则从内核态回到用户态，然后用户态进程会找到有IO事件产生的文件描述符然后进行处理。</p><p><strong>信号驱动模型</strong></p><p>应用进程使用系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 信号，应用进程收到之后在信号处理程序中将数据从内核复制到应用进程中。相比于非阻塞式 I/O 的轮询方式，减少了轮询过程中系统调用的开销，信号驱动 I/O 的 CPU 利用率更高。</p><p><strong>异步IO模型</strong></p><p>应用进程执行系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是在内核数据拷贝到进程缓冲区后通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程内核数据准备好了。</p><hr><h5 id="3-IO多路复用"><a href="#3-IO多路复用" class="headerlink" title="3. IO多路复用"></a>3. IO多路复用</h5><p>linux中主要由三种io多路复用函数，分别是select，poll和epoll。按照时间顺序，select是出现的最早的IO多路复用函数，其次是poll，最后是epoll。同样后出现的性能要比先出现的好。</p><ul><li><p>select</p><p>select的函数原型有五个参数，第一个参数是最大的文件描述符加1，接下来三个参数都是fd_set类型，分别表示需要被监控的读、写和异常事件的文件描述符集合，最后一个参数是超时时间，超时时间有两个成员一个是代表超时时间为秒一个为微秒。fd_set的底层是一个长度为1024位的bitmap，每一位表示一个文件描述符的状态，所以select最多支持监控1024个文件描述符。每次调用select会把文件描述符集合拷贝到内核，然后遍历文件描述符集合为每一个文件描述符申请一个等待队列元素，然后将其添加到对应驱动程序的等待队列中，等待条件满足时唤醒。唤醒后再次遍历所有的文件描述符得到一个掩码，根据这个页码设置每一个文件描述符的状态，最后将结果拷贝到用户空间。用户进程等select函数返回后重新遍历所有的文件描述符，判断文件描述符是否在fd_set中，如果是则需要进行下一步操作。</p><p>select的缺点是只支持1024个文件描述符，另外select比较慢，优点是跨平台，简单。</p><p><strong>select慢的原因</strong></p><ul><li>第一次调用select，内核需要遍历所有的文件描述符并把进程挂在所监听的文件描述符一次</li><li>有事件到来时，不知道是哪些文件描述符有数据可以读写，需要把所有的文件描述符都轮询一遍才能知道</li><li>通知用户进程还需要把整个bitmap复制到用户空间，由用户进程再次遍历查询出可读写的文件描述符</li></ul></li><li><p>poll</p><p>poll与select的区别在于不使用bitmap来表示文件描述符，因此理论上poll监控的文件描述符是没有限制的。poll函数要求传入一个pollfd数组，数组元素包含三个成员，分别是文件描述符，需要监控的事件，实际发生的事件。系统调用会将该数组拷贝到内核空间，然后遍历每一个文件描述符对应的驱动程序的poll函数，申请一个等待队列元素，将其添加到驱动程序的等待队列中，然后睡眠，直到驱动程序将其唤醒，再遍历每一个文件描述符对应的驱动程序的poll函数，得到一个掩码，再将结果拷贝回用户空间。</p><p><strong>poll与select的区别</strong></p><ul><li>poll不限制监控的文件描述符数量</li><li>poll与select描述文件描述符的方式不同，select使用掩码的方式，更节约内存，poll使用数组</li></ul></li><li><p>epoll</p><p>epoll是select/poll的增强版，使用epoll时首先需要创建一个 eventpoll 对象，这个对象的底层使用红黑树实现，然后把需要监控的对象插入到 eventpoll对象中，然后用户进程调用 epoll_wait函数，这个函数会把当前进程添加到eventpoll对象的等待队列中。当被监控的对象有事件发生时，中断程序会将该对象的引用放到 eventpoll对象的就绪列表中，然后 eventpoll对象的等待队列中的进程会被唤醒，唤醒后就可以直接从就绪队列中拿到发生事件的对象所对应的文件描述符。</p><p><strong>为什么epoll高效</strong></p><ul><li>epoll不需要每次都把文件描述符集合从用户空间复制到内核空间</li><li>epoll不需要向select/poll那样主动的轮询每一个文件描述符，而是为文件描述符指定回调函数，当事件触发时会将对应的fd加入就绪队列然后唤醒等待的进程</li><li>epoll返回后用户进程可以从就绪列表中获取所有就绪的事件而不需要向select和poll那样重新遍历一遍</li></ul></li></ul><hr><h5 id="4-java中的三种IO模型"><a href="#4-java中的三种IO模型" class="headerlink" title="4. java中的三种IO模型"></a>4. java中的三种IO模型</h5><ul><li><p>BIO</p><p>BIO对应的是同步阻塞IO模型</p></li><li><p>NIO</p><p>NIO对应的是IO多路复用模型，Selector就是对底层IO多路复用函数的封装，底层实现是epoll。</p></li><li><p>AIO</p><p>AIO对应的是异步IO模型</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
          <category> java io </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL探究之InnoDB存储行格式</title>
      <link href="/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8BInnoDB%E5%AD%98%E5%82%A8%E8%A1%8C%E6%A0%BC%E5%BC%8F/"/>
      <url>/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8BInnoDB%E5%AD%98%E5%82%A8%E8%A1%8C%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>MySQL关于存储的任务是交给存储引擎来做的，存储引擎最终把数据存放才磁盘中，为了方便管理和理解，存储引擎定义了不同的概念，以InnoDB存储引擎为例。InnnoDB每一个表对应一个文件，称为表空间，表分成若干个段，一个段又包含若干个的区，一个区包含若干个页，InnoDB的页的默认大小是16k，每次将数据从磁盘读取到内存都是以页为最小单位，然后页中存放着许多行，行按照一定的格式存放。</p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/struct.png" style="zoom: 67%;" /><hr><h4 id="2-InnoDB存储引擎行格式"><a href="#2-InnoDB存储引擎行格式" class="headerlink" title="2. InnoDB存储引擎行格式"></a>2. InnoDB存储引擎行格式</h4><p>InnoDB存储引擎支持的行格式有四种：Compact、Redundant、Dynamic、Compress</p><hr><h4 id="3-Compact"><a href="#3-Compact" class="headerlink" title="3. Compact"></a>3. Compact</h4><p>Compact的结构如下所示</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/compact.png" alt=""></p><ul><li><p>变长长度列表</p><p>MySQL支持一些变长数据类型，比如<code>varchar</code>，这种数据类型占用的内存空间是不定的，所以需要额外的信息来说明变长数据实际占了多少字节。</p><p>变长长度列表采用逆序的方式存放了行记录中变长数据的长度。注意如果该表没有变长字段，这个列表是不存在的。</p><p>对于char类型的数据，如果采用变长编码则会加入到变长长度列表，否则不会。</p></li><li><p>NULL值列表</p><p>Compact的中文意思是紧凑的，正如其名字一样，这种格式的特点就是尽量少占用内存空间。而对于某种数据类型，如果这个字段为null，那么其实没有必要为其开辟内存空间，只需要记下来这个位置为null就可以了。</p><p>对于一张表，InnoDB会把所有的可能为null的字段映射到一个bit位中，如果该位为1说明这个字段为null。注意NULL值列表也是逆序的并且占用整数倍字节。</p></li><li><p>记录头信息</p><p>记录头信息包含的信息很多，主要是用来描述当前行的状态的，比如是否被删除了，上一条记录的位置，下一条记录在位置，是否B+树索引的叶子节点等信息。</p></li><li><p>列信息</p><p>保存真实的数据，每一个字段的数据按顺序排放，但是会添加三个隐藏列。分别是行号、事务id、回滚指针等</p></li></ul><p><strong>对行溢出的处理</strong></p><p>假设某一行的数据比整个页的最大容量还大就会发生溢出，对于溢出的处理如下：</p><p>对于溢出数据，当前行只会存储数据的一小部分，其他数据放在其他页上，然后用一个20字节的指针指向溢出的数据。</p><hr><h4 id="4-Redundant"><a href="#4-Redundant" class="headerlink" title="4. Redundant"></a>4. Redundant</h4><p>redundant的中文意思是紧凑的</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/redundant.png" alt=""></p><ul><li><p>字段长度偏移列表</p><p>字段长度偏移列表逆序存放了每一个字段的开始的位置，这样就可以在真实的列数据中找到每一行数据</p></li><li><p>记录头信息</p><p>类似于Compact格式</p></li><li><p>列信息</p><p>保存每一列的数据，注意null值也会占用全部的内存。对于char(M)类型，占用字符集最大长度乘以M</p></li></ul><hr><h4 id="5-Dynamic"><a href="#5-Dynamic" class="headerlink" title="5. Dynamic"></a>5. Dynamic</h4><p>与Compact格式类似，只是在处理溢出数据时会把所有的溢出数据存在其他页，当前行保存溢出页的地址</p><hr><h4 id="6-Compress"><a href="#6-Compress" class="headerlink" title="6. Compress"></a>6. Compress</h4><p>与Dynamic类似，不同点在于会对数据进行压缩从而节省空间</p><hr><h4 id="7-实践"><a href="#7-实践" class="headerlink" title="7. 实践"></a>7. 实践</h4><p>设置和修改表的行格式语句如下：</p><p><code>CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称</code></p><p><code>ALTER TABLE 表名 ROW_FORMAT=行格式名称</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL探究之数据目录</title>
      <link href="/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/"/>
      <url>/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h5 id="1-数据库与文件系统的关系"><a href="#1-数据库与文件系统的关系" class="headerlink" title="1. 数据库与文件系统的关系"></a>1. 数据库与文件系统的关系</h5><p>基于磁盘的数据库都是将数据存储在磁盘的文件系统时，当需要读取数据时从文件系统中读出数据返回给用户，写入数据时，存储引擎会将数据写入磁盘。</p><h5 id="2-MySQL数据目录"><a href="#2-MySQL数据目录" class="headerlink" title="2. MySQL数据目录"></a>2. MySQL数据目录</h5><p><strong>查看数据目录</strong></p><p><code>show variables like &#39;datadir&#39;</code></p><p>MySQL所有的数据都存放在这个目录中</p><p><strong>数据目录的结构</strong></p><p>对于每一个<code>database</code>都会在数据目录中创建一个同名的子目录</p><p><strong>表在文件系统中的表示</strong></p><p>每个表由表结构的定义和表中的数据组成，会在数据库对应的目录中生成<code>.frm</code>文件</p><p><strong>InnoDB如何存储表数据的</strong></p><p>对于InnoDB来说以页为基本单位来管理存储空间，默认大小为16kb。InnoDB将页存放在表空间中，表空间有两种一种是系统表空间，一种是独立表空间。</p><ul><li><p>系统表空间</p><p>系统表空间对应的文件是数据库中的<code>ibdata1</code>，在MySQL5.6之前表中的所有数据都会被默认存储到这个系统表空间中</p></li><li><p>独立表空间</p><p>在MySQL5.6之后，InnoDB会为每一个表建立一个独立的表空间，扩展名为<code>表名.ibd</code>，独立表空间存放表的数据和索引</p></li></ul><p><strong>MyISAM如何存储表数据</strong></p><p>每个表对应三个文件<code>表名.frm</code>、<code>表名.MYD</code>、<code>表名.MYI</code>。</p><p><code>表名.frm</code>表示表结构文件。<code>表名.MYD</code>表示数据文件；<code>表名.MYI</code>表示索引文件</p><p><strong>视图在文件系统中的表示</strong></p><p>视图是虚拟的表不需要存放数据，只需要把他的结构存储起来就行了，和<code>表</code>一样，描述视图结构的文件也会被存储到所属数据库对应的子目录下边，只会存储一个<code>视图名.frm</code>的文件。</p><h5 id="3-MySQL系统数据库"><a href="#3-MySQL系统数据库" class="headerlink" title="3. MySQL系统数据库"></a>3. MySQL系统数据库</h5><ul><li><p><code>mysql</code></p><p>这个数据库贼核心，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。</p></li><li><p><code>information_schema</code></p><p>这个数据库保存着MySQL服务器维护的所有其他数据库的信息，比如有哪些表、哪些视图、哪些触发器、哪些列、哪些索引吧啦吧啦。这些信息并不是真实的用户数据，而是一些描述性信息，有时候也称之为元数据。</p></li><li><p><code>performance_schema</code></p><p>这个数据库里主要保存MySQL服务器运行过程中的一些状态信息，算是对MySQL服务器的一个性能监控。包括统计最近执行了哪些语句，在执行过程的每个阶段都花费了多长时间，内存的使用情况等等信息。</p></li><li><p><code>sys</code></p><p>这个数据库主要是通过视图的形式把<code>information_schema</code>和<code>performance_schema</code>结合起来，让程序员可以更方便的了解MySQL服务器的一些性能信息。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL探究之InnoDB存储页格式</title>
      <link href="/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8BInnoDB%E5%AD%98%E5%82%A8%E9%A1%B5%E6%A0%BC%E5%BC%8F/"/>
      <url>/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8BInnoDB%E5%AD%98%E5%82%A8%E9%A1%B5%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1-页格式简介"><a href="#1-页格式简介" class="headerlink" title="1. 页格式简介"></a>1. 页格式简介</h4><p>页是InnoDB从磁盘中存取的最小单位，默认大小为16kb，可以用来存放数据、索引、日志等信息。数据页的格式如下：</p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/page_struct.png" style="zoom:50%;" /><ul><li><p>File Header</p><p>存放页的一些通用信息</p></li><li><p>Page Header</p><p>存放数据页专有的信息</p></li><li><p>Infimum和supremum</p><p>这是两个虚拟的行记录</p></li><li><p>User Records</p><p>用户行记录</p></li><li><p>Free Space</p><p>空闲空间</p></li><li><p>Page Directory</p><p>页目录</p></li><li><p>File Tailer</p><p>用来校验页是否完整</p></li></ul><h4 id="2-页如何管理记录"><a href="#2-页如何管理记录" class="headerlink" title="2. 页如何管理记录"></a>2. 页如何管理记录</h4><p>向页中插入一条记录，会从Free Space中申请一定的空间存放记录，插入的记录就位于User Records。页中的多条记录按照主键的大小（一定会有一个主键，如果不存在则由第一个唯一索引字段当做主键，否则自动生成row_id充当主键）排序，使用记录头中的信息描述每一条记录的下一条记录的位置，也就是说页中的记录会构成一个链表。而页中的两个虚拟行记录Infimum和supremum则相当于头结点和尾节点。如图所示：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/link_record.png" alt=""></p><h4 id="3-如何在页内查找记录"><a href="#3-如何在页内查找记录" class="headerlink" title="3. 如何在页内查找记录"></a>3. 如何在页内查找记录</h4><p>存储引擎存放数据处理要考虑内存占用问题还要定义查找方法，如何查才能查找的更快呢？假设已经知道待查找的记录在某一页，并且这一页已经读取到内存中，如何进行查找呢？由于记录组织成一个链表结构，那么查找的时间复杂度是O(N)，显然这是不能接受的，因此页内定义了一个叫做页目录的东西，解决页内查找的方案如下：</p><p>页中的记录是按照主键大小顺序存放的，但是每条记录占用的内存空间不是连续的所以不能使用二分查找来加速查找。但是可以借助一种中间结果来实现二分查找，这就是页目录。页目录由不同的连续的槽构成，将记录链表分成不同的连续的组。将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到页目录作为槽。这样在查找的过程中首先在页目录中进行二分查找找出对应的组，然后在组里顺序查找到记录。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/page_find.png" alt=""></p><h4 id="4-页面头部"><a href="#4-页面头部" class="headerlink" title="4. 页面头部"></a>4. 页面头部</h4><p>主要存放页中已经存储了多少条记录，第一条记录的地址是什么，页目录中存储了多少个槽等信息</p><h4 id="5-File-Header"><a href="#5-File-Header" class="headerlink" title="5. File Header"></a>5. File Header</h4><p><code>File Header</code>针对各种类型的页都通用，也就是说不同类型的页都会以<code>File Header</code>作为第一个组成部分，它描述了一些针对各种页都通用的一些信息，比方说这个页的编号是多少，它的上一个页、下一个页是谁</p><h4 id="6-File-Trailer"><a href="#6-File-Trailer" class="headerlink" title="6. File Trailer"></a>6. File Trailer</h4><p>当页在内存中被修改就成为了脏页，可以通过该部分来判断，File Trailer主要包括两部分，一部分是校验和，通过校验和就可以知道页是否被修改过，还有一部分是最后修改时对应的日志序列位置（LSN）</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL探究之字符集</title>
      <link href="/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
      <url>/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h4 id="MySQL探究之字符集"><a href="#MySQL探究之字符集" class="headerlink" title="MySQL探究之字符集"></a>MySQL探究之字符集</h4><h4 id="1-字符集"><a href="#1-字符集" class="headerlink" title="1. 字符集"></a>1. 字符集</h4><p>在计算机中数据都是以二进制形式进行存储的，字符集就是一个存储的规则，比如存储每个字母或者汉字需要存储一个怎样的二进制串，这个二进制串是唯一的。有了这个规则，我们在查看某个文本时就可以按照规则转换出来正确的符号表示。字符集的原理如下。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/decode.png" alt=""></p><p><strong>MySQL支持的字符集</strong></p><p><code>show charset</code></p><p>执行结果如下：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/clipboard_20200220070151.png" alt=""></p><p>可以看到mysql支持许多字符集。下面是对常用字符集的介绍:</p><ul><li><p>ascii</p><p>每个字符占用一个字节，最高位不使用，所以最多支持2^7=128个字符，包括字母符号（键盘上的每个键）</p></li><li><p>gbk</p><p>支持汉字，兼容ascii，当表示ascii时占用一个字节，否则两个字节</p></li><li><p>utf8</p><p>兼容ascii，采用边长编码。长度为1到4个字节。utf8是Unicode字符集的一种，Unicode包含了世界上所有的字符，分为utf8、utf16、utf32。utf8使用1到4个字节编码，utf16使用2到4字节，utf32使用4字节。</p><p>在mysql中为了节约内存utf8分为两个版本utf8mb3和utf8mb4。其中utf8mb3是阉割版的utf8，最长只占用3字节。utf8mb4才是真正的utf8，但是mysql中的utf8是指最大长度为3字节的utf8mb3。如果要<strong>存储emoji表情，可以使用utf8mb4。</strong></p></li></ul><h4 id="2-字符集比较规则"><a href="#2-字符集比较规则" class="headerlink" title="2. 字符集比较规则"></a>2. 字符集比较规则</h4><p>字符有很多种，如数字，汉字，英文字母，符号等。给定一堆字符串，如何进行排序，应该按照什么样的规则排序呢？所谓的排序规则就是按照这个规则可以确定一系列字符串的顺序。对于向数字，我们可以规定小的排在前面，大的排在后面，字母可以按照字典序排列，但是有的如汉字，其他国家的文字如何指定一个排序规则呢？不同的字符集有不同的排序规则，有的按照大小的逻辑关系，有的直接按照字符对应的二进制位的大小排序，有的不区分大小写，有的区分大小写。</p><p><strong>查看MySQL支持的字符集比较规则</strong></p><p><code>show collation</code></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/clipboard_20200220071542.png" alt=""></p><p>比较规则的命名是有规律的</p><ul><li><p>比较规则名称以与其关联的字符集的名称开头。如上图的查询结果的⽐较规则名称都是以utf8开头的</p></li><li><p>后边紧跟着该比较规则主要作用于哪种语言，比如</p><ul><li>utf8_polish_ci表示以波兰语的规则比较</li><li>utf8_spanish_ci是以西班牙语的规则比较</li><li>utf8_general_ci是⼀种通⽤的⽐较规则。</li></ul></li><li><p>名称后缀意味着该比较规则是否区分语言中的重音、大小写啥的，具体可以用的值如下：</p><table><thead><tr><th align="center">后缀</th><th align="center">英文释义</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>_ai</code></td><td align="center"><code>accent insensitive</code></td><td align="center">不区分重音</td></tr><tr><td align="center"><code>_as</code></td><td align="center"><code>accent sensitive</code></td><td align="center">区分重音</td></tr><tr><td align="center"><code>_ci</code></td><td align="center"><code>case insensitive</code></td><td align="center">不区分大小写</td></tr><tr><td align="center"><code>_cs</code></td><td align="center"><code>case sensitive</code></td><td align="center">区分大小写</td></tr><tr><td align="center"><code>_bin</code></td><td align="center"><code>binary</code></td><td align="center">以二进制方式比较</td></tr></tbody></table></li></ul><h4 id="3-MySQL各级别的字符集和比较规则"><a href="#3-MySQL各级别的字符集和比较规则" class="headerlink" title="3. MySQL各级别的字符集和比较规则"></a>3. MySQL各级别的字符集和比较规则</h4><p>mysql有四种级别的字符集和比较规则，分别是：</p><ul><li>服务器级别</li><li>数据库级别</li><li>表级别</li><li>列级别</li></ul><p><strong>服务器级别</strong></p><p><code>SHOW VARIABLES LIKE &#39;character_set_server&#39;;</code></p><p><code>SHOW VARIABLES LIKE &#39;collation_server&#39;</code></p><p>如果创建数据库没有指定字符集合比较规则默认使用服务器级别</p><p><strong>数据库级别</strong></p><p><code>SHOW VARIABLES LIKE &#39;character_set_database&#39;;</code></p><p><code>SHOW VARIABLES LIKE &#39;collation_database&#39;;</code></p><p>如果创建表的时候没有指定字符集和比较规则则默认使用数据库级别</p><p><strong>表级别</strong></p><p>设置表级别字符集和比较规则</p><pre><code>CREATE TABLE 表名 (列的信息)    [[DEFAULT] CHARACTER SET 字符集名称]    [COLLATE 比较规则名称]]</code></pre><p>如果字段不指定字符集合比较规则，默认与表级别一样</p><p><strong>列级别</strong></p><pre><code>CREATE TABLE 表名(    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],    其他列...);ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];</code></pre><p><strong>修改规则</strong></p><p>由于字符集和比较规则是互相有联系的，如果只修改字符集，比较规则会跟着变化，如果只修改了比较规则，字符集也会跟着变化，具体规则如下：</p><ul><li>只修改字符集，则比较规则将变为修改后的字符集默认的比较规则。</li><li>只修改比较规则，则字符集将变为修改后的比较规则对应的字符集。</li></ul><h4 id="4-MySQL乱码问题"><a href="#4-MySQL乱码问题" class="headerlink" title="4. MySQL乱码问题"></a>4. MySQL乱码问题</h4><p>从客户端发送sql语句通过网络传给服务器到服务器返回结果给客户端展出出来，涉及到不同的编码转换，如果说编码转换出错了，则可能出现乱码问题。MySQL服务器与编码转换有关的系统变量如下。</p><table><thead><tr><th align="center">系统变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>character_set_client</code></td><td align="center">服务器解码请求时使用的字符集</td></tr><tr><td align="center"><code>character_set_connection</code></td><td align="center">服务器处理请求时会把请求字符串从<code>character_set_client</code>转为<code>character_set_connection</code></td></tr><tr><td align="center"><code>character_set_results</code></td><td align="center">服务器向客户端返回数据时使用的字符集</td></tr></tbody></table><p>服务器认为客户端发送过来的数据是以<code>character_set_client</code>编码，于是会按照相同的方式解码，然后处理请求的时候会把他转换为<code>character_set_connection</code>编码，返回信息时会编码成<code>character_set_result</code>。也就是说假如客户端的编码与<code>character_set_client</code>和<code>character_set_results</code>不兼容的话就会发生乱码问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL探究之InnoDB索引</title>
      <link href="/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h5 id="1-什么是索引"><a href="#1-什么是索引" class="headerlink" title="1. 什么是索引"></a>1. 什么是索引</h5><p>索引是一种用于快速查找的有序的数据结构</p><h5 id="2-InnoDB中的索引方案"><a href="#2-InnoDB中的索引方案" class="headerlink" title="2. InnoDB中的索引方案"></a>2. InnoDB中的索引方案</h5><p>InnoDB使用B+树作为索引，B+树是一棵多路的搜索树，在MySQL这棵树一般不会超过4层。由于InnoDB读写磁盘的最小单位是页，所以使用页来作为B+树的节点，也就是搜索时最多只需要访问4次IO就可以找到对应的数据页。用户记录只存在底层的叶子节点中，数据页按顺序使用链表连接起来，然后非叶子节点时一些目录项，这些目录项只包含主键和下一层所在的页号，根据这个页号就可以找到下一级节点，目录项按照主键顺序连接在一起，并使用页目录辅助进行二分查找，所以在页内查找的速度很快。</p><h5 id="3-MyISAM中的索引方案"><a href="#3-MyISAM中的索引方案" class="headerlink" title="3. MyISAM中的索引方案"></a>3. MyISAM中的索引方案</h5><p>MyISAM存储引擎建立一张表后会生成三个文件.frm、.MYI和.MYD。其中.MYD存放用户记录，.MYI存放的是索引，也就是数据和索引是分开存放的，索引中存放的是主键和行号，当进行索引查询时首先在索引中找到主键对应的行号，然后根据行号去数据文件中进行查找（类似于回表操作）</p><h5 id="4-索引分类"><a href="#4-索引分类" class="headerlink" title="4. 索引分类"></a>4. 索引分类</h5><p><strong>聚簇索引</strong></p><p>B+树的叶子节点存储了完整的用户记录，即索引和数据一起存放，在查找聚簇索引时可以直接在这棵B+树索引中找到用户记录，所以一般查询很快。InnoDB存储引擎会为主键自动创建聚簇索引，并且一张表只有一个聚簇索引。</p><p><strong>辅助索引</strong></p><p>辅助索引的叶子节点中的记录按照建索引的那个字段按序存放，但是不存储所有的用户记录，只存储建索引的那个字段和主键，在查找辅助索引时找到了待查找的字段和主键，需要使用主键去聚簇索引中继续查找，这个过程称为回表。</p><p><strong>联合索引</strong></p><p>按照多个列的顺序为多个列同时建立的索引称为联合索引。</p><h5 id="5-索引带来的额外开销"><a href="#5-索引带来的额外开销" class="headerlink" title="5. 索引带来的额外开销"></a>5. 索引带来的额外开销</h5><p>索引虽然可以极大的提高查询效率，但是却会带来其他的开销，所以不能随便建立索引，开销主要包含以下两个方面：</p><ul><li><p>空间</p><p>B+树的每个节点就是一个页，所以会带来额外的空间开销。</p></li><li><p>时间</p><p>对表中数据进行增、删、改操作时会破坏B+树的性质，所以需要调整。如果建立很多索引，每个B+树都得进行维护。</p></li></ul><h5 id="6-使用索引的条件"><a href="#6-使用索引的条件" class="headerlink" title="6. 使用索引的条件"></a>6. 使用索引的条件</h5><ul><li><p>全值匹配</p><p>如果搜索条件与索引列一致则可以利用索引进行查找，这就是全值匹配</p></li><li><p>匹配左边的列</p><p>搜索条件中有多个列，但是只有左边连续的列与索引列一样，那么也可以利用到索引，因为对多个列建联合索引的比较条件是从左边的列开始比较的</p></li><li><p>匹配列前缀</p><p>如果索引列是字符串类型，搜索条件是一个包含前缀的模糊查询可以使用到索引。因为对字符串排序是按照字典序排列的，从字符串的左边到右边依次比较的。</p></li><li><p>匹配范围值</p><p>因为索引中的每一条记录都是按照顺序使用链表连接起来的，所以只要找到两个边界就可以快速查找出边界内所有的记录</p></li><li><p>精确匹配某一列并范围匹配另外一列</p></li><li><p>用于排序</p><p>索引本身是一个有序的结构，所以可以利用索引进行排序，如果没有索引就需要在内存中重新排序，开销非常大</p></li><li><p>用于分组</p><p>所谓的分组就是按照某个列，将该列一样的记录当做一组，所以可以利用索引有序的性质，因为有序，所以列相当的记录相邻。</p></li><li><p>覆盖索引</p><p>对于辅助索引需要进行回表的操作，如果回表的次数太多了，会带来可见的代价，为了减小这个代价可以使用覆盖索引来避免回表。覆盖索引就是查询的列包含在索引中，这样就只需要找到索引的叶子结点就可以找出查询的列而不需要去聚簇索引中找到所有的列。</p></li></ul><h5 id="7-如何建立索引"><a href="#7-如何建立索引" class="headerlink" title="7. 如何建立索引"></a>7. 如何建立索引</h5><ul><li>只为用于搜索、排序、分组的列建立索引</li><li>需要考虑列的区分度，如果某个字段所有行记录中的值基本都一样，比如说性别只有男女两种，那么建立索引就没有意义</li><li>索引列的类型尽量小，这样比较的时候开销会小，查询的速度就更快</li><li>对于很长的字符串，如果对整个字符串建立索引，那么索引占用的空间会非常大，所以一般只对长字符串的前缀建立索引</li><li>索引列不能进行任何计算</li><li>对于主键应该使主键按照顺序进行自增，这样插入时可以顺序插入</li><li>索引有额外的时间和空间代价，所以不要建立冗余的索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL探究之单表访问</title>
      <link href="/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E5%8D%95%E8%A1%A8%E8%AE%BF%E9%97%AE/"/>
      <url>/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E5%8D%95%E8%A1%A8%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="1-访问方法"><a href="#1-访问方法" class="headerlink" title="1. 访问方法"></a>1. 访问方法</h5><p>在MySQL服务器中有一个查询优化器模块，一条查询语句进行语法解析后会交给查询优化器来优化，优化的结构就是生成一个所谓的执行计划，这个执行计划表明了应该使用那些所以进行查询，表之间的连接顺序是等。本文要记录的是怎么执行单表查询。对于单表查询大致可以分成三种方法：</p><ul><li><p>使用全表扫描进行查询</p></li><li><p>使用索引进行查询</p><p>索引查询有可以分为对索引进行等值查询、范围查询，对聚簇索引查询，对辅助索引查询等</p></li></ul><p>常用的访问方法有const、ref、ref_or_null、range、index、all等</p><p>首先建立如下表:</p><pre><code class="sql">CREATE TABLE single_table (    id INT NOT NULL AUTO_INCREMENT,    key1 VARCHAR(100),    key2 INT,    key3 VARCHAR(100),    key_part1 VARCHAR(100),    key_part2 VARCHAR(100),    key_part3 VARCHAR(100),    common_field VARCHAR(100),    PRIMARY KEY (id),    KEY idx_key1 (key1),    UNIQUE KEY idx_key2 (key2),    KEY idx_key3 (key3),    KEY idx_key_part(key_part1, key_part2, key_part3)) Engine=InnoDB CHARSET=utf8;</code></pre><p>在这张表中索引情况如下：</p><ul><li><p>为<code>id</code>列建立的聚簇索引。</p></li><li><p>为<code>key1</code>列建立的<code>idx_key1</code>二级索引。</p></li><li><p>为<code>key2</code>列建立的<code>idx_key2</code>二级索引，而且该索引是唯一二级索引。</p></li><li><p>为<code>key3</code>列建立的<code>idx_key3</code>二级索引。</p></li><li><p>为<code>key_part1</code>、<code>key_part2</code>、<code>key_part3</code>列建立的<code>idx_key_part</code>二级索引，这也是一个联合索引。</p></li></ul><h5 id="2-const"><a href="#2-const" class="headerlink" title="2. const"></a>2. const</h5><p>对主键或者唯一索引进行等值查询。</p><p>对主键进行等值查询</p><p><code>SELECT * FROM single_table WHERE id = 1438;</code></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/clipboard_20200221074308.png" alt=""></p><p>对唯一索引进行等值查询</p><p><code>SELECT * FROM single_table WHERE key2 = 3841;</code></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/clipboard_20200221074221.png" alt="image-20200221194007173"></p><p>const访问方法，只需要访问一次聚簇索引，或者访问一次辅助索引并进行一次回表操作，所以查询速度非常快。</p><h5 id="3-ref"><a href="#3-ref" class="headerlink" title="3. ref"></a>3. ref</h5><p>对普通的辅助索引进行等值查询</p><p><code>SELECT * FROM single_table WHERE key1 = &#39;abc&#39;;</code></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/clipboard_20200221075626.png" alt=""></p><p>查询的搜索条件中的字段不是唯一的所以会得到多条结果，并且每个结果都需要进行回表操作，所以速度比const慢</p><h5 id="4-ref-or-null"><a href="#4-ref-or-null" class="headerlink" title="4. ref_or_null"></a>4. ref_or_null</h5><p>查询某个辅助索引列的值等于某个常数的记录，还想把该列的值为<code>NULL</code>的记录也找出来</p><p><code>SELECT * FROM single_table WHERE key1 = &#39;abc&#39; OR key1 IS NULL;</code></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/clipboard_20200221080118.png" alt=""></p><h5 id="5-range"><a href="#5-range" class="headerlink" title="5. range"></a>5. range</h5><p>对索引列进行范围查找</p><p><code>SELECT * FROM single_table WHERE key2 IN (1438, 6328) OR (key2 &gt;= 38 AND key2 &lt;= 79);</code></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/clipboard_20200221080447.png" alt=""></p><h5 id="6-index"><a href="#6-index" class="headerlink" title="6. index"></a>6. index</h5><p>查询条件没有用到任何索引，但是查询列建有索引列，所以可以在辅助中进行全表扫描</p><p><code>SELECT key_part1, key_part2, key_part3 FROM single_table WHERE key_part2 = &#39;abc&#39;;</code></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/clipboard_20200221080737.png" alt=""></p><p>由于辅助索引不存放全部的记录，所以辅助索引要比聚簇索引小的多，因此即使全表扫描也比全表扫描聚簇索引速度要快。</p><h5 id="7-all"><a href="#7-all" class="headerlink" title="7. all"></a>7. all</h5><p>对聚簇索引进行全表扫描，速度最慢。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL探究之连接的原理</title>
      <link href="/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/2020/01/10/MySQL%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id="1-连接简介"><a href="#1-连接简介" class="headerlink" title="1. 连接简介"></a>1. 连接简介</h5><p>涉及到多表查询最常用的操作是连接操作，在MySQL中连接分成两大类分别是内连接和外连接，外连接由分为左外连接和右外连接，简称左连接和右连接。</p><p>连接的本质就是生成笛卡尔集然后从中筛选出符合条件的记录。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/join.png" alt=""></p><h5 id="2-连接的原理"><a href="#2-连接的原理" class="headerlink" title="2. 连接的原理"></a>2. 连接的原理</h5><p><strong>驱动表与被驱动表</strong></p><p>两个表左连接查询有一张表称为驱动表，另一张表是被驱动表，假设tableA是驱动表，tableB是被驱动表。连接操作如下图所示：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/mysql%E6%8E%A2%E7%A9%B6/join_opt.png" alt=""></p><p>由于需要多次访问被驱动表，所以可以考虑<strong>给被驱动表建立索引加快查找速度</strong></p><p><strong>join buffer</strong></p><p>join buffer是执行连接查询前申请的一块固定大小的内存，先把若干条驱动表结果集中的记录装在这个<code>join buffer</code>中，然后开始扫描被驱动表，每一条被驱动表的记录一次性和<code>join buffer</code>中的多条驱动表记录做匹配，因为匹配的过程都是在内存中完成的，所以这样可以显著减少被驱动表的<code>I/O</code>代价</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty启动过程分析</title>
      <link href="/2020/01/10/Netty%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
      <url>/2020/01/10/Netty%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h5 id="1-Netty的工作模式"><a href="#1-Netty的工作模式" class="headerlink" title="1. Netty的工作模式"></a>1. Netty的工作模式</h5><p>Netty基于主从Reactor模式实现，它的基本结构如下图所示:</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/netty_boss_work.png" alt=""></p><p>Neety的工作方式基本如上图所示：</p><p>首先Netty基于主从Reactor模式，有两个EventLoopGroup，一般称为BossGroup和WorkerGroup。其中BossGroup充当主Reactor的角色。EventLoopGroup包含多个EventLoop，每个EventLoop代表一个线程，EventLoop内部会运行select这样的IO多路复用函数用来监听事件。BossGroup和WorkerGroup的职责不同，BossGroup负责监听连接事件，当连接事件到达后会将事件注册到WorkerGroup中，而WorkerGroup监听读写事件，当监听到读写事件发送后会将这个事件交给Pipeline去处理业务。</p><p>本小节主要探究的是<strong>Netty如何启动EventLoopGroup去监听事件，监听到事件后如何触发pipeline去处理业务方法。</strong></p><hr><h5 id="2-BossGroup是怎么启动的"><a href="#2-BossGroup是怎么启动的" class="headerlink" title="2. BossGroup是怎么启动的"></a>2. BossGroup是怎么启动的</h5><p>面对BossGroup，我们已经知道了其功能与作用是绑定端口监听连接事件，并且把连接的channel的读写事件注册到workerGroup中，为了验证这个过程，我们有如下几个问题需要解决：</p><ul><li>EventLoopGroup每次启动如何创建线程的，创建几个？</li><li>EventLoopGroup有多个EventLoop，如何选择新连接绑定到哪个EventLoop呢？</li><li>BossGroup是如何绑定端口的</li><li>BossGroup是如何处理连接的</li></ul><p><strong>EventLoopGroup每次启动如何创建线程的，创建几个</strong></p><p>代码跟踪过程如下图所示：</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/bossGroup_create.png" alt=""></p><hr><pre><code class="java"> protected MultithreadEventLoopGroup(int nThreads, Executor executor, Object... args) {        super(nThreads == 0 ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, args); }// DEFAULT_EVENT_LOOP_THREADS的计算如下 static {        DEFAULT_EVENT_LOOP_THREADS = Math.max(1, SystemPropertyUtil.getInt(                &quot;io.netty.eventLoopThreads&quot;, NettyRuntime.availableProcessors() * 2));        if (logger.isDebugEnabled()) {            logger.debug(&quot;-Dio.netty.eventLoopThreads: {}&quot;, DEFAULT_EVENT_LOOP_THREADS);        } }</code></pre><p>从这个构造函数可以看出来，nThread构造参数代表最终创建的线程数量，默认是CPU核心数*2</p><pre><code class="java"> protected MultithreadEventExecutorGroup     (int nThreads, Executor executor, EventExecutorChooserFactory chooserFactory, Object... args) {        // 前面的参数校验的代码省略        // 重点代码        if (executor == null) {            // 创建线程执行器，并且包含一个创建线程的工厂，重点代码            executor = new ThreadPerTaskExecutor(newDefaultThreadFactory());        }        children = new EventExecutor[nThreads];        for (int i = 0; i &lt; nThreads; i ++) {            children[i] = newChild(executor, args);            // 异常处理的代码省略        }    }</code></pre><p>这段代码是NioEventLoopGroup的父类的父类的构造方法，这个方法中使用ThreadPerTaskExecutor创建了nThread个线程实体。具体看一下newChild方法的作用</p><pre><code class="java">protected EventLoop newChild(Executor executor, Object... args) throws Exception {        EventLoopTaskQueueFactory queueFactory = args.length == 4 ? (EventLoopTaskQueueFactory) args[3] : null;    // 创建一个NioEventLoop        return new NioEventLoop(this, executor, (SelectorProvider) args[0],            ((SelectStrategyFactory) args[1]).newSelectStrategy(), (RejectedExecutionHandler) args[2], queueFactory);}</code></pre><p>可以看到NioEventLoopGroup调用newChild方法创建了nThread个NioEventLoop，而创建NioEventLoop时把executor给传进去了，因此下一步要分析executor有什么用，NioEventLoop怎么利用executor。</p><pre><code class="java">public final class ThreadPerTaskExecutor implements Executor {    private final ThreadFactory threadFactory;    public ThreadPerTaskExecutor(ThreadFactory threadFactory) {        // 传入一个线程工厂，线程工厂负责创建线程        this.threadFactory = ObjectUtil.checkNotNull(threadFactory, &quot;threadFactory&quot;);    }    // 每调用一次execute都会用线程工厂去创建一个线程执行传过来的任务    @Override    public void execute(Runnable command) {        threadFactory.newThread(command).start();    }}</code></pre><p>再看一下NioEventLoop的构造方法</p><pre><code class="java">NioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider,                 SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler,                 EventLoopTaskQueueFactory queueFactory) {    // executor        super(parent, executor, false, newTaskQueue(queueFactory), newTaskQueue(queueFactory),                rejectedExecutionHandler);        this.provider = ObjectUtil.checkNotNull(selectorProvider, &quot;selectorProvider&quot;);        this.selectStrategy = ObjectUtil.checkNotNull(strategy, &quot;selectStrategy&quot;);        final SelectorTuple selectorTuple = openSelector();    // 保存selector,这个selector就是nio中的selector        this.selector = selectorTuple.selector;        this.unwrappedSelector = selectorTuple.unwrappedSelector; }</code></pre><pre><code class="java">  protected SingleThreadEventExecutor(EventExecutorGroup parent, Executor executor,                                        boolean addTaskWakesUp, Queue&lt;Runnable&gt; taskQueue,                                        RejectedExecutionHandler rejectedHandler) {        super(parent);        this.addTaskWakesUp = addTaskWakesUp;        this.maxPendingTasks = DEFAULT_MAX_PENDING_EXECUTOR_TASKS;        this.executor = ThreadExecutorMap.apply(executor, this);// 保存executor        this.taskQueue = ObjectUtil.checkNotNull(taskQueue, &quot;taskQueue&quot;);// 保存任务队列        this.rejectedExecutionHandler = ObjectUtil.checkNotNull(rejectedHandler, &quot;rejectedHandler&quot;);    }</code></pre><p>此时到目前为止只是成功创建了EventLoopGroup和其中的多个EventLoop，但是通过debug发现并没有创建线程，目前EventLoop实际上已经有创建线程的能力了。通过debug发现真正创建线程得到绑定端口时才会创建。</p><p>总结：</p><p>NioEventLoopGroup的构造参数决定了NioEvnetLoopGroup包含几个NioEvnetLoop，默认是CPU核心数*2。然后NioEventLoop包含了Nio中的selector实现IO多路复用以及一个线程执行器用来创建线程执行任务，还有一个任务队列。</p><hr><p><strong>如何选择新连接绑定到哪个EventLoop</strong></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/chooser_create.png" alt=""></p><pre><code class="java">   protected MultithreadEventExecutorGroup(int nThreads, Executor executor,                                            EventExecutorChooserFactory chooserFactory, Object... args) {         // 前面创建EventLoop的方代码省略        // 这里创建的是一个选择器，用来选择一个EventLoop绑定新连接        chooser = chooserFactory.newChooser(children);        // 后面代码省略    }</code></pre><pre><code class="java">public EventExecutor next() {    // EventLoopGroup调用选择方法，封装了选择器的next方法    return chooser.next();}</code></pre><pre><code class="java">public EventExecutor next() {    // 从第一个开始每次选择下一个，知道最后一个后又回到第一个，这是children的长度是2的幂的情况    return executors[idx.getAndIncrement() &amp; executors.length - 1];}</code></pre><pre><code class="java">public EventExecutor next() {    // 选择的方法和前面一样，只是计算方法不一样，读children的数量没有要求    return executors[idx.getAndIncrement() &amp; executors.length - 1];}</code></pre><p>总结：</p><p>创建选择器时会根据chilren的个数来创建不同的选择器，选择器的next方法的结果是一样的，每次选择下一个然后回到第一个。只不过如果个数是2的幂，可以进行一定的优化提高选择速度。</p><hr><p><strong>BossGroup是如何绑定端口的</strong></p><p>首先应该知道BossGroup监控的是ServerSocketChannel，ServerSocketChannel需要和一个EventLoop进行绑定才能够开启一个监控的任务，所以第一步是要找到ServerSocketChannel与EventLoop绑定的过程，前面分析了有一个组件是选择器，它的作用就是选择一个指定的EventLoop返回，ServerSocketChannel与EventLoop绑定的过程肯定要调用选择器的next方法，绑定EventLoop的过程暂时不描述，只要记住ServerSocketChannel一定已经和一个EventLoop关联了，然后看下面的代码。</p><pre><code class="java"> private static void doBind0(            final ChannelFuture regFuture, final Channel channel,            final SocketAddress localAddress, final ChannelPromise promise) {        // 向EventLoop提交任务        channel.eventLoop().execute(new Runnable() {            @Override            public void run() {                if (regFuture.isSuccess()) {                    // 这是一个绑定端口的方法                    channel.bind(localAddress, promise).                        addListener(ChannelFutureListener.CLOSE_ON_FAILURE);                } else {                    promise.setFailure(regFuture.cause());                }            }        });    }</code></pre><p>上面可以看到channel的EventLoop执行了一个绑定端口的方法，而我们的BossGroup的作用之一就是监听端口等待连接，所以这个bind方法最后应该能够追踪到Nio中的bind方法。</p><p>最终端口绑定的方法如下：</p><pre><code class="java">  protected void doBind(SocketAddress localAddress) throws Exception {        if (PlatformDependent.javaVersion() &gt;= 7) {            javaChannel().bind(localAddress, config.getBacklog());        } else {            javaChannel().socket().bind(localAddress, config.getBacklog());        }    }</code></pre><hr><p><strong>BossGroup如何处理新的连接</strong></p><p>从bind方法进入</p><pre><code class="java">void init(Channel channel) {        p.addLast(new ChannelInitializer&lt;Channel&gt;() {            @Override            public void initChannel(final Channel ch) {                final ChannelPipeline pipeline = ch.pipeline();                ChannelHandler handler = config.handler();                if (handler != null) {                    pipeline.addLast(handler);                }                ch.eventLoop().execute(new Runnable() {                    @Override                    public void run() {                        pipeline.addLast(new ServerBootstrapAcceptor(                                ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));                    }                });            }        });    }</code></pre><p>channel使用pipeline组件来处理业务逻辑，当ServerSocketChannel产生连接事件后需要将这个事件交给pipline去处理，因此上面的代码中实际上为pipline添加了一个业务处理类ServerBootstrapAcceptor。下面是ServerBootstrapAcceptor的channelRead方法用来处理连接。</p><pre><code class="java">       public void channelRead(ChannelHandlerContext ctx, Object msg) {            final Channel child = (Channel) msg;            child.pipeline().addLast(childHandler);            setChannelOptions(child, childOptions, logger);            setAttributes(child, childAttrs);            try {                // 将channel注册到childGroup中                childGroup.register(child).addListener(new ChannelFutureListener() {                    @Override                    public void operationComplete(ChannelFuture future) throws Exception {                        if (!future.isSuccess()) {                            forceClose(child, future.cause());                        }                    }                });            } catch (Throwable t) {                forceClose(child, t);            }        }</code></pre><p>可以看到上面这个方法首先将客户端对应的channel与对应的pipeline业务关联，然后将其注册到childGroup中，也就是workerGroup。</p><h5 id="3-EventLoop如何监听事件"><a href="#3-EventLoop如何监听事件" class="headerlink" title="3. EventLoop如何监听事件"></a>3. EventLoop如何监听事件</h5><pre><code class="java">    @Override    protected void run() {        int selectCnt = 0;        // 这里是一段无限for循环        for (;;) {            try {                int strategy;                try {                    strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());                    switch (strategy) {                    case SelectStrategy.CONTINUE:                        continue;                    case SelectStrategy.BUSY_WAIT:                    case SelectStrategy.SELECT:                        // 内部有一个优先队列用来存放用户自定义的定时任务，这一行代码的目的是判断一下                        // 最近需要执行的定时任务的时间                        long curDeadlineNanos = nextScheduledTaskDeadlineNanos();                        // 如果没有用户自定义任务就赋给NONE                        if (curDeadlineNanos == -1L) {                            curDeadlineNanos = NONE;                         }                        nextWakeupNanos.set(curDeadlineNanos);                        try {                            // 如果任务队列中没有任务需要去执行才执行select方法                            if (!hasTasks()) {                                // 1. 调用select方法                                strategy = select(curDeadlineNanos);                            }                        } finally {                            nextWakeupNanos.lazySet(AWAKE);                        }                    default:                    }                } catch (IOException e) {                    // 这里是重建selector，为了解决jdk空轮询bug                    rebuildSelector0();                    selectCnt = 0;                    handleLoopException(e);                    continue;                }                selectCnt++;                cancelledKeys = 0;                needsToSelectAgain = false;                final int ioRatio = this.ioRatio;                boolean ranTasks;                if (ioRatio == 100) {                    try {                        if (strategy &gt; 0) {                            // 处理发送的事件                            processSelectedKeys();                        }                    } finally {                        // 处理队列中的任务                        ranTasks = runAllTasks();                    }                } else if (strategy &gt; 0) {                    final long ioStartTime = System.nanoTime();                    try {                        // 处理发送的事件                        processSelectedKeys();                    } finally {                        // 处理队列中的任务                        final long ioTime = System.nanoTime() - ioStartTime;                        ranTasks = runAllTasks(ioTime * (100 - ioRatio) / ioRatio);                    }                } else {                    ranTasks = runAllTasks(0);                 }        }    }</code></pre><p>上面代码基本上已经说明了监听事件的过程，首先调用select方法，返回后处理产生的事件然后处理队列中的任务。</p><pre><code class="java"> private int select(long deadlineNanos) throws IOException {         // 进入if的条件是没有自定义的定时任务并且任务队列为空（执行select方法前就判断了）        // 所以此时可以放心的调用阻塞的select方法        if (deadlineNanos == NONE) {            return selector.select();        }        // 这一步的作用是如果还有5微秒就有一个延时任务需要处理，那么就调用非阻塞的select        // 否则调用阻塞的select        long timeoutMillis = deadlineToDelayNanos(deadlineNanos + 995000L) / 1000000L;        return timeoutMillis &lt;= 0 ? selector.selectNow() : selector.select(timeoutMillis);    }</code></pre><h5 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h5><p>通过前面的代码，大致了解了EventLoopGroup是如何创建的，如何监听事件的以及如何处理用户自定义任务的。下面是总结。</p><ol><li>以NioEventLoopGroup为例，首先NioEventLoopGroup的构造函数可以设置每个NioEventLoopGroup可以创建多少个NioEventLoop，默认是当前可用的CPU核心数*2。</li><li>知道创建多少个NioEventLoop后需要知道怎么创建NioEventLoop，在NioEventLoopGroup中会首先构造出一个线程创建执行器，这个执行器里面包含了一个创建线程的线程工厂。</li><li>然后开始创建NioEventLoop，构造方法会将selector，线程创建执行器以及一个任务队列保存早NioEventLoop的，此时NioEventLoop和NioEventLoopGroup就准备好了。</li><li>然后服务端的启动需要一个ServerSocketChannel对象，这个对象在调用bootstrap的bind方法时会通过反射创建并且将其与Pipeline和一个NioEventLoop绑定并最后绑定端口号完成端口监听。NioEventLoop负责监控这个channel的事件，PipeLine包含处理新连接的业务方法，具体过程是将客户端对应的channel与客户端对应的pipeline绑定，然后注册到workerGroup中，由workerGroup去监听所有的客户端。</li><li>NioEventLoopGroup中的NioEventLoop内部会执行一个无限for循环，这个for循环中会去不断的执行select方法，然后处理发生的事件。</li><li>由于NioEventLoop内部包含了一个任务队列和一个定时任务队列用来存放用户的任务和定时任务，所以在for循环中除了要执行select方法外还要在循环的过程中去处理任务，具体为，只有当任务队列为空采取执行select，并且如果有一个定时任务快要发生了，会去执行一个非阻塞的select方法，否则执行一个阻塞的select方法直到定时任务发生，最后处理完连接后回去处理定时任务和任务队列。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
          <category> java io </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> io </tag>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java io与零拷贝分析</title>
      <link href="/2020/01/10/java%20IO%E4%B8%8E%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%88%86%E6%9E%90/"/>
      <url>/2020/01/10/java%20IO%E4%B8%8E%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h5 id="1-一次BIO分析"><a href="#1-一次BIO分析" class="headerlink" title="1. 一次BIO分析"></a>1. 一次BIO分析</h5><p><strong>本节分析的例子是向网络中发送一条消息，代码如下</strong></p><pre><code class="java">public class Demo {    public static void main(String[] args) throws IOException {    }    // 客户端代码    public void client() throws IOException {        Socket socket=new Socket(&quot;127.0.0.1&quot;,8088);        OutputStream outputStream = socket.getOutputStream();        byte[] buffer=&quot;hello&quot;.getBytes();        outputStream.write(buffer);        outputStream.close();        socket.close();    }    // 服务端代码    public void server() throws IOException {        ServerSocket serverSocket=new ServerSocket();        serverSocket.bind(new InetSocketAddress(8088));        while (true){            Socket client = serverSocket.accept();            new Thread(()-&gt;{                try {                    InputStream inputStream = client.getInputStream();                    byte[] buffer=new byte[1024];                    int len = inputStream.read(buffer);                    System.out.println(new String(buffer,len));                } catch (IOException e) {                    e.printStackTrace();                }            }).start();        }    }}</code></pre><p>上面这个代码的流程大致如下：</p><ul><li>客户端先准备一个缓冲区，里面的内容是待发送的数据，然后调用输出流的write方法将数据发送到网络中</li><li>服务端准备一个缓冲区来接收数据，调用输入流的read方法将接收的数据读到缓冲区中</li></ul><p>如果更深入的分析，整个过程如图所示</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/IO/socket_copy.png" alt=""></p><p>发送者通过系统调用完成用户态到内核态的切换，然后将数据从用户空间缓冲区拷贝到内核缓冲区，然后通过CPU将内核缓冲区的数据复制到socket缓冲区，然后CPU通知DMA将数据从socket缓冲区通过网卡发送储区，发送完成后DMA产生中断，用户进程从内核态切换到用户态。</p><p>接收者通过系统调用完成用户态到内核态的切换，CPU会通知DMA完成数据从网卡读取到socket缓冲区，完成后将数据从socket缓冲区拷贝到内核缓冲区，然后数据从内核缓冲区复制到用户缓冲区，然后用户进程从内核态切换到用户态。</p><p><strong>问题</strong></p><p>可以明确的一点数据在发送和接受的过程中没有经过任何处理，但是却实现了四次从用户缓冲区向内核缓冲区的拷贝以及四次上下文切换，如果数据量很大，这个拷贝的过程肯定会极大的影响性能。有没有一种方法可以降低拷贝的次数呢？</p><h5 id="2-零拷贝技术"><a href="#2-零拷贝技术" class="headerlink" title="2. 零拷贝技术"></a>2. 零拷贝技术</h5><blockquote><p><strong>零复制</strong>（英语：<strong>Zero-copy</strong>；也译<strong>零拷贝</strong>）技术是指计算机执行操作时，CPU不需要先将数据从某处内存复制到另一个特定区域。这种技术通常用于通过网络传输文件时节省CPU周期和内存带宽。 </p></blockquote><ul><li><p>sendfile</p><p>sendfile函数在两个文件描述符之间传递数据（完全在内核中操作），从而避免了内核缓冲区和用户缓冲区之间的数据拷贝，效率很高。</p></li><li><p>mmap</p><p>mmap技术通过内存映射将文件映射到内核缓冲区，用户空间可以共享内核空间的数据，这样在进行网络传输的时，就可以减少内核空间到用户空间的拷贝次数。</p></li><li><p>sendfile和mmap的对比</p><ol><li>mmap 适合小数据量读写，sendFile 适合大文件传输</li><li>mmap 需要 4 次上下文切换，3 次数据拷贝；sendFile 需要 3 次上下文切换，最少 2 次数据拷贝。</li><li>sendFile 可以利用 DMA 方式，减少 CPU 拷贝，mmap 则不能（必须从内核拷贝到 Socket 缓冲区）</li></ol></li></ul><h5 id="3-java中的零拷贝"><a href="#3-java中的零拷贝" class="headerlink" title="3. java中的零拷贝"></a>3. java中的零拷贝</h5><p>java的nio支持mmap和sendfile</p>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
          <category> java io </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP超时重传</title>
      <link href="/2019/12/31/TCP%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0/"/>
      <url>/2019/12/31/TCP%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h5 id="1-简单的超时与重传举例"><a href="#1-简单的超时与重传举例" class="headerlink" title="1. 简单的超时与重传举例"></a>1. 简单的超时与重传举例</h5><h5 id="2-设置重传超时"><a href="#2-设置重传超时" class="headerlink" title="2. 设置重传超时"></a>2. 设置重传超时</h5><p>TCP超时重传的基础是怎样根据给定的RTT设置RTO，如果RTO小于RTT，会导致不必要的重传，反之如果RTO远大于RTT，会导致网络利用率下降。RTT的测量非常复杂，TCP收到数据确认信息，该信息包含携带一个字节的数据来测量传输该确认信息所需时间，每个此类的测量结果称为一个RTT样本，<strong>TCP首先要根据一段时间的RTT样本值来建立好估计值。然后基于估计值来设置RTO</strong>。</p><ul><li><p><strong>经典方法</strong></p><p>最初的TCP规范采用如下公式计算得到平滑的RTT估计值</p><ul><li><p>先计算平滑RTT估计值（称为SRTT）</p><p><code>SRTT=αSRTT+(1-α)RTT</code> α称为平滑因子，推荐取值为0.8到0.9</p></li><li><p>采用如下公式设置RTO</p><p><code>RTO=min(ubound,max(lbound，(SRTT)β)</code><br>ubound为RTO上界，Ibound为RTO下界，β为时延离散因子，取值为1.3到2.0</p></li></ul><p>对于比较稳定的RTT分布，经典方法可以取得不错的效果，但是如果RTT变化较大，则无法获取期望的结果。</p></li><li><p><strong>标准方法</strong></p><p>标准方法是基于平均值和方差来估计的，但是方差计算复杂，不适合快速TCP的实现，因此使用计算更加简单快速的平均偏差来代替方差。因此需要计算平均值和平均偏差。</p><ul><li><p>计算srtt</p><p><code>srtt=(1-g)(srtt)+g(M)</code></p></li><li><p>计算rttvar</p><p><code>rttvar=(1-h)(rttvar)+(h)(|M-strr|)</code></p></li><li><p>计算RTO</p><p><code>RTO=srtt+4(rttvar)</code></p></li></ul><p><strong>初始值</strong></p><p>根据RFC6298规定RTO初始值为1s，而初始SYN报文段采用的超时间隔为3s。当接收到首个RTT测量结果为M，采用下面的公式初始化。</p><p>  <code>srtt=M</code></p><p>  <code>rttvar=M/2</code></p><p><strong>重传二义性和Karn算法</strong></p><p>假设一个包的传输出现了问题，回进行重传，然后收到确认，但是这个确认是对第一次还是第二次传输的确认存在二义性。</p><p>Karn算法的第一部分：接收到重传数据的确认信息，不更新RTT估计值</p><p>Karn算法的第二部分：每当重传计时器出现超时，使用二进制退避系数更新超时时间直到不发生重传</p><p><strong>带时间戳选项的RTT测量</strong></p><p>TCP时间戳选项可以用于RTT的测量。</p><p>发送方在发送报文段时把当前TCP时钟值放入时间戳字段，接收方在确认该报文段时把时间戳字段值复制到时间戳回送回答字段。因此，发送方在收到确认报文后，利用当前TCP时钟减去时间戳就可以准确计算出RTT。</p></li><li><p><strong>Linux采用的方法</strong></p></li></ul><hr><h5 id="3-基于计时器的重传"><a href="#3-基于计时器的重传" class="headerlink" title="3. 基于计时器的重传"></a>3. 基于计时器的重传</h5><p>一旦TCP发送端得到了基于时间变化的RTT测量值，就能据此设置RTO，发送报文段时确保重传计时器设置合理。在设定计时前，需记录被计时的报文段序列号，若及时收到了该报文段的ACK，那么计时器被取消。之后发送一个新的数据包，需要设定一个新的计时器，并记录新的序列号。若在连接设定的RTO内，没有收到计时报文段的ACK，将会触发超时重传，发生超时重传会通过降低当前数据发送速率来对此进行快速响应。有两种实现方式：第一种方式是基于拥塞控制机制减小发送窗口大小；另一种方法为每当一个重传报文段被再次重传时，则增加RTO的退避因子，当一个报文段出现多次重传时，RTO的值等于RTO乘以一个系数，这个系数呈二进制指数退避变化。</p><hr><h5 id="4-快速重传"><a href="#4-快速重传" class="headerlink" title="4. 快速重传"></a>4. 快速重传</h5><p>快速重传基于接收端的反馈信息来引发重传，而非重传计时器的超时。</p><p>与超时重传相比快速重传能更加有效的修复丢包情况。</p><p>当接收端收到失序数据时，应该立即返回重复ACK，不能延时发送。</p><p><strong>快速重传算法可以概述为：</strong></p><p>TCP发送端在观测到至少<code>dupthresh</code>个重复ACK后，即重传可能丢失的数据分组，而不必等到重传计时器超时。快速重传算法也可以触发拥塞控制。</p><hr><h5 id="5-带选择确认的重传"><a href="#5-带选择确认的重传" class="headerlink" title="5. 带选择确认的重传"></a>5. 带选择确认的重传</h5><p>接收端收到失序的报文段后，不使用选择确认选项会返回一个ACK对按顺序收到的最后一个报文段进行确认，失序的报文段会丢失，发送端需要重传所有失序的报文段，因此会出现重复发送多个报文段的现象，开启选择确认选项后接收放可以在ACK中告诉发送端失序数据的哪些部分需要填补，这样就避免了发送重复的报文。</p><p>每个SACK信息包含32位的序列号，代表接收端存储的失序数据的起始至最后一个序列号。每个ACK可以包含三个SACK信息，即可以向发送端报告三个空缺。</p><p><strong>SACK接收端行为</strong></p><p> TCP连接建立期间如果运行SACK选项，接收端缓存中存在失序数据，就可以生成SACK，并且SACK信息按照接受的先后依次排列。                                                                                                                                                                                  </p><p><strong>SACK发送端行为</strong></p><p>发送端提供SACK功能并合理地利用接收到的SACK块来进行丢失重传，该过程称为选择性重传。发送方选择重传不会清楚缓存中的数据。只有收到普通的ACK时才可清除。选择重传不会启动超时重传计时器，即使接收端仍有失序数据，那么接收端还会发送SACK信息。</p><hr><h5 id="6-伪超时与重传"><a href="#6-伪超时与重传" class="headerlink" title="6. 伪超时与重传"></a>6. 伪超时与重传</h5><p>某些情况下，即使没有出现数据丢失也可能引发重传。这种不必要的重传称为伪重传，其主要造成的原因是伪超时。</p><ul><li><p>重复SACK（DSACK）</p><p>SACK只能解决报文段失序时告知发送端，但是不能够解决接收端收到重复数据的问题。DSACK可以在第一个SACK块中告知接收端收到的重复报文段序列号，DSACK的主要目的是判断何时的重传是不必要的。DSACK接收端的的变化在于运行包含序列号小于累积ACK字段的SACK块，DSACK只包含在单个ACK中，该ACK称为DSACK，与通常的SACK信息不同，DSACK信息不会在多个SACK中重复，因此DSACK较普通的SACK鲁棒性低。</p></li><li><p>Eifel检测算法</p><p>Eifel检测算法利用时间戳选项来检测伪重传，在发现超时重传后，Eifel算法等待接收下一个ACK，若下一个ACK是对原始传输的确认，则判定该重传为伪重传。</p><p>Eifel检测算法的机制：当发生一个重传后，保存其TSV值，当接收到相应分组的ACK后，检查该ACK的TSER部分，如果TSER值小于当前TSV值，则可以判定该ACK对应的是原始传输分组，即该重传是伪重传。</p></li><li><p>前移RTO恢复</p><p>前移RTO恢复时检测伪重传的标准算法，不需要任何TCP选项实现，但只能检测基于重传计时器超时引发的伪重传。</p><p>在超时重传后收到第一个ACK时，TCP会发送新数据，之后再响应后一个达到的ACK。如果其中有一个是重复ACK，则认为此次重传没问题。如果都不是重复ACK，则表示重传是伪重传。</p></li><li><p>Eifel响应算法</p><p>旦判断出现伪重传，则会引发一套标准操作，即Eifel响应算法。</p><p>在重传计时器超时后，它会查看srtt和rttval的值，并且按照如下方式记录新的变量srtt_prev和rttvar_prev</p><p><code>srtt_prev=srtt+2(G)</code></p><p><code>rttvar_prev=rttvar</code></p><p>在判断伪超时后会使用这些值来恢复srtt和rttvar</p></li></ul><hr><h5 id="7-包失序与包重复"><a href="#7-包失序与包重复" class="headerlink" title="7. 包失序与包重复"></a>7. 包失序与包重复</h5><ul><li><p>失序</p><p>在IP网络中出现失序的原因在于IP层不能保证传输是有序进行的，这样做的好处是IP可以选择不同的传输链路来传输数据。失序问题可能发生在正向或反向链路（ACK报文段失序）中。</p><p>如果失序发生在反方向，可能会使得TCP发送端窗口快速前移，接着又可能收到一些显然重复而应被丢弃的ACK，出于TCP的拥塞控制行为，会导致发送端出现不必要的流量突发（每收到一个ACK，拥塞窗口会增加，由于窗口前移了，所以窗口内可以发送的数据突然变多）</p><p>如果失序发生在正方向，TCP可能无法正确识别丢包和失序，导致伪重传，为了解决这个问题，快速重传仅在达到重复阈值后才会被触发。互联网中严重的失序不常见，所有重复阈值设置的相对较小，默认为3。</p></li><li><p>重复</p><p>包的重复会使得接收端生成一系列重复的ACK，从而触发伪快速重传。利用SACK特别是DSACK可以忽略这个问题。</p></li></ul><hr><h5 id="8-目的度量"><a href="#8-目的度量" class="headerlink" title="8. 目的度量"></a>8. 目的度量</h5><p>TCP能不断学习发送端与接收端之间的链路特征。学习的结果显示为发送端记录一些状态变量，如srtt和rttvar，假如连接关闭，这些状态信息会丢失。而较新的TCP实现维护了这些度量值，即使在连接断开后，也能利用保存的之前的信息作为初始值。</p><hr><h5 id="9-重新组包"><a href="#9-重新组包" class="headerlink" title="9. 重新组包"></a>9. 重新组包</h5><p>当TCP超时重传，并不需要完全重传相同的报文段。TCP允许执行重新组包，发送一个更大的报文段来提高性能。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 传输层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 传输层 </tag>
            
            <tag> 超时重传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP拥塞控制</title>
      <link href="/2019/12/30/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/12/30/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h5 id="1-TCP拥塞检测"><a href="#1-TCP拥塞检测" class="headerlink" title="1. TCP拥塞检测"></a>1. TCP拥塞检测</h5><ul><li><p>什么是拥塞</p><p>路由器因无法处理高速率到达的流量而被迫丢弃数据信息的现象称为拥塞。</p></li><li><p>什么是TCP的拥塞控制</p><p>防止网络因为大规模的通信负载而瘫痪，在网络即将进入拥塞状态时减缓TCP传输。</p></li><li><p>怎么判断是否发送了拥塞</p><p>通常如果TCP发生了丢包，TCP首先采取的机制的重传，包括超时重传和快速重传，但是当网络处于拥塞崩溃状态时，TCP发送的包很可能会丢掉，如果选择重传数据包会加剧网络的拥塞状态。</p><p>判断网络拥塞状态是否已发生<strong>通常看丢包情况</strong>。其他的探测方法有，<strong>时延测量</strong>和<strong>显式拥塞通知</strong>。</p></li><li><p>如何减缓TCP发送</p><p>TCP使用滑动窗口机制发送和接收数据，发送速率的控制时通过调节发送窗口大小实现的，但是发送窗口大小只取决于接收方接收数据的能力。而拥塞控制需要考虑网络的拥塞状况，因此引入了一个拥塞窗口，TCP发送窗口要取通知窗口(awnd) 和拥塞窗口(cwnd)两者的最小值。</p></li></ul><hr><h5 id="2-TCP拥塞控制的一些经典算法"><a href="#2-TCP拥塞控制的一些经典算法" class="headerlink" title="2. TCP拥塞控制的一些经典算法"></a>2. TCP拥塞控制的一些经典算法</h5><ul><li><p><strong>慢启动</strong></p><ul><li><p>什么时候使用慢启动算法</p><p>当一个新的TCP连接建立或检测到由重传超时导致的丢包时，需要执行慢启动算法。</p></li><li><p>为什么要使用慢启动算法</p><p>在传输初始阶段，由于未知网络传输能力，需要缓慢探测可用传输资源，防止短时间内大量数据注入导致拥塞。慢启动算法正是针对这一问题设计的。在数据传输之处或者重传计时器检测到丢包后，需要执行慢启动。</p></li><li><p>慢启动算法的流程</p><ul><li>以一定数目的数据段开始慢启动，称为初始窗口（Init Window,IW）。初始窗口的值设为一个SMSS（发送方的最大段大小），但在其他的RFC文档中可以设置较大的值，如果2倍SMSS或3倍SMSS或者4SMSS</li><li>每当发送一个数据包并且收到了ACK，发送窗口会增加1SMSS，也就是经过一个传输轮次，窗口的大小会翻倍。</li><li>发送窗口不能无限制增长下去，慢启动算法执行过程中有一个慢启动阈值，cwnd达到这个阈值后就会进入拥塞避免算法</li></ul></li></ul></li><li><p><strong>拥塞避免</strong></p><p>使用拥塞避免算法，cwnd的值呈线性增长。</p></li><li><p><strong>慢启动和拥塞避免的选择</strong></p><p>设置一个慢启动阈值，当cwnd的值小于阈值则使用慢启动算法，cwnd的值大于阈值则使用拥塞避免算法，cwnd等于阈值时既可以使用慢启动也可以使用拥塞避免。</p><p>注意慢启动阈值不是一个定值，他是动态变化的，当出现重传情况，TCP会认为操作窗口超过的网络传输能力范围，这是慢启动阈值会变成当前窗口大小的一半（慢启动阈值并不一定减小，也有可能增大）</p></li><li><p>Tahoe、Reno以及快速恢复算法</p><ul><li><p>Tahoe</p><p>当发生超时或者快速重传，都会重新进入慢启动状态</p></li><li><p>Reno（标准TCP的基础）</p><p>使用快速恢复机制：在恢复阶段，每收到一个重复ACK，cwnd就能临时增长1SMSS，相应地就意味着收到一个ACK就能发送一个新的数据包，拥塞窗口在一段时间内会急速增长，知道接受到一个不重复的ACK，TCP结束恢复阶段，拥塞恢复到之前的状态。</p></li></ul></li><li><p><strong>标准TCP</strong></p><ul><li><p>TCP连接建立之初首先是慢启动阶段，慢启动阈值通常取一个较大值。当接收到一个好的ACK（表示新的数据传输成功），cwnd会进行相应的更新</p><ul><li>cwnd+=SMSS(慢启动)（这个公式的意思时每收到一个ack，增加一个SMSS,与一次往返时延RTT增加一倍并不矛盾）</li><li>cwnd+=SMSS*SMSS/cwnd(拥塞避免)</li></ul></li><li><p>当收到三次重复ACK（表明丢包需要快速重传的信号）</p><ul><li>更新慢启动阈值(ssthresh)为大于等式（ssthresh=max(在外数据值/2,2*SMSS)）不同的操作系统实现的TCP版本这个值是不一样的</li><li>启用快速重传算法，将cwnd设为ssthresh+3SMSS</li><li>之后每接受到一个重复的ACK，cwnd展示增加1SMSS</li><li>当接受到一个好的ACK，将cwnd重设为ssthresh</li></ul><p>第二步和第三步就是快速恢复</p></li></ul></li></ul><hr><h5 id="3-对标准算法的改进"><a href="#3-对标准算法的改进" class="headerlink" title="3. 对标准算法的改进"></a>3. 对标准算法的改进</h5><p>针对标准的拥塞控制算法也提出了一些新的算法</p><ul><li><p><strong>NewReno</strong></p><ul><li><p>NewReno算法是为了解决什么问题、</p><p>快速恢复带来一个问题，当一个传输窗口出现多个数据包丢失时，一旦一个包重传成功，发送就收到了一个好的ACK，这样快速恢复阶段中cwnd窗口的暂时膨胀就会停止，而事实上丢失的其他数据包可能还没有重传完，导致出现这种情况的ACK称为<strong>局部ACK</strong>。</p><p>Reno算法在接收到局部ACK后就停止拥塞窗口的膨胀阶段，并将其减小至特定值，这种做法可能导致在重传计时器超时之前，传输阶段一直处于空闲状态。（这一段话可以这样理解，发送窗口的数据都发送出去了，但是都没有收到确认，假如说此时窗口缩小，那么发送方明明有数据但是无法发送导致发送通道空闲）</p></li><li><p>NewReno算法是如何改进的</p><p>NewReno算法对快速恢复做了改进，它记录了上一个数据传输窗口的最高序列号（恢复点），仅当接收到序列号不小于恢复点的ACK，才停止快速恢复阶段。这样TCP发送方每接收一个ACK都能够继续发送一个新数据包，从而减少重传超时的发生。</p></li></ul></li><li><p><strong>采用选择确认机制的TCP拥塞控制</strong></p><p>采用SACK机制的TCP，发送方可以知道多个数据段的丢失情况，而这些数据都在发送窗口，因此可以即时发送，然而，这样可能可能会在较短时间内向网络中注入大量数据，削弱拥塞控制的效果。解决方法是TCP会维护一个称为管道的变量，记录在外数据的估计值，不考虑awnd，只有当cwnd-pipe&gt;=SMSS时，SACK TCP可以发送数据。</p></li><li><p><strong>转发确认和速率减半</strong></p><p>当快速重传结束后cwnd值减小，tcp发送新数据之前至少要接收1半的ACK数据包。这样TCP发送端在前一半RTT时间内处于等待状态，在后一半RTT才能开始发送新数据。</p><p>转发确认策略提出了<strong>带界定参数的速率减半算法</strong>（RHBP）</p><p>RHBP的基本操作是，在一个RTT时间内，每重复收到两个重复ACK，TCP发送方可以发送一个新数据包，这样在恢复阶段结束前，TCP已经发送了一部分新数据，数据发送比较均衡，不会集中到RTT的后半段。</p></li><li><p><strong>限制传输</strong></p><p>在Reno算法中，通常需要三次重复ACK表明数据丢失，在窗口较小的情况下，当出现丢包，网络中可能没有足够的包去引发快速重传/快速恢复机制。</p><p>采用限制传输策略，TCP发送方没接收两个连续的重复ACK，就能发送一个新数据包，这样使得网络中的数据包维持一定数量足以触发快速重传。</p><p>限制传输使TCP能在可用窗口较小的情况下更好的工作。避免TCP等待RTO导致吞吐量下降。</p></li><li><p><strong>拥塞窗口校验（CWV）</strong></p><p>当发送方持续发送数据，使得cwnd增加成一个较大的值，然后暂停发送数据，之后cwnd就不能反映网络中的拥塞状态。</p><p>CWV机制是在发送长时间暂停的情况下，cwnd值会衰减。</p><p>空闲发送端和应用受限发送端：</p><ul><li>空闲发送端是指没有新数据发送需求，之前发送的数据都已经收到确认了</li><li>应用受限发送端是指有需要发送的数据，但是由于某些原因无法发送（如处理器正忙）</li></ul><p>长时间空闲</p><ul><li>首先判断距离上次发送操作是否超过一个RTO，如果超过则：<ul><li>更新ssthresh值，设为max(ssthresh,3/4cwnd)</li><li>每经过一个RTT，cwnd的值减半</li></ul></li></ul><p>应用受限的发送端</p><ul><li>已使用窗口记为W_used</li><li>更新ssthresh值，设为max(ssthresh,3/4cwnd)</li><li>cwnd设为cwnd与W_used的平均值</li></ul></li></ul><hr><h5 id="4-伪RTO处理-Eifel响应算法"><a href="#4-伪RTO处理-Eifel响应算法" class="headerlink" title="4. 伪RTO处理 Eifel响应算法"></a>4. 伪RTO处理 Eifel响应算法</h5><p>解决的问题</p><p>若TCP出现突发时延，即使没有丢包，也有可能造成重传超时，这就是伪重传现象，伪重传现象发生TCP会调整ssthresh并将cwnd置为IW，使得tcp进入慢开启状态，浪费传输资源。</p><p>Eifel算法包含检测算法和响应算法两部分。</p><p>Eifel响应算法用于处理重传计时器以及重传计时器超时后的拥塞控制操作。</p><p>在首次发生超时重传时，Eifel算法开始执行，若认为出现伪重传情况，会撤销对ssthresh的修改。在任何情况，若因RTO导致需要改变ssthresh值，都在修改前记录一个特殊的变量pipe_prev=min(在外数据值,ssthresh).</p><p>然后会运行一个检测算法，如果发生伪重传进行如下操作：</p><ul><li>若接受的是包含ECN-Echo标志位的好的ACK，停止操作</li><li>cwnd=在外数据值+min(bytes_Acked,IM)</li><li>ssthresh=pipe_prev</li></ul><hr><h5 id="5-共享拥塞状态信息"><a href="#5-共享拥塞状态信息" class="headerlink" title="5. 共享拥塞状态信息"></a>5. 共享拥塞状态信息</h5><p>相同的主机会建立多条TCP连接，每个tcp连接需要重新进行拥塞处理，建立自己的ssthresh和cwnd。但是实际上，新连接可能会用到相同主机之间的其他连接信息，包括已经关闭的连接或者正在处于活动状态的其他连接。</p><hr><h5 id="6-TCP友好性"><a href="#6-TCP友好性" class="headerlink" title="6. TCP友好性"></a>6. TCP友好性</h5><p>在传输路径中会经常出现几个TCP连接共享一个或多个路由的情况，然而他们并非均匀的共享带宽资源，而是根据其他连接动态地调节分配。但是也可能出现TCP与其他TCP连接恶性竞争传输资源的情况，于是提出了一种基于计算公式的速率控制方式，限制特定环境下TCP连接对带宽资源的使用。该方法称为TCP友好速率控制（RFRC）。</p><hr><h5 id="7-高速环境下的TCP"><a href="#7-高速环境下的TCP" class="headerlink" title="7. 高速环境下的TCP"></a>7. 高速环境下的TCP</h5><p>在BDP较大的高速网络中，传统TCP可能不能表现出良好的性能。因为它的窗口增加需要很长一段时间才能使窗口增至传输链路饱和。也就是说即使没有拥塞发生，TCP也不能很好地利用高速网络。TCP需要经过非常长的一段时间才能完全利用所有带宽。</p><hr><h5 id="8-基于延迟的拥塞控制算法"><a href="#8-基于延迟的拥塞控制算法" class="headerlink" title="8. 基于延迟的拥塞控制算法"></a>8. 基于延迟的拥塞控制算法</h5><ul><li>Vegas算法</li><li>FAST算法</li><li>TCP Westwood算法和Westwood+算法</li><li>复合TCP</li></ul><hr><h5 id="9-缓冲区膨胀"><a href="#9-缓冲区膨胀" class="headerlink" title="9. 缓冲区膨胀"></a>9. 缓冲区膨胀</h5><p>路由器缓存区不是越大越好，过大的缓冲区会导致网络拥塞。</p><hr><h5 id="10-积极队列管理和ECN"><a href="#10-积极队列管理和ECN" class="headerlink" title="10. 积极队列管理和ECN"></a>10. 积极队列管理和ECN</h5><ul><li><p>积极队列管理</p><p>路由器管理队列的方法称为积极队列管理机制（AQM），发生拥塞时，如果尾端没有空闲空间，会将数据包丢弃（尾部丢弃），然后按照FIFO方法转发之前到达的数据包。</p></li><li><p>RED网关机制</p><p>随机早期检测（RED）网关机制能够探测拥塞情况的发送，并且控制数据包标记，这些网关实现了一种衡量平均占用时间的队列管理方法，如果占用队列的时间超过最小值，并且小于最大值，那么这个数据包将被标记上一个不断增长的概率值，如果平均队列占用时间超过了最大值，也可以将数据包丢弃而不是标记它们。</p><p>当接收方接受到一个被标记的包，表明这个数据包经过一个阻塞的路由器，于是会在ACK确认报文中通知发送方阻塞情况。</p></li><li><p>ECN机制</p><p>ECN机制主要在IP层操作，也可以应用于TCP协议之外的其他传输层协议。当一个包含ECN功能的路由器经过长时间的拥塞，接收到一个IP数据包后，它会查看IP头中的ECN传输功能标识，如果有效，负责发送数据包的传输层协议将开启ECN功能，此时路由器会在IP头设置一个已发送拥塞（CE）标识，然后继续向下转发数据报。若拥塞情况不会持续很长时间，路由器不会将CE标识置位。</p><p>如果TCP接收端发现接收到的数据包的cE标识被置位，那么它必须将该标识发送回发送端（也可以添加到SYN+ACK报文段中发送），它会将ACK数据包的ECN-Echo置位。TCP发送端接收到Echo-Echo标识的ACk数据包时，会像探测到单个数据包丢失一样调整cwnd值。</p></li></ul><hr><p>*参考：《TCP/IP协议详解 卷一：协议》Kevin R. Fall W.Richard Stevens</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 传输层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> tcp </tag>
            
            <tag> 拥塞控制 </tag>
            
            <tag> 传输层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP连接管理</title>
      <link href="/2019/12/29/TCP%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/"/>
      <url>/2019/12/29/TCP%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id="1-TCP三次握手"><a href="#1-TCP三次握手" class="headerlink" title="1. TCP三次握手"></a>1. TCP三次握手</h5><p>TCP是一种面向连接的单播协议，在发送数据之前，通信双方必须彼此建立一条连接。一个tcp连接由一个四元组构成（源ip地址，源端口号，目的ip地址，目的端口号）</p><p><strong>三次握手流程</strong>：</p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/iamge-20200131221035.png" style="zoom:50%;" /><ul><li><p>主动连接者（客户端）向服务端发送一个SYN报文(TCP头部的SYN位置位并且随机生成一个seq序列号)</p></li><li><p>服务端发送自己的SYN报文段作为响应，同时这个报文段中携带了对上一个报文段的ACK确认（ack确认号为上一个报文的的序列号+1）</p></li><li><p>客户端收到第二个报文后，会对服务端的同步报文段进行确认</p></li></ul><hr><h5 id="2-TCP四次挥手"><a href="#2-TCP四次挥手" class="headerlink" title="2. TCP四次挥手"></a>2. TCP四次挥手</h5><p>连接释放比连接建立更加复杂，涉及到的知识点也更多</p><p><strong>四次挥手过程：</strong></p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/image-20200131221721.png" style="zoom:50%;" /><ul><li><p>主动关闭者发送过一个FIN报文段给被动关闭者，并且指明当前的序列号（这个报文段好可以携带同一个ack对上一个报文进行确认，这是可选的不是必须的）</p></li><li><p>连接的被动关闭者序列号加1发送ACK报文段给主动关闭者，此时主动关闭者到被动关闭者这一方向的连接就关闭了，主动关闭者不能发送数据给被动关闭者但是被动关闭者发送给主动关闭者的数据依然要接收。此时处于半关闭状态</p></li><li><p>被动关闭者发送FIN报文段个主动关闭者</p></li><li><p>主动关闭者对FIN报文段进行确认，此时连接已经释放，但是主动关闭者还要等一段时间</p></li></ul><hr><h5 id="3-TCP状态转换"><a href="#3-TCP状态转换" class="headerlink" title="3. TCP状态转换"></a>3. TCP状态转换</h5><p><strong>TCP三次握手状态变化</strong></p><p>客户端和服务端一开始都是处于<strong>CLOSE</strong>关闭状态，服务端需要先监听端口，此时处于<strong>Listen</strong>状态，具体变化过程如下：</p><ul><li><p>第一次握手（客户端-&gt; 服务端）</p><p>客户端发送完之后处于<strong>SYN_SENT</strong>(同步已发送)</p></li><li><p>第二次握手（服务端-&gt;客户端）</p><p>服务端收到第一次握手报文后立即确认，处于<strong>SYN_RESVD</strong>(同步已接收)</p></li><li><p>第三次握手（客户端发送，服务端接收）</p><p>客户端收到第二个报文后立即确认，发送完客户端处于<strong>ESTABLISHED</strong>状态（已建立连接）</p><p>服务端收到第三个报文后处于ESTABLISHED状态（已建立连接）</p></li></ul><p><strong>TCP四次握手状态变化</strong></p><ul><li><p>第一个握手报文(主动关闭者-&gt; 被动关闭者)</p><p>主动关闭者发送完报文后处于<strong>FIN-WAIT-1</strong>状态</p></li><li><p>第二个握手报文(被动关闭者-&gt; 主动关闭者)</p><p>被动关闭者发送后处于<strong>CLOSE_WAIT</strong>状态</p><p>主动关闭者接收后处于<strong>FIN-WAIT-2</strong>状态</p></li><li><p>第三个握手报文(被动关闭者-&gt; 主动关闭者)</p><p>被动关闭者发送后处于<strong>LAST_ACK</strong>状态</p></li><li><p>第四个握手报文(主动关闭者-&gt; 被动关闭者)</p><p>主动关闭者发送后处于<strong>TIME-WAIT</strong>状态</p><p>被动关闭者发送后处于CLOSE状态</p></li></ul><p><strong>TCP状态详细</strong></p><p>TCP连接与释放总共涉及到11种状态，上面已经涉及到10种，还有一种状态是<strong>CLOSEING</strong>，下面是详细的TCP状态转换图。</p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/image-20200131222704.png"  /><ul><li><p>TIME_WAIT状态</p><p>在第三个挥手报文到达主动关闭方时，主动关闭方进入TIME_WAIT状态。TIME_WAIT状态也称2MSL等待状态，在该状态，TCP将会等待两倍于最大段生存期，MSL的值是可以修改的，一般为30秒、1分钟或者2分钟。</p><p>TIME_WAIT状态的意义</p><ul><li><p>能够让TCP主动关闭者有机会重新发送ACK以避免丢失的情况</p><p>假设第四次挥手ACK报文丢失，那么被动关闭会重新发送FIN报文，如果TCP主动关闭在不处于TIME_WAIT状态而是直接关闭了，那么被动关闭在就收不到ACK报文，会一直重发。</p></li><li><p>允许老的数据包在网络中消逝。当TCP处于等待状态，通信双方将本次连接定义为不可用，        </p><p>因为TIME_WAIT状态持续2MSL，就可以保证当成功建立一个TCP连接的时候，来自之前连接的重复分组已经在网络中消逝。</p></li></ul></li><li><p>静默时间概念</p><p>假设某台主机的某个连接处于TIME_WAIT状态，然后突然主机关机并在MSL内重启，重启后主机并不知道上次的连接处于TIME_WAIT状态，于是使用关机前的ip和端口建立连接就有可能出现问题。</p><p>为了解决这个问题，引入了静默时间的概念，静默时间是指主机崩溃或重启后TCP协议应该在创建新的连接前等待MSL，但是实际上很多实现并没有遵循这一点</p></li><li><p>FIN_WAIT_2状态</p><p>TCP主动关闭发送FIN报文并收到ACK后会进入FIN_WAIT_2状态，而被动关闭者进入CLOSE_WAIT状态。假如被动关闭者迟迟不发生FIN报文段，那么主动关闭者会一直处于FIN_WAIT_2状态。</p><p>为了防止TCP进入FIN_WAIT_2这一无限等待状态，如果负责主动关闭的进程执行的是一个完全关闭操作而不是半关闭操作，那么就会设置一个计时器，如果计时器超时网络是空闲的，那么TCP连接就会转移到CLOSE状态，在linux中默认是60s。</p></li><li><p>同时打开和同时关闭的状态转换</p><ul><li><p>同时打开</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/image-20200201111707.png" alt=""></p><p>可以认为是四次握手。</p></li><li><p>同时关闭</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/image-20200201111640.png" alt=""></p><p>出现了最后一种状态<strong>CLOSEING</strong>状态，此时不会进入FIN_WAIT_2状态</p></li></ul></li></ul><hr><h5 id="4-TCP为什么要三次握手建立连接"><a href="#4-TCP为什么要三次握手建立连接" class="headerlink" title="4. TCP为什么要三次握手建立连接"></a>4. TCP为什么要三次握手建立连接</h5><p><strong>TCP是一种可靠的传输协议，既要实现数据的可靠传输又要兼顾效率，三次握手恰好可以满足这两方面的需求</strong>。如果是两次握手可能会出现这样的问题，客户端发送的一个连接请求报文可能在网络中延迟，直到客户端和服务端的连接已经释放后才到达服务端，服务端接受到这个连接请求报文后会进行确认，假如没有第三次握手，服务端就以为连接建立了，而客户端此时并没有发送建立连接的请求，所以不会管收到的确认报文，这种情况下客户端认为没有建立连接，服务端却认为建立了连接等待数据的传送会导致服务端资源的浪费。这种情况出现的问题是，TCP的一端无法确认自己收到的报文段是不是合法的。</p><p>为了实现可靠传输，TCP使用序列号来标识每一个报文段，通信的双方首先要同步自己的初始序列号，初始序列号是随机产生的。只有TCP双方知道了对方的初始序列号，才能够判断接收的数据报文是不是本次连接的，所以<strong>TCP三次握手整个过程就是以尽可能小的代价同步双方的初始序列号</strong>。具体来说第一次握手的过程，发送方会选择一个随机的序列号作为自己的初始序列号发送给接收方，接收方收到后并不知道这个序列号是不是对方此次连接的初始序列号，于是会进行确认并且携带自己的初始序列号，发送方收到之后可以知道接受方的初始确认号，因为这是一个确认报文，所以还可以知道接收方已经收到了它的初始序列号，但是此时接收方还是不能够判断自己收到的初始确认号是不是本次连接的，于是发送方会发送第三次报文给接收方，接收方收到后就能够确定自己收到的初始序列号是本次连接的，这样经过三次握手通信双方都知道了各自的初始序列号，因为初始序列号是随机生成的，在有些操作系统的实现是每4微秒增加1，需要大概4小时的时间才会重复，这个时间远远大于报文段在网络中的最长寿命，因此每一个连接都有独一无二的初始序列号，知道了对方的初始序列号就能判断接收到的是不是一个合法的报文段，从而实现确认和重传等操作，另外初始报文的获取是随机的，黑客很难伪造一个报文段来干扰这次连接。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 传输层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> tcp </tag>
            
            <tag> 连接管理 </tag>
            
            <tag> 传输层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议报文</title>
      <link href="/2019/12/29/TCP%E5%8D%8F%E8%AE%AE%E6%8A%A5%E6%96%87/"/>
      <url>/2019/12/29/TCP%E5%8D%8F%E8%AE%AE%E6%8A%A5%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h5 id="1-协议报文"><a href="#1-协议报文" class="headerlink" title="1.协议报文"></a>1.协议报文</h5><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/TCP%E5%8D%8F%E8%AE%AE%E6%8A%A5%E6%96%87/image-20200202101221.png" style="zoom:50%;" /><hr><h5 id="2-协议字段"><a href="#2-协议字段" class="headerlink" title="2. 协议字段"></a>2. 协议字段</h5><ul><li><p><strong>源端口、目的端口</strong></p><p>源端口、目的端口、源IP地址、目的IP地址组成的四元组唯一标识一个连接。其中源IP地址与目的IP地址在IP首部中标识。源端口与目的端口在TCP首部中标识。端口使用16位表示，范围为0到65535。端口分类如下：</p><ul><li><p>系统端口号<code>0-1023</code></p><p>这些端口指派给了TCP/IP最重要的一些应用程序</p></li><li><p>登记端口号<code>1024-49151</code></p><p>服务器端使用的端口号，这类端口号是为没有熟知端口号的应用程序使用</p></li><li><p>短暂端口号<code>49152-65535</code></p><p>客户端进程运行时动态选择的短暂端口号</p></li></ul></li><li><p><strong>序列号</strong></p><p>序列号字段标识了TCP发送端到TCP接收端的数据流的一个字节，该字节代表着包含该序列号的报文段的数据中的第一个字节。</p></li><li><p><strong>确认序号</strong></p><p>确认号用于指明在接收方已经顺序收到的最大字节。</p></li><li><p><strong>首部长度</strong></p><p>指明了头部的长度，共四位，表示的最大值为15，但是单位是4字节，也就是说TCP的首部最大为60字节，因为固定首部长度为20字节，因此选项可使用40字节。</p></li><li><p><strong>保留位</strong></p><p>一个六位，实际上新的实现只有四位，有两位有作用</p><ul><li><p>CWR</p><p>发送方降低它的发送速率</p></li><li><p>ECE</p><p>发送方接受到了一个更早的拥塞通告</p></li></ul></li><li><p><strong>标志位</strong></p><ul><li><p>URG</p><p>紧急选项，置位后紧急指针有效</p></li><li><p>ACK</p><p>表示这是一个ACK确认报文</p></li><li><p>PSH</p><p>接收方应该尽快将这个数据交给应用进程</p></li><li><p>PST</p><p>因为某些错误导致重置连接</p></li><li><p>SYN</p><p>初始化一个连接的同步序列号</p></li><li><p>FIN</p><p>表示这是一个释放连接的报文</p></li></ul></li><li><p><strong>窗口大小</strong></p><p>TCP流量控制由每个端点使用窗口大小字段来通告一个窗口大小来完成。这个窗口大小是字节数、由ACK号指定，窗口大小为16位限制了窗口大小为65535字节，但是可以通过窗口缩放选项对这个值进行缩放。</p></li><li><p><strong>校验和</strong></p><p>TCP接收端使用校验和来校验接受的数据是否出现了差错。</p></li><li><p><strong>紧急指针</strong></p><p>只有在URG位字段被设置时才有效。这个“指针”是一个必须要加到报文段的序列号字段上的正偏移，以产生紧急数据的最后一个字节的序列号。TCP的紧急机制是一种让发送方给另一端提供特殊标志数据的方法。</p></li><li><p><strong>选项</strong></p></li><li><p><strong>数据</strong></p><p>数据部分是可选的</p></li></ul><hr><h5 id="3-TCP常见选项"><a href="#3-TCP常见选项" class="headerlink" title="3. TCP常见选项"></a>3. TCP常见选项</h5><ul><li><p>最大段大小选项</p><p>最大段大小是指TCP协议所允许的从对方接收到的最大报文段，因此这也是通信对方在发送数据时能够使用的最大报文段。当建立一条TCP连接时，通信的每一方都要在SYN报文段的MSS选项中说明自己允许的最大段大小。最大段大小使用16位表示，默认数值为536字节。因为以太网的MTU为1500字节，为了使得TCP数据报向下传递不分片，减去20字节的ip首部和20字节的tcp首部，MSS一般去1460。</p></li><li><p>选择确认选项</p><p>选择确认选项让发送方能够了解接受方当前的空洞，从而更好的进行重传工作。SACK信息包含在SACK选项中，一个报文段中发送的最大SACK块数目为3。</p></li><li><p>窗口缩放选项</p><p>TCP首部使用16位的窗口大小来控制发送方窗口大小，但是16位最多能表示65535个字节，在一些高速的网络中显然不够。因此提供窗口缩放选项。实际的窗口数值扩大至原先的2<sup>s</sup>。其中s是比例因子，取值为0到14。所以使用窗口缩放选项窗口的最大值为(2<sup>16</sup>*x2<sup>14</sup>)，这个值接近1GB。</p></li><li><p>时间戳选项与防绕回序列号</p><p>时间戳选项（TSOPT）要求发送方在每一个报文段中添加<strong>2个4字节</strong>的时间戳数值。</p><p>作用：</p><ul><li><p>利用时间戳计算RTT</p><p>发送方将发送时的TCP时钟值写入时间戳选项，接收端收到后将这个值复制到ACK确认报文中返回，发送方收到ACK后，利用当前的TCP时钟值减去时间戳选项的值就可以得到RTT。</p></li><li><p>防绕回序列号</p><p>TCP报文序列号只有32位，当超过后就会重新从1开始，在一个高速网络中，一个连接中可能存在相同序列号，使用时间戳选项可以判断相同序列号的报文的发送顺序。</p></li></ul></li><li><p>用户超时选项</p><p>用户超时数值指明了TCP发送者在确认对方未能成功接受数据之前愿意等待ACK确认的时间，通常通过本地TCP协议配置，用户超时选项可以将用户超时数值告诉连接的对方，让对方可以采取某些操作。</p><p>用户超时数值的计算公式:</p><p><code>USER_TIMEOUT=min(U_LIMIT,max(ADV_UTO,REMOTE_UTO,L_LIMIT))</code></p><p>ADV_UTO表示本端设置的数值，REMOTE_UTO是远端告知的数值，U_LIMIT是上界，L_LIMIT是下界。</p></li><li><p>认证选项</p><p>TCP认证选项提供各种加密算法。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 传输层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> tcp </tag>
            
            <tag> 传输层 </tag>
            
            <tag> TCP协议报文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础知识总结</title>
      <link href="/2019/12/28/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/28/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="1-初识Redis"><a href="#1-初识Redis" class="headerlink" title="1. 初识Redis"></a>1. 初识Redis</h4><p><a href="https://zhuanlan.zhihu.com/p/42272979" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/42272979</a></p><p><strong>1. Redis有哪些特性</strong></p><p>首先<strong>Redis的速度非常快</strong>，并且<strong>Redis支持多种数据结构</strong>，还<strong>提供了许多丰富的功能</strong>如提供了键过期的功能，发布订阅功能，支持Lua脚本等功能；<strong>Redis简单稳定</strong>，源码非常简洁；<strong>支持的客户端语言很多</strong>；<strong>支持持久化</strong>，发生断电不会丢失数据；提供了<strong>主从复制的功能</strong>；提供了<strong>集群的功能</strong>，适合分布式环境</p><p><strong>2. Redis为什么快</strong></p><ol><li><p><strong>完全基于内存</strong>，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)；</p></li><li><p><strong>数据结构简单，对数据操作也简单</strong>，Redis中的数据结构是专门进行设计的；</p></li><li><p>采用<strong>单线程，避免了不必要的上下文切换和竞争条件</strong>，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p></li><li><p><strong>使用多路I/O复用模型，非阻塞IO</strong>；</p></li><li><p>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p></li></ol><p><strong>3. Redis有哪些应用场景</strong></p><ul><li><p>缓存</p><p>redis提供了键值过期时间设置，并且也提供了灵活控制最大内存和内存溢出后的淘汰策略，适合作为缓存。</p></li><li><p>排行榜系统</p><p>Redis提供类表和有序集合数据结构，方便实现各种排行榜</p></li><li><p>计数器应用</p><p>Redis天然支持计数功能且性能非常好。</p></li><li><p>社交网络</p><p>redis可以很方便的实现点赞，共同好友等功能</p></li><li><p>消息队列系统</p><p>Redis提供了发布订阅功能和阻塞队列的功能</p></li></ul><p><strong>4. Redis不适合什么样的应用</strong></p><p>使用Redis，基于成本考虑，最大的问题是内存的价格比较昂贵，而Redis将数据全部放在内存中，而基于内存又提供了快速访问的能力，如果一个应用中的数据量比较大并且不需要经常访问就不适合使用Redis来存放这些量大且冷门的数据。</p><hr><h4 id="2-Redis的数据结构"><a href="#2-Redis的数据结构" class="headerlink" title="2. Redis的数据结构"></a>2. Redis的数据结构</h4><hr><h4 id="3-小功能大用处"><a href="#3-小功能大用处" class="headerlink" title="3. 小功能大用处"></a>3. 小功能大用处</h4><p><strong>1. Redis命令执行的生命周期是怎样的</strong></p><p>发送命令-&gt;命令排队-&gt;命令执行-&gt;返回结果</p><p><strong>2. 如何统计执行比较慢的命令</strong></p><p>通过参数来设置慢查询阈值，执行时间超过这个阈值的命令就会被记录下来，使用<code>slowlog</code>命令就可以获取到慢查询日志。</p><p><strong>3. 什么是pipeline机制</strong></p><p>在redis中某些操作提供了批量操作的命令，但是许多操作是没有对应的批量操作的命令，所以在执行一批大量的命令时，总的执行包括真正的执行时间以及发送命令和接受响应的往返时间，往返时间取决于网络的状况，为了降低网络时延的影响，pipeline提供了将一组命令组合在一起发送给服务端的能力，这样就只有一次往返时间，提高了命令执行的效率。</p><p><strong>4. redis对事务的支持情况</strong></p><p>redis只支持简单的事务，这种事务不具备完整的ACID特性，使用事务的时候执行<code>multi</code>开启事务，后面的命令都在同一个事务中，使用<code>exec</code>来提交事务或者使用<code>exec</code>命令来取消事务，如果事务中的操作中有命令语法错误了整个事务将无法执行，但是redis的事务是不支付撤销的，在某些场景下可以使用类似乐观锁的机制来确保事务中的key没有被其他客户端修改过。</p><p><strong>5. Lua语言在Redis中扮演的角色</strong></p><p>Lua语言是一门由C语言实现的脚本语言，在Redis可以通过lua语言实现自定义的命令。</p><p><strong>6. 介绍一下Redis的Bitmaps</strong></p><p>bitmaps是一种数据结构，叫做位图，他的基本单位是二进制位，每个位只能取0或者1。在Redis中为bitmaps提供了许多位操作的功能，并且bitmap本身在redis中不是一种独立的数据结构，他的底层是字符串，因为bitmaps的基本单元是二进制位，所以数据结构占用的空间很小，适合那些只需要统计两种状态且要求空间很少的应用，比如说统计一亿用户中每天的活跃用户。</p><p><strong>7. 介绍一下HyperLogLog</strong></p><p>HyperlogLog的底层是字符串类型，通过HyperLogLog可以利用极小的内存空间完成独立总数的统计，但是统计值不是完全精确的，具有一定的误差，官方给出的失误率是0.81%。redis中实现的HyperLogLog，只需要12K内存，在标准误差0.81%的前提下，能够统计<code>2^64</code>个数据。但是，因为HyperLogLog只会根据输入元素来计算基数，而不会储存输入元素本身，所以HyperLogLog不能像集合那样，返回输入的各个元素。</p><p><strong>8. Redis的发布订阅功能</strong></p><p>Redis提供了基于“发布订阅”模式的消息机制，在这种模式下，消息发布者和订阅者不直接通信，发布者客户端向指定的频道发布消息，订阅该冰岛的每个客户端都可以收到该消息。</p><ul><li><p>发布消息</p><p><code>publish channel message</code></p></li><li><p>订阅消息</p><p><code>subscribe channel [频道名称]</code></p></li><li><p>取消订阅</p><p><code>unsubscribe [频道名称]</code></p></li></ul><p>Redis的消息队列系统比专业的消息队列系统还差很多，但是足够的简单</p><p><strong>9. GEO</strong></p><p>GEO的全称是地理信息(经纬度)定位，支持存储地理位置信息来实现如附近的人，摇一摇这类依赖于地理位置信息的功能。</p><hr><h4 id="4-客户端"><a href="#4-客户端" class="headerlink" title="4. 客户端"></a>4. 客户端</h4><p><strong>1. java中如何操作redis</strong></p><p>jedis</p><hr><h4 id="5-持久化"><a href="#5-持久化" class="headerlink" title="5. 持久化"></a>5. 持久化</h4><p><a href="https://juejin.im/post/5d09a9ff51882577eb133aa9" target="_blank" rel="noopener">https://juejin.im/post/5d09a9ff51882577eb133aa9</a></p><p><strong>1. 什么是持久化机制</strong></p><p>redis的数据是存放在内存中，由于内存的特点是断电后数据丢失，而redis需要保证redis服务器重启后数据还在，所以需要一种机制，这种机制就是持久化机制，他可以把数据持久化到物理磁盘中人，然后重启后从磁盘中读取数据恢复内存中的数据。</p><p><strong>2. Redis中有哪些持久化机制，默认是哪种</strong></p><p>Redis支持两种持久化机制，RDB和AOF，默认开启的是RDB</p><p><strong>3. 介绍一下RDB</strong></p><p><code>RDB</code>是一种快照存储持久化方式，具体就是将<code>Redis</code>某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为<code>dump.rdb</code>，而在<code>Redis</code>服务器启动时，会重新加载<code>dump.rdb</code>文件的数据到内存当中恢复数据。</p><p><strong>4. 怎么开启RDB</strong></p><p>可以使用命令<code>save</code>和<code>bgsave</code>,两者的区别是<code>save</code>命令会阻塞Redis服务器直到rdb完成，而<code>bgsave</code>会fork一个子进程来处理不会发生阻塞。也可以通过服务器配置文件来配置触发rdb的条件</p><p><strong>5. 有哪些配置触发rdb条件的配置参数</strong></p><pre><code class="java"># 900s内至少达到一条写命令save 900 1# 300s内至少到达10条写命令save 300 10# 60s内至少达到10000条写命令save 60 10000</code></pre><p><strong>4. 生成rdb文件的过程</strong></p><ol><li>生成临时rdb文件，并写入数据</li><li>完成数据写入，用临时文件替代正式rdb文件</li><li>删除原来的rdb文件</li></ol><p><strong>5. rdb的优点</strong></p><ol><li>与AOF方式想比，通过rdb文件恢复数据比较快</li><li>rdb文件非常紧凑，适合数据备份</li><li>通过rdb进行数据备份，由于使用了子进程，所以对redis服务器的性能影响比较小</li></ol><p><strong>6. rdb的几个缺点</strong></p><ul><li><p>如果服务器宕机的话，采用<code>RDB</code>的方式会造成某个时段内数据的丢失，比如我们设置10分钟同步一次或5分钟达到1000次写入就同步一次，那么如果还没达到触发条件服务器就死机了，那么这个时间段的数据会丢失。</p></li><li><p>使用save命令会造成服务器阻塞，直接数据同步完成才能接收后续请求。</p></li><li><p>使用bgsave命令在forks子进程时，如果数据量太大，forks的过程也会发生阻塞，另外，forks子进程会耗费内存。</p></li></ul><p><strong>7. 什么是AOF</strong></p><p><code>AOF</code>持久化方式会记录客户端对服务器的每一次写操作命令，并将这些写操作以<code>Redis</code>协议追加保存到以后缀为<code>aof</code>文件末尾，在Redis服务器重启时，会加载并运行<code>aof</code>文件的命令，以达到恢复数据的目的。</p><p><strong>8. 如何开启AOF持久化方式</strong></p><p>Redis默认不开启AOF持久化方式，我们可以在配置文件中开启并进行更加详细的配置，如下面的redis.conf文件</p><pre><code class="properties"># 开启aof机制appendonly yes# aof文件名appendfilename &quot;appendonly.aof&quot;# 写入策略,always表示每个写操作都保存到aof文件中,也可以是everysec或noappendfsync always# 默认不重写aof文件no-appendfsync-on-rewrite no# 保存目录dir ~/redis/</code></pre><p><strong>9. 有哪些AOF的写入策略</strong></p><p>通过<code>appendfsync</code>来配置，可以取三个值</p><ul><li><p>always</p><p>客户端的每一个写操作都保存到<code>aof</code>文件当，这种策略很安全，但是每个写请注都有IO操作，所以也很慢。</p></li><li><p>everysec</p><p><code>appendfsync</code>的默认写入策略，每秒写入一次<code>aof</code>文件，因此，最多可能会丢失1s的数据。</p></li><li><p>no</p><p><code>Redis</code>服务器不负责写入<code>aof</code>，而是交由操作系统来处理什么时候写入<code>aof</code>文件。更快，但也是最不安全的选择，不推荐使用。</p></li></ul><p><strong>10.AOF文件太大了这么办</strong></p><p>可以进行AOF重写，通过重写在aof文件中只保存命令的最小集</p><p><strong>11. 重写的作用是什么</strong></p><p>aof不进行重写的话会有很多冗余的命令，这会使得aof越来越大，加载aof文件进行恢复时会很慢，重写aof文件的目的就是加快恢复的速度。</p><p><strong>12. 有哪些重写方式</strong></p><p>第一章是每次同步aof内容时就会发生重写，另一种是只要客户端向服务端发送bgrewriteaof命令的时候才会发生重写。</p><p><strong>13. AOF文件损坏了怎么办</strong></p><p>在写入aof日志文件时，如果Redis服务器宕机，则aof日志文件文件会出格式错误，在重启Redis服务器时，Redis服务器会拒绝载入这个aof文件，可以通过以下步骤修复aof并恢复数据。</p><ol><li>备份现在aof文件，以防万一。</li><li>使用redis-check-aof命令修复aof文件，该命令格式<code>redis-check-aof -fix file.aof</code></li></ol><p><strong>14. AOF的优点</strong></p><p>AOF只是追加日志文件，因此对服务器性能影响较小，速度比RDB要快，消耗的内存较少。</p><p><strong>15. AOF的缺点</strong></p><ol><li>AOF方式生成的日志文件太大，即使通过AFO重写，文件体积仍然很大。</li><li>恢复数据的速度比RDB慢。</li></ol><p><strong>16. AOF和RDB的对比</strong></p><table><thead><tr><th>方式</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>会丢数据</td><td>由策略来决定</td></tr><tr><td>轻重</td><td>重</td><td>轻</td></tr></tbody></table><p><strong>17. rdb和aof同时开启的情况下，先使用哪种机制</strong></p><p>当RDB与AOF两种方式都开启时，Redis会优先使用AOF日志来恢复数据，因为AOF保存的文件比RDB文件更完整。</p><hr><h4 id="6-复制"><a href="#6-复制" class="headerlink" title="6. 复制"></a>6. 复制</h4><p><strong>1. redis复制功能的作用</strong></p><p>如果使用一台redis服务器来保存数据，当这个服务器不可用的时候，整个服务就会不可用，为了解决这个问题，可以通过提供相同数据的多个副本，这样当一个节点不可用，整个服务并不受影响，后续可以将不可用的服务器恢复。</p><p><strong>2. 如何建立复制</strong></p><p>参与复制的结点可以分为主节点和从节点，默认情况下redis都是主节点，并且每个从节点只能有一个主节点，一个主节点可以有多个从节点，复制的数据是单向的，只能由主节点复制到从节点，配置的方式有三种</p><ul><li>在配置文件中加入slaveof 主节点host，主节点port</li><li>在redis服务器启动命令后加–slaveof 主节点host，主节点port</li><li>redis服务器启动使用命令slaveof 主节点host，主节点port</li></ul><p><strong>3. 如何断开复制</strong></p><p>在从节点中执行<code>slaveof no one</code>命令，之后这个从节点将晋升为主节点</p><p><strong>4. 怎么保证主从复制的安全性</strong></p><p>对于数据比较重要的节点，主节点会通过设置<code>requirepass</code>参数进行密码验证，这时所有的客户端访问必须使用<code>auth</code>命令实行校验。</p><p><strong>5. 从节点可以进行写操作吗</strong></p><p>默认情况下，从节点使用slave-read-only=yes配置为只读模式。由于复制只能从主节点到从节点，对于从节点的任何修改主节点都无法感知，修改从节点会造成主从数据不一致。因此建议线上不要修改从节点的只读模式。</p><p><strong>6. 有哪些主从复制的拓扑结构，他们都有哪些特点</strong></p><p><strong>一主一从结构</strong>是最简单的复制拓扑结构，用于主节点出现宕机时从节点提供故障转移支持。<strong>一主多从结构</strong>（又称为星形拓扑结构）使得应用端可以利用多个从节点实现读写分离（见图6-5）。对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力。<strong>树状主从结构</strong>（又称为树状拓扑结构）使得从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制。通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量</p><p><strong>7. 主从复制的原理，复制过程是怎么样的</strong></p><p>执行slaveof命令，从节点先保存主节点的ip和端口信息，然后从节点会与主节点建立网络连接，连接成功之后从节点会发生ping请求进行首次通信，主节点会返回pong命令。如果主节点设置了权限认证则需要认证权限，认证完之后就可以进行数据集的同步，首次建立连接，主节点会把所有的数据全部发送个从节点，之后如果主节点有新的数据，会将命令持续复制给从节点，保证主从数据的一致性。</p><p><strong>8. 如何实现数据同步</strong></p><p>通过psync命令来完成主从数据同步，同步过程有两种，全量复制和部分复制</p><p><strong>9. 什么是全量复制，什么是部分复制</strong></p><p><strong>全量复制</strong>一般用于初次复制场景，它会把主节点全部数据一次性发送个从节点。他的缺点是当数据流比较大时，对主从节点和网络会造成很大的开销。<strong>部分复制</strong>是用来处理主从复制中因网络闪断等原因造成的数据丢失场景，当从节点再次连上主节点后，如果条件允许，主节点会补发丢失数据给从接待您，因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。</p><p><strong>10. psync命令需要哪些组件的支持</strong></p><p>主从节点各自的复制偏移量，主从节点复制积压缓冲区，主节点运行id。</p><ul><li><p>复制偏移量</p><p>参与复制的主从节点都会维护自身复制偏移量。主节点（master）在处理完写入命令后，会把命令的字节长度做累加记录，从节点（slave）每秒钟上报自身的复制偏移量给主节点，因此主节点也会保存从节点的复制偏移量，从节点在接收到主节点发送的命令后，也会累加记录自身的偏移量，通过对比主从节点的复制偏移量，可以判断主从节点数据是否一致。判断主从节点复制相差的数据量，根据这个差值判定当前复制的健康度。如果主从之间复制偏移量相差较大，则可能是网络延迟或命令阻塞等原因引起</p></li><li><p>复制积压缓冲区</p><p>复制积压缓冲区是保存在主节点上的一个固定长度的队列，默认大小为1MB，当主节点有连接的从节点（slave）时被创建，这时主节点（master）响应写命令时，不但会把命令发送给从节点，还会写入复制积压缓冲区。由于缓冲区本质上是先进先出的定长队列，所以能实现保存最近已复制数据的功能，用于部分复制和复制命令丢失的数据补救</p></li><li><p>运行id</p><p>每个Redis节点启动后都会动态分配一个<strong>40位的十六进制字符串</strong>作为运行ID。运行ID的主要作用是用来唯一识别Redis节点，比如从节点保存主节点的运行ID识别自己正在复制的是哪个主节点。</p></li></ul><p><strong>11. fsync命令的流程</strong></p><ul><li>从节点（slave）发送psync命令给主节点，参数runId是当前从节点保存的主节点运行ID，如果没有则默认值为，参数offset是当前从节点保存的复制偏移量，如果是第一次参与复制则默认值为-1。</li><li>主节点（master）根据psync参数和自身数据情况决定响应结果<ul><li>如果回复+FULLRESYNC{runId}{offset}，那么从节点将触发全量复制流程</li><li>如果回复+CONTINUE，从节点将触发部分复制流程。</li><li>如果回复+ERR，说明主节点版本低于Redis2.8，无法识别psync命令</li></ul></li></ul><p><strong>12. 全量复制的流程</strong></p><ul><li>发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行ID，所以发送psync-1。</li><li>主节点根据psync-1解析出当前为全量复制，回复+FULLRESYNC响应。</li><li>从节点接收主节点的响应数据保存运行ID和偏移量offset</li><li>主节点执行bgsave保存RDB文件到本地（也可以使用无盘复制不用保存到本地）</li><li>主节点发送RDB文件给从节点，从节点把接收的RDB文件保存在本地并直接作为从节点的数据文件</li><li>对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据一致性</li><li>从节点接收完主节点传送来的全部数据后会清空自身旧数据</li><li>从节点清空数据后开始加载RDB文件</li><li>从节点成功加载完RDB后，如果当前节点开启了AOF持久化功能，它会立刻做bgrewriteaof操作</li></ul><p><strong>13. 部分复制的流程</strong></p><ul><li>当主从节点之间网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点故障并中断复制连接</li><li>主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内部存在的复制积压缓冲区，依然可以保存最近一段时间的写命令数据，默认最大缓存1MB</li><li>当主从节点网络恢复后，从节点会再次连上主节点</li><li>当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。因此会把它们当作psync参数发送给主节点，要求进行部分复制操作</li><li>主节点接到psync命令后首先核对参数runId是否与自身一致，如果一致，说明之前复制的是当前主节点；之后根据参数offset在自身复制积压缓冲区查找，如果偏移量之后的数据存在缓冲区中，则对从节点发送+CONTINUE响应，表示可以进行部分复制。</li><li>主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态</li></ul><p><strong>10. 主从机制的心跳机制</strong></p><ul><li>主从节点彼此都有心跳检测机制，各自模拟成对方的客户端进行通信</li><li>主节点默认每隔10秒对从节点发送ping命令，判断从节点的存活性和连接状态。</li><li>从节点在主线程中每隔1秒发送replconf ack{offset}命令，给主节点上报自身当前的复制偏移量</li><li>主节点根据replconf命令判断从节点超时时间，体现在info replication统计中的lag信息中，lag表示与从节点最后一次通信延迟的秒数，正常延迟应该在0和1之间。如果超过repl-timeout配置的值（默认60秒），则判定从节点下线并断开复制客户端连接。即使主节点判定从节点下线后，如果从节点重新恢复，心跳检测会继续进行</li></ul><p><strong>11. 什么是异步复制</strong></p><p>主节点不但负责数据读写，还负责把写命令同步给从节点。写命令的发送过程是异步完成，也就是说主节点自身处理完写命令后直接返回给客户端，并不等待从节点复制完成。</p><p><strong>12. 什么是读写分离</strong></p><p>对于读占比较高的场景，可以通过把一部分读流量分摊到从节点来减轻主节点压力，同时需要注意永远只对主节点执行写操作。</p><p><strong>13. 读写分离要注意什么问题</strong></p><p>·复制数据延迟、读到过期数据、从节点故障</p><ul><li><p>复制数据延迟</p><p>Redis复制数据的延迟由于异步复制特性是无法避免的，延迟取决于网络带宽和命令阻塞情况，比如刚在主节点写入数据后立刻在从节点上读取可能获取不到。</p></li><li><p>读到过期数据</p><p>当主节点存储大量设置超时的数据时，如缓存数据，Redis内部需要维护过期数据删除策略，删除策略主要有两种：惰性删除和定时删除。</p><ul><li><p>惰性删除</p><p>主节点每次处理读取命令时，都会检查键是否超时，如果超时则执行del命令删除键对象，之后del命令也会异步发送给从节点，为了保证复制的一致性，从节点自身永远不会主动删除超时数据。</p></li><li><p>定时删除</p><p>Redis主节点在内部定时任务会循环采样一定数量的键，当发现采样的键过期时执行del命令，之后再同步给从节点。</p></li></ul></li><li><p>从节点故障</p><p>对于从节点的故障问题，需要在客户端维护可用从节点列表，当从节点故障时立刻切换到其他从节点或主节点上。</p></li></ul><p><strong>14. 什么时候会发生全量复制</strong></p><p>全量复制是一个非常消耗资源的操作，发生全量复制的时机有</p><ul><li>第一次建立复制</li><li>节点运行ID不匹配</li><li>复制积压缓冲区不足</li></ul><p><strong>15. 什么是复制风暴，如何规避复制风暴</strong></p><p>复制风暴是指大量从节点对同一主节点或者对同一台机器的多个主节点短时间内发起全量复制的过程。复制风暴对发起复制的主节点或者机器造成大量开销，导致CPU、内存、带宽消耗。</p><p>应该把主节点尽量分散在多台机器上，避免在单台机器上部署过多的主节点。当主节点所在机器故障后提供故障转移机制，避免机器恢复后进行密集的全量复制。</p><hr><h4 id="7-Redis的噩梦：阻塞"><a href="#7-Redis的噩梦：阻塞" class="headerlink" title="7. Redis的噩梦：阻塞"></a>7. Redis的噩梦：阻塞</h4><hr><h4 id="8-理解内存"><a href="#8-理解内存" class="headerlink" title="8. 理解内存"></a>8. 理解内存</h4><hr><h4 id="9-哨兵"><a href="#9-哨兵" class="headerlink" title="9. 哨兵"></a>9. 哨兵</h4><p><a href="https://juejin.im/post/5b7d226a6fb9a01a1e01ff64" target="_blank" rel="noopener">https://juejin.im/post/5b7d226a6fb9a01a1e01ff64</a></p><p><strong>1. 什么是redis哨兵</strong></p><p>Redis的主从复制模式下，一旦主节点由于故障不能提供服务，需要人工将从节点晋升为主节点，同时还要通知应用方更新主节点地址，对于很多应用场景这种故障处理的方式是无法接受的。当主节点出现故障时，Redis Sentinel能自动完成故障发现和故障转移，并通知应用方，从而实现真正的高可用。</p><p><strong>2. redis主从复制带来的问题</strong></p><p>Redis主从复制模式下，一旦主节点出现了故障不可达，需要人工干预进行故障转移，无论对于Redis的应用方还是运维方都带来了很大的不便。对于应用方来说无法及时感知到主节点的变化，必然会造成一定的写数据丢失和读数据错误，甚至可能造成应用方服务不可用。对于Redis的运维方来说，整个故障转移的过程是需要人工来介的，故障转移实时性和准确性上都无法得到保障。</p><p><strong>3. redis哨兵方案</strong></p><p>Redis Sentinel是一个分布式架构，其中包含若干个Sentinel节点和Redis数据节点，每个Sentinel节点会对数据节点和其余Sentinel节点进行监控，当它发现节点不可达时，会对节点做下线标识。如果被标识的是主节点，它还会和其他Sentinel节点进行“协商”，当大多数Sentinel节点都认为主节点不可达时，它们会选举出一个Sentinel节点来完成自动故障转移的工作，同时会将这个变化实时通知给Redis应用方。整个过程完全是自动的，不需要人工<br>来介入</p><p><strong>4. redis哨兵如何监控节点的</strong></p><p>Redis Sentinel通过三个定时监控任务完成对各个节点发现和监控</p><ul><li>每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构</li><li>每隔2秒，每个Sentinel节点会向Redis数据节点的<strong>sentinel</strong>：hello频道上发送该Sentinel节点对于主节点的判断以及当前Sentinel节点的信息，同时每个Sentinel节点也会订阅该频道，来了解其他Sentinel节点以及它们对主节点的判断。</li><li>每隔1秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点发送一条ping命令做一次心跳检测，来确认这些节点当前是否可达</li></ul><p><strong>5. 什么是主观下线</strong></p><p>每个Sentinel节点会每隔1秒对主节点、从节点、其他Sentinel节点发送ping命令做心跳检测，当这些节点超过down-after-milliseconds没有进行有效回复，Sentinel节点就会对该节点做失败判定，这个行为叫做主观下线。</p><p><strong>6. 什么是客观下线</strong></p><p>当Sentinel主观下线的节点是主节点时，该Sentinel节点会通过sentinel ismaster-down-by-addr命令向其他Sentinel节点询问对主节点的判断，当超过<quorum>个数，Sentinel节点认为主节点确实有问题，这时该Sentinel节点会做出客观下线的决定，这样客观下线的含义是比较明显了，也就是大部分Sentinel节点都对主节点的下线做了同意的判定，那么这个判定就是客观的。</p><p><strong>7. 如何进行领导的选举</strong></p><p>假如Sentinel节点对于主节点已经做了客观下线，那么是不是就可以立即进行故障转移了？当然不是，实际上故障转移的工作只需要一个Sentinel节点来完成即可，所以Sentinel节点之间会做一个领导者选举的工作，选出一个Sentinel节点作为领导者进行故障转移的工作。</p><ul><li>每个在线的Sentinel节点都有资格成为领导者，当它确认主节点主观下线时候，会向其他Sentinel节点发送sentinel is-master-down-by-addr命令，要求将自己设置为领导者。</li><li>收到命令的Sentinel节点，如果没有同意过其他Sentinel节点的sentinelis-master-down-by-addr命令，将同意该请求，否则拒绝。</li><li>如果该Sentinel节点发现自己的票数已经大于等于max（quorum，num（sentinels）/2+1），那么它将成为领导者。</li><li>如果此过程没有选举出领导者，将进入下一次选举。</li></ul><p><strong>8. 故障转移是如何实现的</strong></p><ol><li><p>在从节点列表中选出一个节点作为新的主节点，选择方法如下</p><ul><li>过滤：“不健康”（主观下线、断线）、5秒内没有回复过Sentinel节点ping响应、与主节点失联超过down-after-milliseconds*10秒。</li><li>选择slave-priority（从节点优先级）最高的从节点列表，如果存在则返回，不存在则继续。</li><li>选择复制偏移量最大的从节点（复制的最完整），如果存在则返回，不存在则继续。</li><li>选择runid最小的从节点。</li></ul></li><li><p>Sentinel领导者节点会对第一步选出来的从节点执行slaveof no one命令让其成为主节点</p></li><li><p>Sentinel领导者节点会向剩余的从节点发送命令，让它们成为新主节点的从节点</p></li><li><p>Sentinel节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点</p></li></ol><hr><h4 id="10-集群"><a href="#10-集群" class="headerlink" title="10. 集群"></a>10. 集群</h4><p><strong>1. Redis集群是如何决定数据存放在哪台主机中的</strong></p><p>redis使用虚拟槽来进行分区的，首先规定槽的范围为0到16384，槽是集群内数据管理和迁移的基本单位，采用大范围槽的主要目的是为了方便树拆分和集群扩展。每个节点会负责一定数量的槽。所有的键通过哈希算法映射到0到16384整数槽中，计算公式为<code>slot=CRC16(key)&amp;16383</code></p><p><strong>2. 虚拟槽的特点</strong></p><ul><li>解耦了数据与节点之间的关系，简化了节点扩容和收缩的难度</li><li>节点自身维护槽的映射关系，不需要客户端或代理服务维护槽分区</li><li>支持节点、槽、键之间的映射查询，用于数据路由、在线伸缩等场景</li></ul><p><strong>3. redis集群功能有什么限制</strong></p><ul><li>对key的批量操作支持有限</li><li>key事务操作支持有</li><li>key作为数据分区的最小粒度，因此不能将一个大的键值对象如hash、list等映射到不同的节点</li><li>不支持多数据库空间</li><li>复制结构只支持一层，从节点只能复制主节点，不支持嵌套树状复制结构。</li></ul><p><strong>4. 如何搭建集群</strong></p><p>一种是手动方式，一种是通过ruby脚本来实现</p><ul><li>首先准备节点，节点的个数最少为6个，通过配置参数开启集群模式<ul><li>节点启动成功后会检查是否存在集群配置文件，如果没有会自动创建一份。</li><li>当集群内节点信息发生变化，如添加节点、节点下线、故障转移等。节点会自动保存集群状态到配置文件中。需要注意的是，Redis自动维护集群配置文件，不要手动修改，防止节点重启时产生集群信息错乱</li><li>集群中的每一个节点使用一个40位长度的16进制字符串的节点id表示，这个id与运行id不同.节点ID在集群初始化时只创建一次，节点重启时会加载集群配置文件进行重用，而Redis的运行ID每次重启都会变化</li></ul></li><li>通过节点握手让6个节点彼此建立联系从而组成一个集群<ul><li>节点握手是指一批运行在集群模式下的节点通过Gossip协议彼此通信，达到感知对方的过程</li><li>节点握手是集群彼此通信的第一步，由客户端发起命令：<code>cluster meet{ip}{port}</code></li><li>我们只需要在集群内任意节点上执行cluster meet命令加入新节点，握手状态会通过消息在集群内传播，这样其他节点会自动发现新节点并发起握手流程。最后执行cluster nodes命令确认6个节点都彼此感知并组成集群</li><li>节点建立握手之后集群还不能正常工作，这时集群处于下线状态，所有的数据读写都被禁止</li></ul></li><li>Redis集群把所有的数据映射到16384个槽中<ul><li>每个key会映射为一个固定的槽，只有当节点分配了槽，才能响应和这些槽关联的键命令</li></ul></li><li>每个负责处理槽的节点应该具有从节点，保证当它出现故障时可以自动进行故障转移,使用cluster<br>replicate{nodeId}命令让一个节点成为从节点</li></ul><p><strong>5. 集群中节点通信的流程</strong></p><p>Gossip协议工作原理就是节点彼此不断通信交换信息，一段时间后所有的节点都会知道集群完整的信息，这种方式类似流言传播。</p><p><strong>6. 常用的Gossip消息有哪些</strong></p><ul><li><strong>meet消息</strong>：用于通知新节点加入。消息发送者通知接收者加入到当前集群，meet消息通信正常完成后，接收节点会加入到集群中并进行周期性的ping、pong消息交换</li><li><strong>ping消息</strong>：集群内交换最频繁的消息，集群内每个节点每秒向多个其他节点发送ping消息，用于检测节点是否在线和交换彼此状态信息。ping消息发送封装了自身节点和部分其他节点的状态数据</li><li><strong>pong消息</strong>：当接收到ping、meet消息时，作为响应消息回复给发送方确认消息正常通信。pong消息内部封装了自身状态数据。节点也可以向集群内广播自身的pong消息来通知整个集群对自身状态进行更新</li><li><strong>fail消息</strong>：当节点判定集群内另一个节点下线时，会向集群内广播一个fail消息，其他节点接收到fail消息之后把对应节点更新为下线状态。</li></ul><p><strong>7. Gossip协议如何选择通信的节点</strong></p><p>集群内每个节点维护定时任务默认每秒执行10次，每秒会随机选取5个节点找出最久没有通信的节点发送ping消息，用于保证Gossip信息交换的随机性。每100毫秒都会扫描本地节点列表，如果发现节点最近一次接受pong<br>消息的时间大于cluster_node_timeout/2，则立刻发送ping消息，防止该节点信息太长时间未更新。每次消息头的大小为2kb</p><p><strong>8. 集群伸缩的原理</strong></p><p>集群伸缩=槽和数据在节点之间的移动</p><p><strong>9. 如何扩容集群</strong></p><ul><li><p>准备新节点</p><p>需要提前准备好新节点并运行在集群模式下，新节点建议跟集群内的节点配置保持一致，便于管理统一</p></li><li><p>加入集群</p><p>新节点依然采用cluster meet命令加入到现有集群中</p></li><li><p>迁移槽和数据</p><p>槽是Redis集群管理数据的基本单位，首先需要为新节点制定槽的迁移计划，确定原有节点的哪些槽需要迁移到新节点。迁移计划需要确保每个节点负责相似数量的槽，从而保证各节点的数据均匀</p></li></ul><p><strong>10. 如何收缩集群</strong></p><ul><li>首先需要确定下线节点是否有负责的槽，如果是，需要把槽迁移到其他节点，保证节点下线后整个集群槽节点映射的完整性</li><li>当下线节点不再负责槽或者本身是从节点时，就可以通知集群内其他节点忘记下线节点，当所有的节点忘记该节点后可以正常关闭</li></ul><p><strong>11. 什么是集群的故障转移</strong></p><p>Redis集群自身实现了高可用。高可用首先需要解决集群部分失败的场景：当集群内少量节点出现故障时通过自动故障转移保证集群可以正常对外提供服务。</p><p><strong>12. 集群如何发现故障</strong></p><p>当集群内某个节点出现问题时，需要通过一种健壮的方式保证识别出节点是否发生了故障。Redis集群内节点通过ping/pong消息实现节点通信，消息不但可以传播节点槽信息，还可以传播其他状态如：主从状态、节点故障<br>等。因此故障发现也是通过消息传播机制实现的。</p><p><strong>13. 集群如何标记主观下线</strong></p><p>集群中每个节点都会定期向其他节点发送ping消息，接收节点回复pong消息作为响应。如果在cluster-node-timeout时间内通信一直失败，则发送节点会认为接收节点存在故障，把接收节点标记为主观下线（pfail）状态</p><p><strong>14. 集群如何标记客观下线</strong></p><p>当某个节点判断另一个节点主观下线后，相应的节点状态会跟随消息在集群内传播。ping/pong消息的消息体会携带集群1/10的其他节点状态数据，当接受节点发现消息体中含有主观下线的节点状态时，会在本地找到故障节<br>点的ClusterNode结构，保存到下线报告链表中.</p><p>通过Gossip消息传播，集群内节点不断收集到故障节点的下线报告。当半数以上持有槽的主节点都标记某个节点是主观下线时。</p><p><strong>15. 为什么必须是负责槽的主节点参与故障发现决策</strong></p><p>因为集群模式下只有处理槽的主节点才负责读写请求和集群槽等关键信息维护，而从节点只进行主节点数据和状态信息的复制。</p><p><strong>16. 为什么半数以上处理槽的主节点</strong></p><p>必须半数以上是为了应对网络分区等原因造成的集群分割情况，被分割的小集群因为无法完成从主观下线到<br>客观下线这一关键过程，从而防止小集群完成故障转移之后继续对外提供服务。</p><p><strong>17. 如何进行故障转移</strong></p><p>故障节点变为客观下线后，如果下线节点是持有槽的主节点则需要在它的从节点中选出一个替换它，从而保证集群的高可用.</p><ul><li><strong>资格检查</strong>：每个从节点都要检查最后与主节点断线时间，判断是否有资格替换故障的主节点。如果从节点与主节点断线时间超过cluster-node-time*cluster-slave-validity-factor，则当前从节点不具备故障转移资格。参数cluster-slavevalidity-factor用于从节点的有效因子，默认为10。</li><li><strong>准备选举时间</strong>：当从节点符合故障转移资格后，更新触发故障选举的时间，只有到达该时间后才能执行后续流程</li><li><strong>发起选举</strong>：当从节点定时任务检测到达故障选举时间（failover_auth_time）到达后，发起选举流程<ul><li><strong>更新配置纪元</strong>：配置纪元是一个只增不减的整数，每个主节点自身维护一个配置纪标示当前主节点的版本，所有主节点的配置纪元都不相等，从节点会复制主节点的配置纪元。</li></ul></li><li><strong>选举投票</strong></li></ul><hr><hr><h4 id="11-缓存设计"><a href="#11-缓存设计" class="headerlink" title="11. 缓存设计"></a>11. 缓存设计</h4><p><strong>1. 缓存带来了哪些收益</strong></p><ul><li><p>加速读写</p><p>缓存通常是基于内存的，读写性能非常高。</p></li><li><p>降低后端负载</p><p>帮助后端减少访问量和复杂计算（例如很复杂的SQL语句），在很大程度降低了后端的负载。</p></li></ul><p><strong>2. 缓存带来了哪些成本</strong></p><ul><li>数据不一致性：缓存层和存储层的数据存在着一定时间窗口的不一致性，时间窗口跟更新策略有关。</li><li>代码维护成本：加入缓存后，需要同时处理缓存层和存储层的逻辑，增大了开发者维护代码的成本。</li><li>运维成本：以Redis Cluster为例，加入后无形中增加了运维成本。</li></ul><p><strong>3. 什么场景应该使用缓存</strong></p><p>开销大的复杂计算：以MySQL为例子，一些复杂的操作或者计算（例如大量联表操作、一些分组计算），如果不加缓存，不但无法满足高并发量，同时也会给MySQL带来巨大的负担。</p><p>加速请求响应：即使查询单条后端数据足够快（例如select*from table where id=），那么依然可以使用缓存，以Redis为例子，每秒可以完成数万次读写，并且提供的批量操作可以优化整个IO链的响应时间。</p><p><strong>4. 什么是缓存穿透</strong></p><p>缓存穿透是指查询一个根本不存在的数据，缓存层和存储层都不会命中，通常出于容错的考虑，如果从存储层查不到数据则不写入缓存层。缓存穿透将导致不存在的数据每次请求都要到存储层去查询，失去了缓存保护后端存储的意义。缓存穿透问题可能会使后端存储负载加大，由于很多后端存储不具备高并发性，甚至可能造成后端存储宕掉。</p><p><strong>5. 为什么会发生缓存穿透</strong></p><ul><li><p>自身业务代码或者数据出现问题</p></li><li><p>一些恶意攻击、爬虫等造成大量空命中。下面我们来看一下如何解决缓存穿透问题</p></li></ul><p><strong>6. 如何优化缓存穿透问题</strong></p><ul><li><p>当存储层不命中后，仍然将空对象保留到缓存层中，之后再访问这个数据将会从缓存中获取，这样就保护了后端数据源。</p></li><li><p>使用布隆过滤器进行拦截</p></li></ul><p><strong>7. 什么是无底洞现象</strong></p><p>添加新的节点，性能没有上升反而下降，这种现象称为无底洞现象</p><p><strong>8. 无底洞现象是怎么产生的</strong></p><p>键值数据库由于通常采用哈希函数将key映射到各个节点上，造成key的分布与业务无关，但是由于数据量和访问量的持续增长，造成需要添加大量节点做水平扩容，导致键值分布到更多的节点上，所以无论是Memcache还是Redis的分布式，批量操作通常需要从不同节点上获取，相比于单机批量操作只涉及一次网络操作，分布式批量操作会涉及多次网络时间。客户端一次批量操作会涉及多次网络操作，也就意味着批量操作会随着节点的增多，耗时会不断增大。</p><p><strong>9. 无底洞现象怎么优化</strong></p><p><strong>10. 什么是缓存雪崩</strong></p><p>由于缓存层承载着大量请求，有效地保护了存储层，但是如果缓存层由于某些原因不能提供服务，于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会级联宕机的情况。</p><p><strong>11. 如何优化缓存雪崩</strong></p><p><strong>12. 什么是缓存击穿</strong></p><p><strong>13. 如何优化缓存击穿</strong></p><hr><p><em>参考：《Redis开发与运维》</em></p><p><strong>（未完待续）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL SQL优化</title>
      <link href="/2019/12/27/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/"/>
      <url>/2019/12/27/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h5 id="1-建立索引的技巧"><a href="#1-建立索引的技巧" class="headerlink" title="1. 建立索引的技巧"></a>1. 建立索引的技巧</h5><ol><li>对于单键索引，尽量选择针对当前query过滤性更好的索引</li><li>在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。(避免索引过滤性好的索引失效)</li><li>在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引</li><li>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的</li></ol><h5 id="2-索引规范"><a href="#2-索引规范" class="headerlink" title="2. 索引规范"></a>2. 索引规范</h5><ol><li>对复合索引于尽量使用全值匹配</li><li>遵循最左前缀法则</li><li>不要在索引列上进行任何操作，包括自动或者手动类型转换</li><li>存储引擎不能使用索引中范围条件右边的列</li><li>尽量使用覆盖索引</li><li>MySQL在使用不等于和is not null的时候会导致索引失效</li><li>like以通配符开头，MySQL索引会失效变成全表扫描</li><li>使用or会导致索引失效，可以使用union来代替</li></ol><h5 id="3-关联查询优化"><a href="#3-关联查询优化" class="headerlink" title="3. 关联查询优化"></a>3. 关联查询优化</h5><ol><li><p>保证被驱动表的join字段已经被索引</p></li><li><p>left join 时，选择小表作为驱动表，大表作为被驱动表</p></li><li><p>inner join 时，mysql会自己帮你把小结果集的表选为驱动表</p></li><li><p>子查询尽量不要放在被驱动表，有可能使用不到索引</p></li></ol><h5 id="4-子查询优化"><a href="#4-子查询优化" class="headerlink" title="4. 子查询优化"></a>4. 子查询优化</h5><ul><li><p>有索引的情况下 用  inner join 是最好的  其次是 in  ，exists最糟糕</p></li><li><p>无索引的情况下用 小表驱动大表 因为join 方式需要distinct ，没有索引distinct消耗性能较大。所以 exists性能最佳 in其次join性能最差？</p></li><li><p>无索引的情况下大表驱动小表in 和 exists 的性能应该是接近的  都比较糟糕  exists稍微好一点 超不过5%     但是inner join 优于使用了 join buffer 所以快很多如果left join 则最慢</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> 索引优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InnoDB锁总结</title>
      <link href="/2019/12/26/InnoDB%E9%94%81%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/26/InnoDB%E9%94%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="1-什么是锁，为什么要加锁"><a href="#1-什么是锁，为什么要加锁" class="headerlink" title="1. 什么是锁，为什么要加锁"></a>1. 什么是锁，为什么要加锁</h5><p>锁是一种用来实现对共享资源安全访问的工具，当多个用户并发地存取数据时，在数据库中就可能会产生多个事务同时操作同一行数据的情况，若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据的一致性。</p><h5 id="2-InnoDB锁的类型"><a href="#2-InnoDB锁的类型" class="headerlink" title="2. InnoDB锁的类型"></a>2. InnoDB锁的类型</h5><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/InnoDB%E9%94%81%E6%80%BB%E7%BB%93/image-202001302035.jpg" alt="img"></p><ul><li><p><strong>按照锁的粒度来分</strong></p><ul><li><p>表锁</p><p>MySQL中锁定粒度最大的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率越高，并发度最低，MyISAM和InnoDB引擎都支持表级锁。</p></li><li><p>行锁</p><p>Mysql中锁定粒度最小的一种锁，只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。</p></li><li><p>页锁</p></li></ul></li><li><p><strong>按照锁算法来分</strong></p><ul><li>Recodrd Lock</li><li>Gap Lock</li><li>Next-key Lock</li></ul></li><li><p><strong>按照加锁机制来分</strong></p><ul><li><p>乐观锁</p><p>乐观锁会“乐观地”假定大概率不会发生并发更新冲突，访问、处理数据过程中不加锁，只在更新数据时再根据版本号或时间戳判断是否有冲突，有则处理，无则提交事务；</p></li><li><p>悲观锁</p><p>悲观锁会“悲观地”假定大概率会发生并发更新冲突，访问、处理数据前就加排他锁，在整个数据处理过程中锁定数据，事务提交或回滚后才释放锁；</p></li></ul></li><li><p><strong>按照兼容性来分</strong></p><ul><li><p>共享锁</p><p>共享锁（<strong>Share Locks</strong>，简记为S锁）又称为<strong>读锁</strong>。其它事务可以并发地读取数据，可以再加共享锁，但任何事务都不能获取数据上的排它锁，直至已经释放所有共享锁。</p></li><li><p>排他锁</p><p>排它锁（<strong>Exclusive lock</strong>，简记为X锁）又称为<strong>写锁</strong>。若事务对数据对象加上了排它锁，则只允许该事务对数据对象进行读取和修改，其它事务不能再对数据对象加任何类型的锁，直到该事务释放对象上的排它锁。在更新操作(INSERT、UPDATE 或 DELETE)过程中始终应用排它锁。</p></li><li><p>意向锁</p><p>为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong>。</p><ul><li><p>意向共享锁（IS）</p><p>表示事务准备给数据行加入共享锁，事务在给一个数据行加共享锁之前必须先取得该表的IS锁。</p></li><li><p>意向排它锁（IX）</p><p>表示事务准备给数据行加入排它锁，事务在给一个数据行加排它锁之前必须先取得该表的IX锁。</p></li></ul></li></ul></li></ul><h5 id="3-一些锁的细节"><a href="#3-一些锁的细节" class="headerlink" title="3. 一些锁的细节"></a>3. 一些锁的细节</h5><ul><li><p>意向锁的细节</p><p>MySQL中表锁和行锁共存，若不引入意向锁，该如何判断是否锁冲突呢？</p><p>假设事务T要对表T1加X锁，那就必须要判断T1表下每一个数据行是否加了S锁或者X锁。这样做的效率会非常低，需要对整个表进行遍历。在引入意向锁之后情况变得简单了。</p><p>假设事务T要对表T1加X锁，在这之前假设已经有事务A对数据行R加了S锁，那么此时表上已经有IS锁了（事务在给一个数据行加S锁之前必须先取得该表的IS锁）。由于X锁和IS锁冲突，所以事务T需要等待锁操作完成。这样就省去了遍历的操作，提高了冲突判断效率。</p><ul><li><p>意向锁是表锁，表示的是一种意向，仅仅表示事务正在读或写某一行记录，在真正加行锁时才会判断是否冲突。意向锁是InnoDB自动加的，不需要用户干预。</p></li><li><p>IX和IS是表锁，不会与行锁发生冲突，只会与表锁发生冲突。</p></li></ul></li><li><p>有哪些锁算法</p><ul><li><p>Record Lock</p><p>记录锁，锁定一个行记录。</p><p>由于InnoDB特殊的索引机制，数据库操作使用主键索引时，InnoDB会锁住主键索引；使用非主键索引时，InnoDB会先锁住非主键索引，再锁定主键索引</p></li><li><p>Gap Lock</p><p>间隙锁，锁定一个区间，不包括记录本身</p></li><li><p>Next-Key Lock</p><p>记录锁+间隙锁（临键锁），锁定行记录和区间</p><p>InnoDB引擎采用Next-Key Lock来解决幻读问题。因为Next-Key Lock是锁住一个范围，所以就不会产生幻读问题。但是需要注意的是，InnoDB只在Repeatable Read隔离级别下使用该机制。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
            <tag> 数据库锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL存储引擎总结</title>
      <link href="/2019/12/26/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/26/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="1-有哪些存储引擎"><a href="#1-有哪些存储引擎" class="headerlink" title="1. 有哪些存储引擎"></a>1. 有哪些存储引擎</h5><ul><li><p>InnoDB</p><p>行锁设计，支持外键和事务，支持一致性非锁定读，支持多版本并发控制，实现了SQL标准的四种隔离级别，提供插入缓冲，二次写，自适应哈希索引和预读等功能。</p></li><li><p>MyISAM</p><p>表锁设计，不支持事务，支持全文索引，适合OLAP应用</p></li><li><p>NDB</p><p>NDB是一个集群存储引擎，索数据全部方内存中</p></li><li><p>Memory</p><p>将表中的数据全部放在内存中，如果数据库重启或者发生崩溃，数据都将小时，非常适合临时数据的临时表，默认使用哈希索引</p></li><li><p>Archive存储引擎</p><p>只支持插入和查询操作，支持行压缩存储，压缩比一般可以达到1：10，使用行锁来实现插入，适合存储日志信息</p></li><li><p>Federated存储引擎</p><p>不存放数据，类似一个网关，指向远程的MYSQL数据库服务器</p></li><li><p>Maria存储引擎</p><p>用来替代MyISAM存储引擎，缓存数据和索引文件，行锁设计，提供MVCC功能，支持事务</p></li></ul><h5 id="2-InnoDB存储引擎与MyISAM存储引擎的对比"><a href="#2-InnoDB存储引擎与MyISAM存储引擎的对比" class="headerlink" title="2. InnoDB存储引擎与MyISAM存储引擎的对比"></a>2. InnoDB存储引擎与MyISAM存储引擎的对比</h5><ol><li>InnoDB支持事务；MyISAM不支持事务。</li><li>InnoDB支持外键；MyISAM不支持外键。</li><li>InnoDB锁的粒度是行锁；MyISAM锁的粒度是表锁。</li><li>InnoDB把数据和索引存在一起；MyISAM把表分为三个文件：表结构(.frm)、表内容(MYD)、表索引(MYI)。</li><li>InnoDB不保存表的具体行数，需要通过扫描表来获取有多少行；MyISAM保存表的具体行数。</li><li>InnoDB删除表中数据时是一行一行的删除；MyISAM删除表时是先<code>drop</code>表，然后重建表。</li><li>InnoDB可跨平台拷贝直接使用；MyISAM很难跨平台直接使用。</li><li>InnoDB表格很难压缩；MyISAM表格可以被压缩。</li><li>InnoDB中必须包含只有该字段的索引；MyISAM表中可以和其他字段一起建立联合索引。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
            <tag> 存储引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL调优：Explain命令的使用</title>
      <link href="/2019/12/26/MySQL%E8%B0%83%E4%BC%98%20Explain%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/26/MySQL%E8%B0%83%E4%BC%98%20Explain%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="1-Explain是什么有什么用"><a href="#1-Explain是什么有什么用" class="headerlink" title="1. Explain是什么有什么用"></a>1. Explain是什么有什么用</h5><p>使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈。</p><h5 id="2-Explain执行计划包含哪些字段-每个字段表示什么"><a href="#2-Explain执行计划包含哪些字段-每个字段表示什么" class="headerlink" title="2. Explain执行计划包含哪些字段,每个字段表示什么"></a>2. Explain执行计划包含哪些字段,每个字段表示什么</h5><ol><li><p><strong>id</strong></p><p>select查询的序列号,包含一组数字，表示查询中执行select子句或操作表的顺序</p><ul><li>id相同的时候 ，执行顺序是由上至下</li><li>id不同的时候，id值越大的越先执行</li><li>id相同和不同同时存在的时候，id如果相同，可以认为是一组，从上往下顺序执行；<br>在所有组中，id值越大，优先级越高，越先执行</li></ul></li><li><p><strong>select_type</strong></p><p>查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的 select 查询,查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子部分，最外层查询则被标记为Primary</td></tr><tr><td>DERIVED</td><td>在FROM列表中包含的子查询被标记为DERIVED(衍生)MySQL会递归执行这些子查询, 把结果放在临时表里。</td></tr><tr><td>SUBQUERY</td><td>在SELECT或WHERE列表中包含了子查询</td></tr><tr><td>DEPENDENT SUBQUERY</td><td>在SELECT或WHERE列表中包含了子查询,子查询基于外层</td></tr><tr><td>UNCACHEABLE SUBQUREY</td><td>无法被缓存的子查询</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM子句的子查询中,外层SELECT将被标记为：DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table></li><li><p><strong>table</strong></p><p>显示这一行的数据是关于哪张表的</p></li><li><p><strong>type</strong></p><p>type显示的是访问类型，是较为重要的一个指标，结果值从最好到最坏依次是： </p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range(尽量保证) &gt; index &gt; ALL </p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>system</td><td>表只有一行记录（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计</td></tr><tr><td>const</td><td>表示通过索引一次就找到了,const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快,如将主键置于where列表中，MySQL就能将该查询转换为一个常量</td></tr><tr><td>eq_ref</td><td>唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行,本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</td></tr><tr><td>range</td><td>只检索给定范围的行,使用一个索引来选择行。key 列显示使用了哪个索引&lt;br一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询。这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引。</td></tr><tr><td>index</td><td>Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和Index都是读全表，但index是从索引中读取的，而all是从硬盘中读的）</td></tr><tr><td>all</td><td>Full Table Scan，将遍历全表以找到匹配的行</td></tr></tbody></table><p>至少要到达range级别</p></li><li><p><strong>possible_keys</strong></p><p>显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。（可能会用到）</p></li><li><p><strong>key</strong></p><p>实际使用的索引。如果为NULL，则没有使用索引</p></li><li><p><strong>key_len</strong></p><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。 </p></li><li><p><strong>ref</strong></p><p>显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值</p></li><li><p><strong>rows</strong></p><p>rows列显示MySQL认为它执行查询时必须检查的行数。</p></li><li><p><strong>extra</strong></p><p>包含不适合在其他列中显示但十分重要的额外信息，文件排序/使用where信息/临时表等信息。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InnoDB存储引擎总结</title>
      <link href="/2019/12/25/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/25/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="1-MySQL体系结构和存储引擎"><a href="#1-MySQL体系结构和存储引擎" class="headerlink" title="1. MySQL体系结构和存储引擎"></a>1. MySQL体系结构和存储引擎</h4><p><strong>1. 什么是数据库，什么是数据库实例</strong></p><p>数据库是操作系统文件的集合。数据库实例时操作数据库文件的进程。</p><p><strong>2. MySQL的线程架构</strong></p><p>MySQL时单进程多线程架构的数据库</p><p><strong>3. MySQL由哪几部分组成</strong></p><p>连接池组件，管理服务和工具组件，SQL接口组件，查询分析器组件，优化器组件，缓冲组件，插件式存储引擎，物理文件组成。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%80%BB%E7%BB%93/image-202001302029.jpg" alt="img"></p><p><strong>4. MySQL与其他数据库的区别</strong></p><p>拥有插件式的表存储引擎（存储引擎是基于表的不是基于数据库的）</p><p><strong>5. 有哪些存储引擎，各自的特点是什么</strong></p><ul><li><p>InnoDB</p><p>行锁设计，支持外键和事务，支持一致性非锁定读，支持多版本并发控制，实现了SQL标准的四种隔离级别，提供插入缓冲，二次写，自适应哈希索引和预读等功能。</p></li><li><p>MyISAM</p><p>表锁设计，不支持事务，支持全文索引，适合OLAP应用</p></li><li><p>NDB</p><p>NDB是一个集群存储引擎，索数据全部方内存中</p></li><li><p>Memory</p><p>将表中的数据全部放在内存中，如果数据库重启或者发生崩溃，数据都将小时，非常适合临时数据的临时表，默认使用哈希索引</p></li><li><p>Archive存储引擎</p><p>只支持插入和查询操作，支持行压缩存储，压缩比一般可以达到1：10，使用行锁来实现插入，适合存储日志信息</p></li><li><p>Federated存储引擎</p><p>不存放数据，类似一个网关，指向远程的MYSQL数据库服务器</p></li><li><p>Maria存储引擎</p><p>用来替代MyISAM存储引擎，缓存数据和索引文件，行锁设计，提供MVCC功能，支持事务</p></li></ul><p><strong>6. InnoDB存储引擎与MyISAM存储引擎的对比</strong></p><ol><li>InnoDB支持事务；MyISAM不支持事务。</li><li>InnoDB支持外键；MyISAM不支持外键。</li><li>InnoDB锁的粒度是行锁；MyISAM锁的粒度是表锁。</li><li>InnoDB把数据和索引存在一起；MyISAM把表分为三个文件：表结构(.frm)、表内容(MYD)、表索引(MYI)。</li><li>InnoDB不保存表的具体行数，需要通过扫描表来获取有多少行；MyISAM保存表的具体行数。</li><li>InnoDB删除表中数据时是一行一行的删除；MyISAM删除表时是先<code>drop</code>表，然后重建表。</li><li>InnoDB可跨平台拷贝直接使用；MyISAM很难跨平台直接使用。</li><li>InnoDB表格很难压缩；MyISAM表格可以被压缩。</li><li>InnoDB中必须包含只有该字段的索引；MyISAM表中可以和其他字段一起建立联合索引。</li></ol><p><strong>7. 如何查看数据库支持哪些存储引擎</strong></p><p><code>show engine</code></p><p><strong>8. 连接MySQL的方式有哪些</strong></p><ol><li>TCP/IP</li><li>命名管道和共享内存（windows）</li><li>Unix域套接字（xxx.socket）</li></ol><hr><h4 id="2-InnoDB存储引擎"><a href="#2-InnoDB存储引擎" class="headerlink" title="2. InnoDB存储引擎"></a>2. InnoDB存储引擎</h4><p><strong>1. 有哪些InnoDB版本</strong></p><table><thead><tr><th>版本</th><th>功能</th></tr></thead><tbody><tr><td>老版本InnoDB</td><td>支持事务，行锁设计，MVCC</td></tr><tr><td>InnoDB 1.0.x</td><td>增加了compress和dynamic页格式</td></tr><tr><td>InnoDB 1.1.x</td><td>增加了Linux AIO，多回滚段</td></tr><tr><td>InnoDB 1.2.x</td><td>增加了全文索引支持，在线索引添加</td></tr></tbody></table><p><strong>2. InnoDB存储引擎的体系结构</strong></p><p>由<code>内存池</code>和<code>后台线程</code>组成</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%80%BB%E7%BB%93/image-20200116093058928.png" alt="image-20200116093058927"></p><p><strong>3. 由哪些后台线程，作用是什么</strong></p><ul><li><p>Master Thread</p><p>负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新、合并插入缓冲、undo页的回收等。</p></li><li><p>IO Thread</p><p>处理异步IO请求的回调，有四种IO Threa，包括write、read、insert buffer和log IO Thread</p></li><li><p>Purge Thread</p><p>事务提交后，undo页就不需要了，Purge Thread用来回收已分配的undo页。</p></li><li><p>Page Cleaner Thread</p><p>进行脏页的刷新（这个功能是从Master Thread中抽出来的）</p></li></ul><p><strong>4. 有哪些内存池，都用来存放什么</strong></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%80%BB%E7%BB%93/image-20200116094402831.png" alt="image-20200116094402830"></p><ul><li><p>缓冲池</p><p>缓存数据页、索引页、插入缓冲、自适应哈希索引、锁信息和数据字典信息等。</p></li><li><p>重做日志缓冲池</p><p>缓存重做日志，首先将重做日志信息放入重做日志缓冲池，然后按一定的频率将其刷新到重做日志文件。</p></li><li><p>额外的内存缓冲池</p><p>对数据结构本身的内存分配使用额外的内存缓冲池管理</p></li></ul><p><strong>5. 缓冲池如何管理的</strong></p><p>由LRU列表、Free列表和Flush列表管理。</p><ul><li><p>LRU List</p><p>使用LRU（最近最少使用）算法管理页，使用频繁的页放在列表的前端，使用不频繁的页放在列表尾端，当内存不足时，首先释放LRU尾端的页。存储引擎中的LRU算法做了优化，插入新的页时不是放到前端，而是放在列表长度的5/8处，原因是，如何直接读取到的页放LRU的首部，对于某些操作需要访问表中的许多页，但这些页仅在本次操作中需要，并不是活跃的热点数据，这样会将热点数据页从LRU中刷出。</p></li><li><p>Free List</p><p>用来管理空闲的页，分配新的页时必须在这个列表中查找空闲页，如果没有就淘汰LRU列表中的页。</p></li><li><p>Flush List</p><p>管理脏页列表，注意脏页既存在于Flush列表又存在于LRU列表。</p></li></ul><p><strong>6. 什么是checkpoint</strong></p><p>checkpoint就是将脏页刷新到磁盘的一种机制。InnoDB存储引擎提交事务的时候，需要先写重做日志，然后把修改缓存中的页，这样即使数据库宕机也可以通过重做日志恢复，但是问题是重做日志的大小是有限制的，当重做日志文件不足时就可能导致数据丢失，另外如果只通过重做日志来恢复，则需要把所有的修改重做一遍时间太长了，因此引入了checkpoint技术，他可以在某些情况下将脏页刷新到磁盘，这样就不用担心重做日志文件大小不足的问题，并且恢复时checkpoint之前的重做日志不需要恢复，加快来了恢复的时间。</p><p><strong>7. checkpoint解决的问题</strong></p><ul><li>缩短数据库恢复的时间</li><li>缓冲池不够用时，将脏页刷新到磁盘</li><li>重做日志不可用时，将脏页刷新到磁盘</li></ul><p><strong>8. checkpoint的分类</strong></p><ul><li><p>Sharo Checkpoint</p><p>数据库关闭时将所有的脏页都刷新回磁盘，这是默认的工作方式。</p></li><li><p>Fuzzy Checkpoint</p><ul><li><p>Master Thread Checkpoint</p><p>隔一定时间间隔从缓冲池的脏页列表中刷新一定比列的页到磁盘（异步执行）</p></li><li><p>FLUSH_LRU_LIST Checkpoint</p><p>InnoDB要保证LRU列表中有差不多100个空闲页，如果不足会溢出LRU列表尾端的页，如果这些页中有脏页，会进行Checkpoint</p></li><li><p>Aysnc/Sync Flush Checkpoint</p><p>重做日志不可用时，这时需要强制将一些页刷新回磁盘，而此时脏页是从脏页列表中选取的。</p></li><li><p>Dirty Page too much Checkpoint</p><p>脏页数量太多会导致InnoDB存储引擎强制进行Checkpoint</p></li></ul></li></ul><p><strong>9. Master线程的工作方式</strong></p><p><strong>10. InnoDB有哪些关键特性</strong></p><ul><li>插入缓冲</li><li>两次写</li><li>自适应哈希索引</li><li>异步IO</li><li>刷新邻接页</li></ul><p><strong>11. 什么是插入缓冲</strong></p><p>对于自增长主键聚集索引的插入是顺序的不需要磁盘的随机读取，效率非常高，但是每张表只有一个聚集索引，其他的都是非聚集索引，对于非聚集索引的插入需要随机读取磁盘（离散的访问非聚集索引页），效率非常低，因此InnoDB存储引擎引入了插入缓冲来解决非聚集索引的插入性能问题：对于非聚集索引的插入或更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引页是否在缓冲池中，若在，则直接插入，若不在则先放入一个插入缓冲对象中，然后再以一定的频率和情况进行插入缓冲和富非聚集多月叶子结点的合并操作，这样多个插入就合并到一个操作中，这就大大提高了对非聚集索引插入的性能问题。插入缓冲只适应与非唯一的非聚集索引，非唯一的原因是如果是唯一的，那么就要检查每一个页判断是否已存在，这样查找也是离散读取，插入缓冲就没有任何意义了。除了插入缓冲对于更新和删除也有类似的操作（他们的思想是在内存中进行操作，这是一种欺骗，但是之后会写入磁盘保证一致性）。</p><p><strong>11. 插入缓冲是如何实现的</strong></p><p>插入缓冲是B+树</p><p><strong>12. 什么是两次写</strong></p><p>InnoDB的页默认大小为16k，但是写入磁盘是按照磁盘的块为单位写，也就是说每次将数据页写会磁盘不是一个原子过程，可能写到一半的时候突然数据库宕机，这个问题叫做部分写失效，这个时候是无法通过redo日志来恢复的，因为redo日志是一个逻辑日日志，只记录了某个偏移量写什么记录，而这个页本身就已经损坏了，所有没有无法恢复。两次写是为了解决这个问题：在内存中有一个2m大小的两次写缓存，在进行脏页刷新的时候，首先会将脏页分两次复制到两次写缓存中，然后两次写缓存会刷新到磁盘中的共享表中，写入磁盘后再进行脏页的刷新，这样就算发生部分写失效，也可以找到该页的副本进行恢复。</p><p><strong>13. 什么是自适应哈希索引</strong></p><p>哈希是一种快速查询的方法，时间复杂度为O(1)；InnoDB存储引擎会监控各索引页的查询，如果发现建立哈希所有可以提高效率就坏建立哈希索引，这种哈希索引称为自适应哈希索引，他是不需要用户干预的。</p><p><strong>14. 什么是异步IO</strong></p><p>异步IO是指可以发出一个IO后不需要等待直接发起另一个IO，当所有IO请求发送出去，等待所有IO完成，这样可以提高IO效率。</p><p><strong>15. 什么是刷新邻接页</strong></p><p>当刷新一个脏页的时候，会检查这个脏页所在的区的其他页，如果也是脏页那么也会被刷新，这样的好处是可以通过AIO把多个IO合并成一个IO</p><hr><h4 id="3-文件"><a href="#3-文件" class="headerlink" title="3. 文件"></a>3. 文件</h4><p><strong>1. MySQL中有哪些文件</strong></p><p>有参数文件、日志文件、套接字文件、pid文件、表结构定义文件。</p><p><strong>2. MySQL数据库的参数类型有哪些</strong></p><p>有静态参数和动态参数，动态参数可以在数据库实例启动的情况下修改生效，静态参数必须关闭数据库实例修改后重启。</p><p><strong>3. 有哪些日志文件</strong></p><ul><li><p>错误日志</p><p>记录数据库在启动运行关闭过程中发生的错误信息。</p></li><li><p>二进制日志</p><p>记录了对数据库执行更改的所有操作，用于恢复，复制和审计的功能</p></li><li><p>慢查询日志</p><p>可以在数据库启动时设置一个慢查询阈值，所有查询时间大于这个阈值的sql语句都会被记录下来，通过慢查询日志可以定位到查询效率低的sql语句，方便排查问题。</p></li><li><p>查询日志</p><p>记录了所有的查询sql语句包括未执行的</p></li></ul><p><strong>4. InnoDB存储引擎有哪些独有的文件</strong></p><p>表空间文件和重做日志文件。</p><hr><h4 id="4-表"><a href="#4-表" class="headerlink" title="4. 表"></a>4. 表</h4><hr><h4 id="5-索引和算法"><a href="#5-索引和算法" class="headerlink" title="5. 索引和算法"></a>5. 索引和算法</h4><p><strong>1. 什么是索引</strong></p><p>索引是一种用于快速查询和排好序的数据结构</p><p><strong>2. 有哪些索引</strong></p><ul><li>从数据结构的角度<ul><li>B+树索引</li><li>hash索引</li><li>全文索引</li></ul></li><li>从物理存储角度<ul><li>聚集索引</li><li>非聚集索引</li></ul></li><li>从逻辑角度<ul><li>主键索引</li><li>单列索引</li><li>符合索引</li><li>唯一索引或非唯一索引</li><li>空间索引</li></ul></li></ul><p><strong>3. 什么是聚集索引，什么是非聚集索引</strong></p><p>聚集索引就是按照表的主键构造一棵B+树，叶节点存放了整张表的行记录数据，聚集索引的特性是数据是索引的一部分。非聚集索引指定了表中记录的逻辑顺序，但记录的物理顺序和索引的顺序不一致。聚集索引和非聚集索引都采用了B+树的结构，但非聚集索引的叶子层并不与实际的数据页相重叠，而采用叶子层包含一个指向表中的记录在数据页中的指针的方式。</p><p><strong>4. 聚集索引的优点和缺点</strong></p><p>聚集索引的优点是查询速度快，并且一点某个记录找到了其相邻的记录就在这条记录的前后，适合范围查找。缺点是对表进行修改的速度比较慢，这是为了保持表中的记录的物理顺序与索引的顺序一致，而把记录插入到数据页的相应位置，必须在数据页中进行数据重排， 降低了执行速度。</p><p><strong>5. 什么时候建聚集索引</strong></p><ol><li>此列包含有限数目的不同值；</li><li>查询的结果返回一个区间的值；</li><li>查询的结果返回某值相同的大量结果集。</li></ol><p><strong>6. 什么时候需要建立索引</strong></p><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其他表管理的字段，外键关系建立索引</li><li>查询中排序的字段建立索引</li><li>查询中统计或者分组字段</li></ol><p><strong>7. 说明时候不需要建立索引</strong></p><ul><li>表记录太少</li><li>经常增删改的表</li><li>where条件用不到的字段</li><li>数据区分度比较小的字段、</li></ul><p><strong>8. 什么是B+树</strong></p><p>B+树是一个多路的平衡搜索树，B+树的结点由有序的元素和指针组成，指针的个数称为B+树的阶，B+树的特点是。</p><ul><li>根节点至少有一个元素，非根节点元素的范围为m/2&lt;=k&lt;=m-1</li><li>B+树有两种类型的节点，内部节点和叶子节点，内部节点不存储数据，只存储所有，数据都存储在叶子节点。</li><li>内部节点的key是按顺序存放的，元素的左子树的key都小于它，右子树的key都大于它，叶子结点中的记录也按照key的大小排列。</li><li>每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接。</li><li>父节点存有右孩子的第一个元素的索引。</li></ul><p><strong>9. 什么是B树</strong></p><p>B树也称B-树,它是一颗多路平衡查找树。二叉树我想大家都不陌生，其实，B树和后面讲到的B+树也是从最简单的二叉树变换而来的</p><ul><li><p>每个节点最多有m-1个<strong>关键字</strong>（可以存有的键值对）。</p></li><li><p>根节点最少可以只有1个<strong>关键字</strong>。</p></li><li><p>非根节点至少有m/2个<strong>关键字</strong>。</p></li><li><p>每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</p></li><li><p>所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。</p></li><li><p>每个节点都存有索引和数据，也就是对应的key和value。</p></li></ul><p><strong>10. 对比以下B+树比B树的优点（为什么MySQL采用B+树作为索引而不是B树）</strong></p><ul><li>单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。</li><li>所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。</li><li>所有的叶子节点形成了一个有序链表，更加便于查找。</li></ul><hr><h4 id="6-锁"><a href="#6-锁" class="headerlink" title="6. 锁"></a>6. 锁</h4><p><strong>1. 什么是锁，为什么要加锁</strong></p><p>锁是一种用来实现对共享资源安全访问的工具，当多个用户并发地存取数据时，在数据库中就可能会产生多个事务同时操作同一行数据的情况，若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据的一致性。</p><p><strong>2. InnoDB锁的类型</strong></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%80%BB%E7%BB%93/image-202001302035.jpg" alt="img"></p><ul><li><p>按照锁的粒度来分</p><ul><li><p>表锁</p><p>MySQL中锁定粒度最大的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率越高，并发度最低，MyISAM和InnoDB引擎都支持表级锁。</p></li><li><p>行锁</p><p>Mysql中锁定粒度最小的一种锁，只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。</p></li><li><p>页锁</p></li></ul></li><li><p>按照锁算法来分</p><ul><li>Recodrd Lock</li><li>Gap Lock</li><li>Next-key Lock</li></ul></li><li><p>按照加锁机制来分</p><ul><li><p>乐观锁</p><p>乐观锁会“乐观地”假定大概率不会发生并发更新冲突，访问、处理数据过程中不加锁，只在更新数据时再根据版本号或时间戳判断是否有冲突，有则处理，无则提交事务；</p></li><li><p>悲观锁</p><p>悲观锁会“悲观地”假定大概率会发生并发更新冲突，访问、处理数据前就加排他锁，在整个数据处理过程中锁定数据，事务提交或回滚后才释放锁；</p></li></ul></li><li><p>按照兼容性来分</p><ul><li><p>共享锁</p><p>共享锁（<strong>Share Locks</strong>，简记为S锁）又称为<strong>读锁</strong>。其它事务可以并发地读取数据，可以再加共享锁，但任何事务都不能获取数据上的排它锁，直至已经释放所有共享锁。</p></li><li><p>排他锁</p><p>排它锁（<strong>Exclusive lock</strong>，简记为X锁）又称为<strong>写锁</strong>。若事务对数据对象加上了排它锁，则只允许该事务对数据对象进行读取和修改，其它事务不能再对数据对象加任何类型的锁，直到该事务释放对象上的排它锁。在更新操作(INSERT、UPDATE 或 DELETE)过程中始终应用排它锁。</p></li><li><p>意向锁</p><p>为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong>。</p><ul><li><p>意向共享锁（IS）</p><p>表示事务准备给数据行加入共享锁，事务在给一个数据行加共享锁之前必须先取得该表的IS锁。</p></li><li><p>意向排它锁（IX）</p><p>表示事务准备给数据行加入排它锁，事务在给一个数据行加排它锁之前必须先取得该表的IX锁。</p></li></ul></li></ul></li></ul><p><strong>3. 意向锁是什么，解决了什么问题</strong></p><p>MySQL中表锁和行锁共存，若不引入意向锁，该如何判断是否锁冲突呢？</p><p>假设事务T要对表T1加X锁，那就必须要判断T1表下每一个数据行是否加了S锁或者X锁。这样做的效率会非常低，需要对整个表进行遍历。在引入意向锁之后情况变得简单了。</p><p>假设事务T要对表T1加X锁，在这之前假设已经有事务A对数据行R加了S锁，那么此时表上已经有IS锁了（事务在给一个数据行加S锁之前必须先取得该表的IS锁）。由于X锁和IS锁冲突，所以事务T需要等待锁操作完成。这样就省去了遍历的操作，提高了冲突判断效率。</p><ul><li><p>意向锁是表锁，表示的是一种意向，仅仅表示事务正在读或写某一行记录，在真正加行锁时才会判断是否冲突。意向锁是InnoDB自动加的，不需要用户干预。</p></li><li><p>IX和IS是表锁，不会与行锁发生冲突，只会与表锁发生冲突。</p></li></ul><p><strong>4. 有哪些锁算法</strong></p><ul><li><p>Record Lock</p><p>记录锁，锁定一个行记录。</p><p>由于InnoDB特殊的索引机制，数据库操作使用主键索引时，InnoDB会锁住主键索引；使用非主键索引时，InnoDB会先锁住非主键索引，再锁定主键索引</p></li><li><p>Gap Lock</p><p>间隙锁，锁定一个区间，不包括记录本身</p></li><li><p>Next-Key Lock</p><p>记录锁+间隙锁（临键锁），锁定行记录和区间</p><p>InnoDB引擎采用Next-Key Lock来解决幻读问题。因为Next-Key Lock是锁住一个范围，所以就不会产生幻读问题。但是需要注意的是，InnoDB只在Repeatable Read隔离级别下使用该机制。</p></li></ul><hr><h4 id="7-事务"><a href="#7-事务" class="headerlink" title="7. 事务"></a>7. 事务</h4><p><strong>1. 事务有哪些特性</strong></p><ul><li><p>A（原子性）</p><p>原子性指的是一组操作不可分割要么全部执行成功要么全部执行失败，这有全部执行成功整个事务才算成功。</p></li><li><p>C（一致性）</p><p>事务将数据库从一种状态转变为下一种状态，事务开始和结束后，数据库的完整性约束没有被破坏。</p></li><li><p>I（隔离性）</p><p>事务与事务之间是相互分离的，一个事务提交前对其他事务是不可见的。</p></li><li><p>D（持久性）</p><p>事务一旦提交，其结果是永久性的，即使发生宕机数据库也能恢复。</p></li></ul><p><strong>2. 什么是事务</strong></p><p>事务就是访问或者更新数据库时的一个执行单元，这个执行单元中的所有操作，要么全部完成要么全部要失败</p><p><strong>3. 事务有哪些分类</strong></p><ul><li><p>扁平事务</p><p>所有操作都是在一个层次，操作是原子的，要么全部执行要么都回滚，不能回滚部分。</p></li><li><p>带保存点是扁平事务</p><p>允许事务回滚到当事务的一个较早的状态。（保存点）</p></li><li><p>链事务</p><p>在提交一个事务时，释放不需要的数据对象，将必要的处理上下文隐式的传给下一个要开始的事务。需要注意，提交事务操作和下一个事务操作将合并为一个<strong>原子操作</strong>，就是下一个事务可以看到上一个事务的结果。</p><p>链事务，就是指回滚时，只能恢复到最近一个保存点；而带有保存点的扁平事务则可以回滚到任意正确的保存点。</p><p>链事务在执行commit后就会释放当前事务所持有的所有锁，而带有保存点的扁平事务不会影响所持有的锁。</p></li><li><p>嵌套事务</p><p>事务与事务之间是有层次结构的</p></li><li><p>分布式事务</p><p>分布式环境下的事务</p></li></ul><p><strong>4. 事务的隔离级别</strong></p><ul><li>未提交读</li><li>已提交读</li><li>可重复读</li><li>可串行化</li></ul><p><strong>5. 事务是怎么实现的</strong></p><p>事务具有四种属性ACID，其中隔离性是通过锁来实现的，其他的三种属性是用过undo log和redo log来实现的。</p><p><strong>6. redo日志和undo日志的区别</strong></p><ul><li>redo日志用来保证事务的原子性和持久性，undo日志用来保证事务的一致性</li><li>redo日志和undo日志都可以视为一种恢复操作，redo日志恢复提交修改的页操作，undo日志用来回滚行记录到某个特定的版本</li><li>redo日志是物理日志，记录的是对页的物理修改，undo日志是逻辑日志，根据每行记录进行记录</li></ul><p><strong>7. 事务的ACID是怎么实现的</strong></p><p>事务的原子性是通过undo日志实现的、持久性是通过redo日志或二进制日志实现的、隔离性是通过锁机制实现的，一致性是通过保证原子性、持久性和隔离性，数据库本身和应用层面进行保证的。</p><p><a href="https://www.cnblogs.com/kismetv/p/10331633.html" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/10331633.html</a></p><p><strong>7. 详细介绍重做日志</strong></p><ul><li><p>什么是重做日志，重做日志有什么用</p><p>在事务提交前必须将该事务的所有日志写到重做日志文件中，重做日志文件由两部分组成，分别是redo日志和undo日志。</p></li><li><p>如何保证重做日志缓冲写入重做日志文件</p><p>在每次重做日志缓冲写入重做日志文件时都会调用fsync操作，将数据同步到磁盘，因此重做日志文件写入的效率与fsync操作调用的频率有关，允许用户控制重做日志刷新到磁盘的策略，主要由三种策略，事务提交时必须调用一次fsync；事务提交时不进行出写入重做日志操作，这个操作交给master thread完成，它会没1秒钟进行一次fsync操作；不进行fsync操作，由操作系统来决定什么时候同步。fsync执行的越频繁效率越低，但是越不容易丢失数据，</p></li><li><p>redo日志的作用</p><p>redo日志是来保证数据库的持久性的，当事务提交后会将修改写入缓存，如果发生了宕机可以通过redo日志来恢复。</p></li><li><p>undo日志的作用</p><p>事务在对数据库进行修改时，由于某种原因失败了，或者用户请求回滚，可以利用undo信息将数据回滚到修改之前的样子。</p><p>undo log属于逻辑日志，它记录的是sql执行相关的信息。当发生回滚时，InnoDB会根据undo log的内容做与之前相反的工作：对于每个insert，回滚时会执行delete；对于每个delete，回滚时会执行insert；对于每个update，回滚时会执行一个相反的update，把数据改回去。</p></li><li><p>为什么redo日志的写入会比刷新脏页的速度快</p><ul><li><p>刷脏是随机IO，因为每次修改的数据位置随机，但写redo log是追加操作，属于顺序IO。</p></li><li><p>刷脏是以数据页（Page）为单位的，MySQL默认页大小是16KB，一个Page上一个小修改都要整页写入；而redo log中只包含真正需要写入的部分，无效IO大大减少。</p></li></ul></li><li><p>redo日志和二进制日志的区别</p><ul><li>作用不同：redo log是用于crash recovery的，保证MySQL宕机也不会影响持久性；binlog是用于point-in-time recovery的，保证服务器可以基于时间点恢复数据，此外binlog还用于主从复制。</li><li>层次不同：redo log是InnoDB存储引擎实现的，而binlog是MySQL的服务器层(可以参考文章前面对MySQL逻辑架构的介绍)实现的，同时支持InnoDB和其他存储引擎。</li><li>内容不同：redo log是物理日志，内容基于磁盘的Page；binlog的内容是二进制的，根据binlog_format参数的不同，可能基于sql语句、基于数据本身或者二者的混合。</li><li>写入时机不同：binlog在事务提交时写入；redo log的写入时机相对多元</li></ul></li></ul><hr><h4 id="8-备份与恢复"><a href="#8-备份与恢复" class="headerlink" title="8. 备份与恢复"></a>8. 备份与恢复</h4><hr><p><em>参考：《MySQL技术内幕：InnoDB存储引擎》</em></p><p><strong>（未完待续）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引总结</title>
      <link href="/2019/12/25/MySQL%E7%B4%A2%E5%BC%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/25/MySQL%E7%B4%A2%E5%BC%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>MySQL索引包含两部分内容，一部分是MySQL索引本身，一部分是B树和B+树。</p><p>对于MySQL索引本身需要了解基本的概念和原理，知道有哪些索引？怎么建立索引？什么时候应该建索引，索引建立在什么字段上。</p><h5 id="1-MySQL索引"><a href="#1-MySQL索引" class="headerlink" title="1. MySQL索引"></a>1. MySQL索引</h5><ul><li><p>什么是索引</p><p>索引是一种用于快速查询和排好序的数据结构</p></li><li><p>索引的分类（分类一定是基于某种标准来分的）</p><ul><li>从数据结构的角度<ul><li>B+树索引</li><li>hash索引</li><li>全文索引</li></ul></li><li>从物理存储角度<ul><li>聚集索引</li><li>非聚集索引</li></ul></li><li>从逻辑角度<ul><li>主键索引</li><li>单列索引</li><li>符合索引</li><li>唯一索引或非唯一索引</li><li>空间索引</li></ul></li></ul></li><li><p>什么是聚集索引，什么是非聚集索引</p></li></ul><ul><li><p>什么时候需要建立索引</p><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其他表管理的字段，外键关系建立索引</li><li>查询中排序的字段建立索引</li><li>查询中统计或者分组字段</li></ol></li><li><p>说明时候不需要建立索引</p><ul><li>表记录太少</li><li>经常增删改的表</li><li>where条件用不到的字段</li><li>数据区分度比较小的字段、</li></ul></li></ul><h5 id="2-B树和B-树的概念"><a href="#2-B树和B-树的概念" class="headerlink" title="2. B树和B+树的概念"></a>2. B树和B+树的概念</h5><ul><li><p>什么是B+树</p><p>B+树是一个多路的平衡搜索树，B+树的结点由有序的元素和指针组成，指针的个数称为B+树的阶，根节点至少有一个元素，非根节点元素的范围为m/2&lt;=k&lt;=m-1,B+树有两种类型的节点，内部节点和叶子节点，内部节点不存储数据，只存储所有，数据都存储在叶子节点。内部节点的key是按顺序存放的，元素的左子树的key都小于它，右子树的key都大于它，叶子结点中的记录也按照key的大小排列。每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接。父节点存有右孩子的第一个元素的索引。</p></li></ul><ul><li><p>什么是B树</p><p>B树也称B-树,它是一颗多路平衡查找树。二叉树我想大家都不陌生，其实，B树和后面讲到的B+树也是从最简单的二叉树变换而来的</p><ul><li><p>每个节点最多有m-1个<strong>关键字</strong>（可以存有的键值对）。</p></li><li><p>根节点最少可以只有1个<strong>关键字</strong>。</p></li><li><p>非根节点至少有m/2个<strong>关键字</strong>。</p></li><li><p>每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</p></li><li><p>所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。</p></li><li><p>每个节点都存有索引和数据，也就是对应的key和value。</p></li></ul></li></ul><h5 id="3-对比以下B-树比B树的优点（为什么用B-树作为索引而不是B树）"><a href="#3-对比以下B-树比B树的优点（为什么用B-树作为索引而不是B树）" class="headerlink" title="3. 对比以下B+树比B树的优点（为什么用B+树作为索引而不是B树）"></a>3. 对比以下B+树比B树的优点（为什么用B+树作为索引而不是B树）</h5><ul><li>单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。</li><li>所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。</li><li>所有的叶子节点形成了一个有序链表，更加便于查找。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> MySQL索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP数据流与窗口管理</title>
      <link href="/2019/12/22/TCP%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%8E%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
      <url>/2019/12/22/TCP%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%8E%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id="1-交互式通信"><a href="#1-交互式通信" class="headerlink" title="1. 交互式通信"></a>1. 交互式通信</h5><ul><li><p>什么是交互式通信</p><p>交互式通信是指双方通信时传输一些较小的信息，这些信息会封装成<strong>较小的报文段</strong>，但是<strong>又希望延迟尽量低</strong>。这里的问题在于，TCP每次传输的信息量很少（也就是说大部分都是TCP首部）降低了网络的利用率，但是如果让TCP发送的数据多一点(比如说几个小数据累积在一起后发送)又会带来较大的时延，如何平衡这两者关系是交互式通信要研究的问题。</p></li><li><p>交互式通信是如何做的</p><p>通常交互式通信，用户在一端输入信息希望马上看到另一方的回显信息，采取的做法是首先发送方向接收方发送一个报文，接收方收到报文后要对其进行确认，但是不同的是接收方会把回显信息与ACK信息一起返回，发生放收到后再进行确认，通过这样的优化，可以少发一个报文并且发送方也可以少等一个报文发送的时间。</p></li></ul><h5 id="2-延迟确认"><a href="#2-延迟确认" class="headerlink" title="2. 延迟确认"></a>2. 延迟确认</h5><p>TCP不会对每一个数据包都返回ACK确认,而是<strong>采取累积确认</strong>的方式，这样就可以大量减少网络中的ACK数据包，但是TCP不能够延迟任意时长，否则发送方会超时，不同的操作系统实现的延时时间不一样。延时确认不能用在对时延要求高的应用上。</p><h5 id="3-Nagle算法"><a href="#3-Nagle算法" class="headerlink" title="3. Nagle算法"></a>3. Nagle算法</h5><ul><li><p>Nagle算法解决了什么问题</p><p>Nagle算法是一种拥塞控制算法。每次发送少量的数据时，TCP的头部和IP的首部会有很大的开销，这会造成相当高的网络传输代价（这种代价对局域网没有影响，对广域网可能造成拥塞，如糊涂窗口综合征），Nagle算法就是用来解决这种<strong>小包可能导致网络拥塞的问题</strong>。</p></li><li><p>Nagle算法的原理</p><p>Nagle算法要求，当一个TCP连接中有在传数据（已经发生但还未经确认），小的报文段（长度小于SMSS，SMSS是指发送方能够发送的最大数据段的长度）就不能被发送，直到所有的在传数据都收到ACK，TCP会将小数据收集整合到一个报文段中发送。大的报文段不受Nagle算法的影响，实际上Nagle算法对于小的报文段来说就是一个停止等待协议。</p></li><li><p>Nagle算法为什么有效</p><p>因为要等到所有在传数据收到ACK才发小数据，那么ACK返回的越快，小数据包传输也就越快，如果是时延比较高的广域网中，ACK返回就会越慢，小数据被发送出去的速度也会变慢，这样小数据包就不会加重网络的阻塞。也就是说RTT可以控制发包速率。</p></li><li><p>如果延时ACK与Nagle算法结合会发生什么</p><p>延时ACK与Nagle算法直接结合使用效果会很差，延迟确认会使得接受方推迟发送ACK报文，而使用了Nagle算法的发送方又要等到接收到ACK报文才发送，<strong>导致网络处于空闲状态</strong>。</p></li><li><p>Nagle算法不适用于什么场景</p><p><strong>要求时延尽量小的应用不适合使用Nagle算法</strong>如网络游戏，远程控制等。</p></li></ul><h5 id="4-流量控制与窗口管理"><a href="#4-流量控制与窗口管理" class="headerlink" title="4. 流量控制与窗口管理"></a>4. 流量控制与窗口管理</h5><p>TCP使用滑动窗口来实现流量控制，”流量控制“控制的是发送方的发送速率，它与拥塞控制不同的是，流量控制考虑的是接收方的接受能力（如果接收方接受能力差，接收缓存满了，发送方发过来的数据包就会被丢弃然后重传，显然这是不必要的）</p><ul><li><p>滑动窗口的机制</p><p>发送方和接收方都会维护一个窗口，称为<strong>发送窗口</strong>和<strong>接收窗口</strong>，它们都是<strong>以字节为单位</strong>的。</p><ul><li><p>发送窗口</p><p>假设发送窗口向右移动，则发送窗口左边的数据是<strong>已经发送且确认</strong>了的可以从缓存区中清除，发送窗口右边的数据是<strong>还不能发送的</strong>，发送窗口内部维护了一个指针，指针的左边是<strong>已发送但还未确认</strong>的数据，指针右边是<strong>可发送但还未发送</strong>的数据。</p></li><li><p>接收窗口</p><p>接收窗口左边界的数据是<strong>已接受并确认</strong>的数据，右窗口是<strong>不能接收</strong>的数据，窗口内部是<strong>接受后还未确认</strong>的数据</p></li></ul></li><li><p>如何利用滑动窗口实现流量控制</p><p>TCP发送端向接收端使用滑动窗口机制发送数据，发送速率取决于发送方的发送窗口大小，所以为了实现流量控制，接收方会携带窗口大小信息来控制发送方发送窗口的大小，以达到发送端流量控制的目的。</p></li><li><p>零窗口问题</p><p>流量控制过程中的一种极端情况是，接收端告知发送端窗口为0，这样发送端就无法发送数据给接收端了，当接收端窗口大小恢复为非零值，会给发送端传输一个<strong>窗口更新报文</strong>告知其可以继续发送数据，但是如果发送方发送的一个包含窗口更新的ACK丢失了，通信双方就会一直处于等待状态。</p></li><li><p>TCP持续计时器</p><p><strong>持续计时器解决了零窗口问题</strong>，发送端会维护一个持续计时器间歇性的查询接收端，看其窗口是否已经增长。计时器会触发发送端发送一个<strong>窗口探测报文</strong>，接收端会回一个带有窗口信息的ACK报文。采用指数退避的方式来设置持续计时器的时间。</p></li><li><p>糊涂窗口综合症</p><p>糊涂窗口综合症是指当发送端应用进程产生数据很慢、或接收端应用进程处理接收缓冲区数据很慢，或二者兼而有之；就会使<strong>应用进程间传送的报文段很小，特别是有效载荷很小</strong>； 极端情况下，有效载荷可能只有1个字节；传输开销有40字节(20字节的IP头+20字节的TCP头) 这种现象。</p><p>发送方和接收方都可能会引发糊涂窗口综合征</p><ul><li><p>发送方</p><p>发送方产生的数据比较慢，每次产生的数据都很小。对于<strong>发送方不应该发送小的报文段，可以使用Nagle算法来控制何时发送</strong></p></li><li><p>接收方</p><p>接收方的原因是进程处理缓存中的数据不及时，然后通知了一个较小的窗口给发送方。对于<strong>接收方应该避免通告小的窗口值，可以使用延迟确认的方式等缓存中的数据被情空了再告知窗口值</strong>。</p></li></ul></li></ul><h5 id="5-紧急机制"><a href="#5-紧急机制" class="headerlink" title="5. 紧急机制"></a>5. 紧急机制</h5><p><strong>带外数据</strong></p><p>传输层协议使用带外数据（out-of-band，OOB）来发送一些重要的数据，如果通信一方有重要的数据需要通知对方时，协议能够将这些数据快速地发送到对方。为了发送这些数据，协议一般不使用与普通数据相同的通道，而是使用另外的通道。</p><p>TCP协议没有真正意义上的带外数据。为了发送重要协议，TCP提供了一种称为紧急模式（urgent mode）的机制。TCP协议在数据段中设置URG位，表示进入紧急模式。接收方可以对紧急模式采取特殊的处理。</p><p><strong>紧急模式</strong></p><p>TCP头部有一个位字段URG标志紧急数据，当URG位为1时，TCP头部节点的紧急指针位会记录一个偏移量，指向紧急数据的最后一位，在读取到紧急指针所指向的位置之前，TCP的接受进程都处于紧急状态，当读取到紧急数据后一位时，恢复到正常状态。</p><p>当URG置1时，发送方应用进程就告诉发送方的TCP有紧急数据要传送。于是发送方TCP就把紧急数据插入到本报文段数据的最前面。</p><p>在紧急指针字段的具体实现上，由于过去的文档有错误或不太明确的地方，因而导致对有关RFC文档产生了不同的理解。</p><hr><p><em>参考：《TCP/IP详解 卷1：协议》Kevin R. Fall W.Richard Stevens</em></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 传输层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议总结</title>
      <link href="/2019/12/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AEHTTP/"/>
      <url>/2019/12/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AEHTTP/</url>
      
        <content type="html"><![CDATA[<p>通常计算机网络的知识中，每一层都会要求深入了解一个协议，而应用层协议是我们日常接触到的最多的协议，HTTP则是应用层协议中最常用的协议，所以一定一定要对HTTP协议有非常深刻的认识。除了要理解HTTP协议本身（这里通常指的是HTTP1.1），我们还要对不同版本的HTTP进行研究，如HTTP1.0/HTTP1.1/HTTP2.0,要了解每一个版本的协议的特点，解决了上一个版本的哪一个问题。</p><h5 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h5><ul><li><p>HTTP协议是什么（下一个定义）</p><p>HTTP被设计于20世纪90年代初期，是一种可扩展的协议。它是应用层的协议，通过TCP或者是TLS加密的TCP连接来发送，理论上任何可靠的传输协议都可以使用。因为其良好的扩展性，时至今日，它不仅被用来传输超文本文档，还用来传输图片、视频或者向服务器发送如HTML表单这样的信息。HTTP还可以根据网页需求，仅获取部分Web文档内容更新网页。</p></li><li><p>HTTP的组件有哪些</p><ul><li><p>客户端（用户代理）</p><p>就是任何能够为用户发起行为的工具，大多数时指的是浏览器，但是只要能够发起http请求的都成为用户代理，如程序员写的爬虫等</p></li><li><p>代理</p><p>在浏览器和服务器之间，有许多计算机和其他设备转发了HTTP消息。由于Web栈层次结构的原因，它们大多都出现在传输层、网络层和物理层上，对于HTTP应用层而言就是透明的，虽然它们可能会对应用层性能有重要影响。还有一部分是表现在应用层上的，被称为<strong>代理（Proxies）</strong>。代理（Proxies）既可以表现得透明，又可以不透明（“改变请求”会通过它们）。</p><p>常用的代理的作用：</p><ul><li>缓存</li><li>过滤</li><li>负载均衡</li><li>认证</li><li>日志记录</li></ul></li><li><p>服务端</p><p>提供客户端请求的文档或资源的运行在服务器上的程序</p></li></ul></li><li><p>HTTP的特点</p><ul><li><p>HTTP是简单的，HTTP1.1和HTTP1.0都是基于ASCII码的文本协议，非常易读</p></li><li><p>HTTP是可扩展的，通过添加headers,只要服务端和客户端就新 headers 达成语义一致，新功能就可以被轻松加入进来.</p></li><li><p>HTTP是<strong>无状态</strong>的（重点，什么是无状态）：在同一个连接中，两个执行成功的请求之间是没有关系的，服务器不能确定两个来自同一个连接的http请求是不是同一个用户</p></li><li><p>HTTP与连接</p><p>HTTP并不需要其底层的传输层协议是面向连接的，只需要它是可靠的，或不丢失消息的（这句话是说HTTP不要求底层协议面向连接），但是通常HTTP协议基于TCP协议（这里说的是通常还是基于面向连接的协议）</p><p>HTTP1.0 一次HTTP请求响应就要建立和释放一次TCP连接</p><p>HTTP1.1引入了流水线（很难实现）和持久连接（TCP连接在一个给定的时间内不会被释放）的机制。</p><p>HTTP2.0</p></li></ul></li><li><p>HTTP的工作过程</p><ol><li>打开一个TCP连接</li><li>发送一个HTTP报文（请求报文）</li><li>读取服务端返回的报文信息（响应报文）</li><li>关闭连接或者为后续请求重用连接</li></ol><p>其中第一步和最后一步是对底层传输层协议的控制，不同的HTTP版本是不一样的</p></li><li><p>HTTP报文的结构（问你对HTTP报文是否了解）</p><ul><li><p>请求报文</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AEHTTP/image-20200119104706044.png" alt="image-20200119104706044"></p></li><li><p>响应报文</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AEHTTP/image-20200119104621779.png" alt="image-20200119104631508"></p></li></ul></li></ul><hr><h5 id="2-HTTP缓存"><a href="#2-HTTP缓存" class="headerlink" title="2. HTTP缓存"></a>2. HTTP缓存</h5><ul><li><p>缓存的作用</p><p>缓解服务器端压力，提升性能(获取资源的耗时更短了)。对于网站来说，缓存是达到高性能的重要组成部分。</p></li><li><p>什么是web缓存</p><p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载</p></li><li><p>HTTP缓存的分类</p><ul><li><p>私有缓存</p><p>私有缓存只能用于单独用户，如用户浏览器中的缓存</p></li><li><p>共享缓存</p><p>共享缓存存储的响应能够被多个用户使用，如缓存代理服务器。</p></li></ul></li><li><p>缓存什么样的资源</p><p>​    HTTP缓存只能缓存GET方法请求的资源，其他方法响应的资源无能为力。</p></li><li><p>缓存如何控制</p><p>这个问题指的是怎么对资源进行缓存？</p><ul><li><p>Cache-Controller请求头</p><ul><li><p>禁止进行缓存</p><p>缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。(就是说不使用缓存)</p><pre><code class="http">Cache-Control: no-store</code></pre></li><li><p>强制确认缓存</p><p>每次有请求发出时，缓存会将此请求发到服务器（译者注：该请求应该会带有与本地缓存相关的验证字段），服务器端会验证请求中所描述的缓存是否过期，若未过期（注：实际就是返回304），则缓存才使用本地缓存副本</p><pre><code class="http">Cache-Control: no-cache</code></pre></li><li><p>私有缓存和公共缓存</p><p>“public” 指令表示该响应可以被任何中间人（译者注：比如中间代理、CDN等）缓存。若指定了”public”，则一些通常不被中间人缓存的页面（译者注：因为默认是private）（比如 带有HTTP验证信息（帐号密码）的页面 或 某些特定状态码的页面），将会被其缓存。</p><p>而 “private” 则表示该响应是专用于某单个用户的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。（设置的是缓存类型）</p><pre><code class="http">Cache-Control: privateCache-Control: public</code></pre></li><li><p>缓存过期机制</p><p>max-age表示资源能够被缓存的最大时间，也就是说资源多久之后会过期。（设置缓存过期时间）</p><pre><code class="http">Cache-Control: max-age=31536000</code></pre></li></ul></li><li><p>Pragma头</p><p>Pragma 是HTTP/1.0标准中定义的一个header属性，请求中包含Pragma的效果跟在头信息中定义Cache-Control: no-cache相同，但是HTTP的响应头没有明确定义这个属性，所以它不能拿来完全替代HTTP/1.1中定义的Cache-control头。通常定义Pragma以向后兼容基于HTTP/1.0的客户端。（只用理解他是http1.0的东西，通常我们不用了解http1.0的具体细节）</p></li></ul></li><li><p>新鲜度</p><ul><li><p>缓存驱逐</p><p>理论上来讲，当一个资源被缓存存储后，该资源应该可以被永久存储在缓存中。由于缓存只有有限的空间用于存储资源副本，所以缓存会定期地将一些副本删除，这个过程叫做缓存驱逐。</p></li><li><p>什么是新鲜度</p><p>当服务器上面的资源进行了更新，那么缓存中的对应资源也应该被更新，由于HTTP是C/S模式的协议，服务器更新一个资源时，不可能直接通知客户端更新缓存，所以双方必须为该资源约定一个过期时间，在该过期时间之前，该资源（缓存副本）就是新鲜的。（简单的说就是这个资源还没过期就是新鲜的）</p></li><li><p>如何清除掉陈旧的资源</p><ul><li><p>驱逐算法用于将陈旧的资源（缓存副本）替换为新鲜的，注意，一个陈旧的资源（缓存副本）是不会直接被清除或忽略的，当客户端发起一个请求时，缓存检索到已有一个对应的陈旧资源（缓存副本），则缓存会先将此请求附加一个<code>If-None-Match</code>头，然后发给目标服务器，以此来检查该资源副本是否是依然还是算新鲜的，若服务器返回了 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304" target="_blank" rel="noopener"><code>304</code></a> (Not Modified)（该响应不会有带有实体信息），则表示此资源副本是新鲜的。</p></li><li><p>对于含有特定头信息的请求，会去计算缓存寿命。比如<code>Cache-control: max-age=N</code>的头，相应的缓存的寿命就是<code>N</code>。通常情况下，对于不含这个属性的请求则会去查看是否包含<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires" target="_blank" rel="noopener">Expires</a>属性，通过比较Expires的值和头里面<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Date" target="_blank" rel="noopener">Date</a>属性的值来判断是否缓存还有效。如果max-age和expires属性都没有，找找头里的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified" target="_blank" rel="noopener">Last-Modified</a>信息。如果有，缓存的寿命就等于头里面Date的值减去Last-Modified的值除以10</p></li></ul></li></ul></li><li><p>加速资源</p><p>更多地利用缓存资源，可以提高网站的性能和响应速度。为了优化缓存，过期时间设置得尽量长是一种很好的策略。对于定期或者频繁更新的资源，这么做是比较稳妥的，但是对于那些长期不更新的资源会有点问题。</p><ul><li><p>如何解决长期不更新资源的更新问题</p><p>不频繁更新的文件会使用特定的命名方式：在URL后面（通常是文件名后面）会加上版本号。加上版本号后的资源就被视作一个完全新的独立的资源，同时拥有一年甚至更长的缓存过期时长。</p></li><li><p>问题</p><p>需要手动的修改每一个引用该资源的地方</p></li></ul></li><li><p>缓存如何验证</p><ul><li><p>什么时候开始缓存验证</p><ul><li>用户点击刷新按钮</li><li>如果缓存的响应头信息里含有”Cache-control: must-revalidate”的定义，在浏览的过程中也会触发缓存验证</li><li>在浏览器偏好设置里设置Advanced-&gt;Cache为强制验证缓存也能达到相同的效果</li></ul></li><li><p>ETags</p><p>客户端请求一个页面（A）。 服务器返回页面A，并在给A加上一个ETag。 客户端展现该页面，并将页面连同ETag一起缓存。 客户再次请求页面A，并将上次请求时服务器返回的ETag一起传递给服务器。 服务器检查该ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304（未修改——Not Modified）和一个空的响应体。（能区分相同URL不同的对象）</p></li></ul></li><li><p>带Vary头的响应</p><p>不同客户端对内容格式的支持程度不同（比如有些支持数据压缩，有些不支持），所以即便请求URL 和请求方法都相同，服务器返回的数据也会不同（称为内容协商）。Vary 字段记录了缓存服务器返回特定数据参考了哪些请求字段。缓存服务器拿到源服务器的响应报文，会根据 Vary 里的字段列表，缓存不同版本的数据。当客户端再次访问时，缓存服务器会分析请求字段，返回正确的版本。（这段话的意思是，相同的资源有不同的版本，如何正确返回）</p></li></ul><hr><h5 id="3-HTTP-Cookies"><a href="#3-HTTP-Cookies" class="headerlink" title="3. HTTP Cookies"></a>3. HTTP Cookies</h5><ul><li><p>Cookies是什么</p><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。（简单的说Cookies是存在客户端的会话管理技术）</p></li><li><p>Cookies有什么用</p><ul><li>会话状态管理</li><li>个性化设置</li><li>浏览器行为跟踪</li></ul></li><li><p>如何设置Cookies</p><p>服务端通过如下请求头设置客户端的Cookues</p><pre><code class="http">Set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</code></pre></li><li><p>Cookies的有效时间</p><ul><li><p>会话期Cookies</p><p>会话期Cookie是最简单的Cookie：浏览器关闭之后它会被自动删除，不需要指定过期时间或者有效期。有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期Cookie也会被保留下来，就好像浏览器从来没有关闭一样。（思考怎么办？）</p></li><li><p>持久性Cookies</p><p>和关闭浏览器便失效的会话期Cookie不同，持久性Cookie可以指定一个特定的过期时间（<code>Expires</code>）或有效期（<code>Max-Age</code>）</p><p>当Cookie的过期时间被设定时，设定的日期和时间只与客户端相关，而不是服务端。</p><pre><code class="http">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</code></pre></li></ul></li><li><p>Cookies的标记</p><ul><li><p>Secure</p><p>标记为 <code>Secure</code> 的Cookie只应通过被HTTPS协议加密过的请求发送给服务端（但是敏感信息不能放在Cookies中，有的浏览器会禁止Secure这个标记）</p></li><li><p>HttpOnly</p><p>如果包含服务端 Session 信息的 Cookie 不想被客户端 JavaScript 脚本调用，那么就应该为其设置 <code>HttpOnly</code> 标记（防止跨站脚本攻击XSS）</p></li></ul></li><li><p>Cookie的作用域</p><p><code>Domain</code> 和 <code>Path</code> 标识定义了Cookie的<em>作用域：</em>即Cookie应该发送给哪些URL。</p><ul><li><p>Domain</p><p><code>Domain</code> 标识指定了哪些主机可以接受Cookie。如果不指定，默认为当前文档的主机</p></li><li><p>Path</p><p><code>Path</code> 标识指定了主机下的哪些路径可以接受Cookie</p></li></ul></li><li><p>SameSite Cookie</p><p><code>SameSite</code> Cookie允许服务器要求某个cookie在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击（CSRF）</p><ul><li><p>None</p><p>浏览器会在同站请求、跨站请求下继续发送cookies，不区分大小写。</p></li><li><p>Strict</p><p>浏览器将只发送相同站点请求的cookie(即当前网页URL与请求目标URL完全一致)。如果请求来自与当前location的URL不同的URL，则不包括标记为Strict属性的cookie。</p></li><li><p>Lax</p><p>在新版本浏览器中，为默认选项，Same-site cookies 将会为一些跨站子请求保留，如图片加载或者frames的调用，但只有当用户从外部站点导航到URL时才会发送。如link链接</p></li></ul></li></ul><hr><h5 id="4-跨域问题"><a href="#4-跨域问题" class="headerlink" title="4. 跨域问题"></a>4. 跨域问题</h5><ul><li><p>同源策略</p><p>同源策略是浏览器的一个安全策略，所谓同源是指，域名，协议，端口相同。</p><p>同源策略是浏览器的行为，是为了保护本地数据不被JavaScript代码获取回来的数据污染，因此拦截的是客户端发出的请求回来的数据接收，即请求发送了，服务器响应了，但是无法被浏览器接收。</p></li><li><p>什么是跨域访问问题</p><p>为了用户浏览的安全，浏览器使用了同源策略，禁止浏览器在一个域中访问另一个域的资源，但是有的时候我们必须要访问不同域的问题，这样就造成了跨域问题。</p></li><li><p>如何解决跨域访问问题(之后重点讲)</p><ul><li>跨域资源共享（CORS）</li><li>jsonp</li><li>nginx反向代理</li></ul></li><li><p>CORS</p><p>跨域资源共享是一种机制，它使用额外的HTTP头来告诉浏览器 让运行在一个 origin上的Web应用被准许访问来自不同源服务器上的指定的资源。跨域资源共享机制<strong>允许 Web 应用服务器进行跨域访问控制</strong>，从而使跨域数据传输得以安全进行</p><ul><li>请求分为两种，不同种类的请求处理不同<ul><li>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段，<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求，如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误。</li><li>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求。一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个<code>Origin</code>头信息字段。服务器的回应，也都会有一个<code>Access-Control-Allow-Origin</code>头信息字段</li></ul></li></ul></li><li><p>JSONP</p><ul><li>JSONP只支持<code>GET</code>请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li></ul></li></ul><hr><h5 id="5-HTTP协议的演变"><a href="#5-HTTP协议的演变" class="headerlink" title="5. HTTP协议的演变"></a>5. HTTP协议的演变</h5><p>这一节讲的是HTTP的发展史从HTTP0.9到HTTP1.0再到HTTP1.1再到HTTP2.0,需要了解每个版本协议的特点。</p><ul><li><p>HTTP0.9（单行协议，最早的版本，所以功能很少，不能以现在的眼光去看待这个协议）</p><p>HTTP/0.9 极其简单：请求由单行指令构成，以唯一可用方法GET开头，其后跟目标资源的路径.</p><pre><code class="http">GET /mypage.html</code></pre><p>响应也极其简单的：只包含响应文档本身。</p><pre><code class="html">&lt;HTML&gt;这是一个非常简单的HTML页面&lt;/HTML&gt;</code></pre></li><li><p>HTTP1.0（构建扩展性，这个时候的HTTP协议已经有了现代协议的雏形了，但是没有完成标准化）</p><ul><li>比上一代的优点<ul><li>协议版本信息现在会随着每个请求发送（<code>HTTP/1.0</code>被追加到了<code>GET</code>行）。</li><li>状态码会在响应开始时发送，使浏览器能了解请求执行成功或失败，并相应调整行为（如更新或使用本地缓存）。</li><li>引入了HTTP头的概念，无论是对于请求还是响应，允许传输元数据，使协议变得非常灵活，更具扩展性。</li><li>在新HTTP头的帮助下，具备了传输除纯文本HTML文件以外其他类型文档的能</li></ul></li></ul></li><li><p>HTTP1.1（标准化协议，20多年后的今天依然还有很多人使用）</p><ul><li>比上一代的优点<ul><li>连接可以复用，节省了多次打开TCP连接加载网页文档资源的时间。</li><li>增加流水线操作，允许在第一个应答被完全发送之前就发送第二个请求，以降低通信延迟。（难以实现）</li><li>支持响应分块。</li><li>引入额外的缓存控制机制。</li><li>引入内容协商机制，包括语言，编码，类型等，并允许客户端和服务器之间约定以最合适的内容进行交换。</li><li>使用Host，能够使不同域名配置在同一个IP地址的服务器上。</li></ul></li></ul></li><li><p>HTTP2.0</p><p>这些年来，网页愈渐变得的复杂，甚至演变成了独有的应用，可见媒体的播放量，增进交互的脚本大小也增加了许多：更多的数据通过HTTP请求被传输。HTTP/1.1链接需要请求以正确的顺序发送，理论上可以用一些并行的链接（尤其是5到8个），带来的成本和复杂性堪忧。比如，HTTP流水线就成为了Web开发的负担。（这是说虽然http1.1流水线解决了某些问题，但是引入了复杂性，解决的不够优雅，自然HTTP2.0会重新解决这个问题）</p><ul><li>特点<ul><li>HTTP/2是二进制协议而不是文本协议。不再可读，也不可无障碍的手动创建，改善的优化技术现在可被实施。（改变了协议的格式）</li><li>这是一个复用协议。并行的请求能在同一个链接中处理，移除了HTTP/1.x中顺序和阻塞的约束。（连接复用，并行的请求可以在同一个连接中完成）</li><li>压缩了headers。因为headers在一系列请求中常常是相似的，其移除了重复和传输重复数据的成本。（压缩了头部，将报文段的长度减少了）</li><li>其允许服务器在客户端缓存中填充数据，通过一个叫服务器推送的机制来提前请求。（引入服务端推送机制）</li></ul></li></ul></li><li><p>HTTPS</p><p>HTTP的版本解决的是HTTP协议的效率问题，每一代都有效率上的提升，但是没有解决安全问题，HTTPs就是来解决安全的。</p><p>HTTP协议遇到的安全问题</p><ul><li>篡改</li><li>监听</li><li>伪造</li></ul><p>简单的说HTTPS就是在HTTP协议之下TCP之上引入了TLS协议</p></li></ul><hr><h5 id="6-HTTP消息"><a href="#6-HTTP消息" class="headerlink" title="6. HTTP消息"></a>6. HTTP消息</h5><p>这一节讲的是HTTP报文的格式，这是学习任何一个协议都要注意的问题</p><ul><li><p>HTTP请求报文</p><ul><li><p>请求行</p><p>HTTP请求是由客户端发出的消息，用来使服务器执行动作。<em>起始行 (start-line)</em> 包含三个元素</p><ul><li>请求方法</li><li>请求目标（URL）</li><li>HTTP版本</li></ul></li><li><p>请求头</p><p>分为三种类型</p><ul><li>通用头部</li><li>请求头部</li><li>实体头部</li></ul></li><li><p>请求体</p><p>有些请求将数据发送到服务器以便更新数据：常见的的情况是 POST 请求（包含 HTML 表单数据）</p></li></ul></li><li><p>HTTP响应报文</p><ul><li><p>响应行</p><p>HTTP 响应的起始行被称作 <em>状态行</em> <em>(status line)</em>，包含以下信息：</p><ul><li>协议版本</li><li>状态码</li><li>状态文本信息</li></ul><pre><code class="http">HTTP/1.1 404 Not Found</code></pre></li><li><p>响应头</p></li><li><p>响应体</p><p>响应的最后一部分是 body。不是所有的响应都有 body：具有状态码 (如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201" target="_blank" rel="noopener"><code>201</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204" target="_blank" rel="noopener"><code>204</code></a>) 的响应，通常不会有 body</p></li></ul></li><li><p>HTTP2帧格式</p><ul><li>HTTP/1.x 报文有一些性能上的缺点：<ul><li>Header 不像 body，它不会被压缩。</li><li>两个报文之间的 header 通常非常相似，但它们仍然在连接中重复传输。</li><li>无法复用。当在同一个服务器打开几个连接时：TCP 热连接比冷连接更加有效</li></ul></li><li>HTTP/2 引入了一个额外的步骤：它将 HTTP/1.x 消息分成帧并嵌入到流 (stream) 中。数据帧和报头帧分离，这将允许报头压缩。将多个流组合，这是一个被称为 <em>多路复用 (multiplexing)</em> 的过程，它允许更有效的底层 TCP 连接。</li><li>HTTP 帧现在对 Web 开发人员是透明的。在 HTTP/2 中，这是一个在  HTTP/1.1 和底层传输协议之间附加的步骤。Web 开发人员不需要在其使用的 API 中做任何更改来利用 HTTP 帧；当浏览器和服务器都可用时，HTTP/2 将被打开并使用。</li></ul></li></ul><hr><h5 id="6-经典的HTTP会话"><a href="#6-经典的HTTP会话" class="headerlink" title="6. 经典的HTTP会话"></a>6. 经典的HTTP会话</h5><ul><li>建立连接</li><li>发送客户端请求</li><li>服务器响应</li></ul><hr><h5 id="7-HTTP1-x的连接管理"><a href="#7-HTTP1-x的连接管理" class="headerlink" title="7.HTTP1.x的连接管理"></a>7.HTTP1.x的连接管理</h5><p>连接管理是一个 HTTP 的关键话题：打开和保持连接在很大程度上影响着网站和 Web 应用程序的性能。在 HTTP/1.x 里有多种模型：<em>短连接</em>, <em>长连接</em>, 和 <em>HTTP 流水线。</em></p><ul><li><p>短链接</p><p>HTTP 最早期的模型，也是  HTTP/1.0 的默认模型，是短连接。每一个 HTTP 请求都由它自己独立的连接完成；这意味着发起每一个 HTTP 请求之前都会有一次 TCP 握手，而且是连续不断的。</p><p>TCP 协议握手本身就是耗费时间的，所以 TCP 可以保持更多的热连接来适应负载。短连接破坏了 TCP 具备的能力，新的冷连接降低了其性能。</p><p>这是 HTTP/1.0 的默认模型(如果没有指定 Connection协议头，或者是值被设置为 <code>close</code>)。而在 HTTP/1.1 中，只有当Connection被设置为 <code>close</code> 时才会用到这个模型。</p></li><li><p>长连接</p><ul><li><p>短连接有两个比较大的问题：创建新连接耗费的时间尤为明显，另外 TCP 连接的性能只有在该连接被使用一段时间后(<strong>热连接</strong>)才能得到改善（这也是影响性能的一个因素不能忘记）。为了缓解这些问题，<em>长连接</em> 的概念便被设计出来了，甚至在 HTTP/1.1 之前。或者这被称之为一个 <em>keep-alive</em> 连接。</p></li><li><p>一个长连接会保持一段时间，重复用于发送一系列请求，节省了新建 TCP 连接握手的时间，还可以利用 TCP 的性能增强能力。当然这个连接也不会一直保留着：连接在空闲一段时间后会被关闭(服务器可以使用 Keep-Alive 协议头来指定一个最小的连接保持时间。（这里说明了HTTP长连接怎样提高效率的）</p></li><li><p>长连接也还是有缺点的；就算是在空闲状态，它还是会消耗服务器资源，而且在重负载时，还有可能遭受 DoS attacks攻击。这种场景下，可以使用非长连接，即尽快关闭那些空闲的连接，也能对性能有所提升。（这段话说明长连接潜在的问题）</p></li><li><p>在 HTTP/1.1 里，默认就是长连接的，协议头都不用再去声明它。</p></li></ul></li></ul><ul><li><p>HTTP流水线</p><ul><li>默认情况下，HTTP请求是按顺序发出的。下一个请求只有在当前请求收到应答过后才会被发出。由于会受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。</li><li>流水线是在同一条长连接上发出连续的请求，而不用等待应答返回。这样可以避免连接延迟</li><li>目前没有现代浏览器默认启用这个特性，流水线很复杂，难以实现</li></ul></li><li><p>域名分片</p><ul><li>这是一种过时技术，如果用这个机制不如升级到HTTP2.0</li><li>这种机制的理论是：浏览器为每个域名的连接都是有限的，如果要加快访问速度，可以想到的就是为每个域名增加连接数量，但是这无法实现（无法改变浏览器的行为），一种妥协的方法是，将同一个域名的资源拆分到不同的域中，这样连接数量就可以提高，从而提高性能，但是这种解决方法不够优雅。</li><li>例子：如果服务器端想要更快速的响应网站或应用程序的应答，它可以迫使客户端建立更多的连接。例如，不要在同一个域名下获取所有资源，假设有个域名是 <code>www.example.com</code>，我们可以把它拆分成好几个域名：<code>www1.example.com</code>、<code>www2.example.com</code>、<code>www3.example.com</code>。所有这些域名都指向同一台服务器，浏览器会同时为每个域名建立 6 条连接(在我们这个例子中，连接数会达到 18 条)。这一技术被称作域名分片。</li></ul></li></ul><hr><h5 id="8-HTTP首部"><a href="#8-HTTP首部" class="headerlink" title="8. HTTP首部"></a>8. HTTP首部</h5><ul><li>太多了所以不用记住，只要熟悉常用的就要可以，或者是为了实现某种机制需要的请求头，如设置cookie，缓存控制。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers" target="_blank" rel="noopener">HTTP首部</a></li></ul><h5 id="8-HTTP请求方法"><a href="#8-HTTP请求方法" class="headerlink" title="8. HTTP请求方法"></a>8. HTTP请求方法</h5><p>差不多是面试中问道HTTP必问的问题，需要属性每种方法并且知道他们的区别，还有restful风格api的对应关系，以及每种方法的幂等性，什么是幂等性等问题（京东一面又问到）</p><ul><li>GET</li><li>POST</li><li>PUT</li><li>PETCH</li><li>HEAD</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li></ul><h5 id="9-HTTP状态码"><a href="#9-HTTP状态码" class="headerlink" title="9. HTTP状态码"></a>9. HTTP状态码</h5><ul><li><p>HTTP 响应状态代码指示特定 HTTP请求是否已成功完成。响应分为五类：信息响应(<code>100</code>–<code>199</code>)，成功响应(<code>200</code>–<code>299</code>)，重定向(<code>300</code>–<code>399</code>)，客户端错误(<code>400</code>–<code>499</code>)和服务器错误 (<code>500</code>–<code>599</code>)。</p></li><li><p>记住常用的几个状态码，以及某些状态码的区别如同样是重定向301和304的区别</p></li><li><p>301与304的相同点和不同点</p><p>301和304都表示地址重定向，也就是当访问一个url会被指向另一个url，但是301重定向是永久的移动，304是临时重定向。</p></li></ul><hr><p>参考：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noopener">HTTP协议文档</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">HTTP状态码</a></p></li><li><p><a href="https://juejin.im/post/5a276865f265da432c23b8d2#heading-21" target="_blank" rel="noopener">掘金文章参考文章</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 应用层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> HTTP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPs协议抓包探究</title>
      <link href="/2019/12/22/Https/"/>
      <url>/2019/12/22/Https/</url>
      
        <content type="html"><![CDATA[<h5 id="2-TLS握手过程抓包分析"><a href="#2-TLS握手过程抓包分析" class="headerlink" title="2. TLS握手过程抓包分析"></a>2. TLS握手过程抓包分析</h5><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/http/clipboard_20200219033512.png" alt=""></p><ul><li><p>客户端向服务端发送Client Hello</p><p><code>Client Hello</code>中携带了当前客户端支持的TLS协议的版本号、客户端支持的加密套件、客户端支持的压缩算法以及一个随机数Random_C</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/http/clipboard_20200219040841.png" alt=""></p></li><li><p>服务端向客户端发送Sever Hello</p><p>服务端协商返回确定的信息，如确定使用哪种加密套件（Cipher Suites）或压缩方法等。，以及一个随机生成的序列Random_S</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/http/clipboard_20200219040934.png" alt=""></p></li><li><p>服务端向客户端发送Certificate</p><p>服务器向客户端发送自己的证书</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/http/clipboard_20200219041011.png" alt=""></p><hr><p>客户端收到证书后会校验证书的合法性，合法后进行之后的操作</p></li><li><p>服务端向客户端发送Server key change，Server Hello Done</p><p>服务器端通过Server key change返回给客户端相关D-H算法参数，这些参数后期客户端可以算出会话密钥，如果使用的是RSA算法，那么这一步是不需要的。传递完参数之后，发送Server Hello Done告诉客户端服务器端的握手结束了</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/http/clipboard_20200219041147.png" alt=""></p></li><li><p>客户端向服务端发送Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message</p><p>客户端根据第四步传过来的公钥，生成一个叫预备-主密钥的<code>pre-master key</code>。</p><ul><li><p><code>Client Key Exchange</code>将这个预备-主密钥传给服务器端。服务器端结合自己的私钥解出这个预备-主密钥的信息，得到<strong>第三个随机数</strong>，所以，到目前为止，客户端和服务器都拥有 <strong>Random_C + Random_S + Pre_master key</strong></p></li><li><p><code>Change Cipher Spec</code>这一步是告诉服务器端后期的通信都会使用我们协商出来的密钥进行通信。</p></li><li><p><code>Encrypted Handshake Message</code>是客户端将前面的握手消息生成摘要再用协商好的秘钥加密（对称加密），这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。</p></li></ul><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/http/clipboard_20200219041317.png" alt=""></p></li><li><p>服务端向客户端发送Change Cipher Spec, Encrypted Handshake Message</p><p>如果服务器端通过D-H算法能够解密摘要，那么服务器端应该告诉客户端说我们之间协商的<code>会话密钥</code>是一致的。</p><p><img src="C:%5CUsers%5Czeng%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200219161410054.png" alt=""></p></li></ul><hr><h5 id="3-DH算法"><a href="#3-DH算法" class="headerlink" title="3. DH算法"></a>3. DH算法</h5><p>DH算法是一种可以在不信任通道进行秘钥交换的协议</p><hr><h5 id="4-非对称加密、对称加密算法对比"><a href="#4-非对称加密、对称加密算法对比" class="headerlink" title="4. 非对称加密、对称加密算法对比"></a>4. 非对称加密、对称加密算法对比</h5><ul><li>非对称加密秘钥有两个，加密使用公钥，解密使用私钥。对称加密算法使用同一个秘钥进行加密和解密</li><li>对称加密不能在不受信任的通道中使用，非对称可以</li><li>非对称加密算法计算量大开销大，对称加密计算量少开销小</li></ul><hr><h5 id="5-如何验证身份"><a href="#5-如何验证身份" class="headerlink" title="5. 如何验证身份"></a>5. 如何验证身份</h5><ul><li>申请者通过非对称加密算法（RSA）生成一对<strong>公钥</strong>和<strong>密钥</strong>，然后把需要的申请信息（国家，域名等）连同公钥发送给 <strong>证书认证机构（CA）</strong></li><li>CA构确认无误后通过<strong>消息摘要算法</strong>（MD5，SHA) 生成整个申请信息的摘要签名M， 然后 把 <strong>签名M和使用的摘要算法</strong> 用 <strong>CA自己的私钥</strong> 进行加密</li><li>证书包含了<ul><li>公钥</li><li>证书拥有者身份信息</li><li>数字证书认证机构（发行者）信息</li><li>发行者对这份文件的数字签名及使用的算法</li><li>有效期</li></ul></li><li>通过 <strong>CA的公钥</strong> 去解密得到<strong>证书的签名摘要</strong>的。 再次用 <strong>相同的摘要算法</strong>（证书里面有保存所使用的算法）对整个证书做签名，如果得到的签名和证书上的签名是一致的，说明这个证书确实是该信任的CA颁发的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 应用层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> HTTP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大查找算法</title>
      <link href="/2019/12/21/%E4%B8%89%E5%A4%A7%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
      <url>/2019/12/21/%E4%B8%89%E5%A4%A7%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1. 二分查找"></a>1. 二分查找</h5><ul><li><p>算法思路</p><p>已知数组是有序的，假设是升序的，取中间位置的数字与目标数字进行比较，如果相等那么就找到了，如果中间位置大，目标数字就在右边，下一步只用在数组左半部分查找，假如中间的数字小，则目标数字一个在数组的右边，下一步只用在数组右半部查找。</p></li><li><p>时间复杂度</p><p>O(logn)</p></li><li><p>代码</p><pre><code class="java">public class BinarySearch {    public static void main(String[] args) {        int[] arr={1,2,3,4,5,6,7,8,9};        int search = search(arr, 4);        System.out.println(search);    }    private static int search(int[] arr,int target){        int start=0;        int end=arr.length-1;        while (start&lt;=end){            int mid=start+(end-start)/2;            if (arr[mid]==target){                return mid;            }else if (arr[mid]&gt;target){                end=mid-1;            }else {                start=mid+1;            }        }        return -1;    }}</code></pre></li><li><p>扩展</p><p>如果要求找到与某个数字最接近的数字也可以通过二分查找找到。</p></li></ul><h5 id="2-分块查找"><a href="#2-分块查找" class="headerlink" title="2. 分块查找"></a>2. 分块查找</h5><p>也称索引顺序查找</p><h5 id="3-哈希查找"><a href="#3-哈希查找" class="headerlink" title="3. 哈希查找"></a>3. 哈希查找</h5><ul><li><p>算法思想</p><p>哈希查找是通过计算数据元素的存储地址进行查找的一种方法。在插入元素的时候通过hash函数根据键的值计算出插入的下标位置，元素存放在该下标位置的数组中，如果冲突了可以采用拉链法或者开放地址法解决，查找的时候只需根据键计算出插入位置，然后就能查找到元素。</p></li><li><p>时间复杂度</p><p>O(1)</p></li><li><p>代码</p><p>哈希查找算法的实现在于哈希类的实现，哈希的实现有两个关键：一是hash函数如何选择？而是哈希冲突如何解决？这两个问题很可能会问道，建议百度了解，已经可能会提到优化，比如说java1.8的优化。</p><pre><code class="java">public class HashSearch {    public static void main(String[] args) {        Hash hash=new Hash();        hash.put(1,1);        hash.put(2,2);        hash.put(3,3);        System.out.println(hash.get(1));    }}/** * 实现一个简单的哈希类,采用拉链法解决hash冲突 */class Hash{    private Node[] tables=new Node[10];    public void put(int key,int value){        Node last = getNode(key);        if (last!=null){            last.value=value;            return;        }        int index = hash(key);        if (tables[index]==null){            tables[index]=new Node(key,value);        }else{            Node node = new Node(key, value);            node.next=tables[index];            tables[index]=node;        }    }    private Node getNode(int key){        int index = hash(key);        if (tables[index]==null){            return null;        }        Node p=tables[index];        while (p!=null){            if (p.key==key){                return p;            }            p=p.next;        }        return null;    }    public Integer get(int key){        Node node = getNode(key);        if (node==null){            return null;        }        return node.value;    }</code></pre></li></ul><pre><code>  private int hash(int key){      return key%10;  }  private static class Node{      int key;      int value;      Node next;      public Node(int key, int value) {          this.key = key;          this.value = value;      }  }</code></pre><p>  }</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 经典算法 </category>
          
          <category> 查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法分析</title>
      <link href="/2019/12/20/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2019/12/20/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>排序算法是面试中常问的算法，大厂中排序算法问的深度很深，对排序算法的理解有多个层次</p><ul><li>知道常用算法的写法，了解各种算法的时间复杂度，空间复杂度和稳定性</li><li>了解每种算法的性能瓶颈</li><li>对于每种算法知道如何优化</li><li>知道每种算法的应用场景</li></ul><h5 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1. 选择排序"></a>1. 选择排序</h5><ul><li><p>算法思想</p><p>将一组数据分为两部分，前面是已排序部分，后面是未排序部分，初始状态可认为位置 0 为已排序部分 (数组下标从0开始)，其余为未排序部分，每一次都从未排序部分选择一个最小元素放在已排序部分的末尾，然后已排序部分增加一个元素，未排序部分减少一个元素，直到数据全部有序。</p></li><li><p>时间复杂度</p><p>选择排序无论数据初始是何种状态，均需要在未排序元素中选择最小或最大元素与未排序序列中的首尾元素交换，因此它的最好、最坏、平均时间复杂度均为 O(n^2)。</p></li><li><p>空间复杂度</p><p>空间复杂度为O(1)</p></li><li><p>稳定性</p><p>直接选择排序是不稳定的。因为每次遍历比较完后会使用本次遍历选择的最小元素和无序区的第一个元素交换位置，所以如果无序区第一个元素后面有相同元素的，则可能会改变相同元素的相对顺序（<strong>稳定性：能保证两个相等的数,经过排序之后,其在序列的前后位置顺序不变</strong>）</p></li><li><p>优化思路</p><ol><li>每次查找时不仅找出最小值，还找出最大值，分别插到前面和后面，可以减少一半的查询时间。</li><li>如果数组元素重复率高，可以考虑使用辅助空间在每一次循环的时候，将本次选择的数及相同元素的索引记录下来，一起处理。</li></ol></li><li><p>代码</p><pre><code class="java">public class SelectionSort {    public static void main(String[] args) {        int[] arr={1,4,3,2,3,2,1,2,6};        sort(arr);        for (int i : arr) {            System.out.print(i+&quot; &quot;);        }    }    public static void sort(int[] arr){        for (int i=0;i&lt;arr.length-1;i++){            int minPos=i;            for (int j = minPos+1; j &lt; arr.length; j++) {                if (arr[j]&lt;arr[minPos]){                    minPos=j;                }            }            swap(arr,i,minPos);        }    }    private static void swap(int[] arr,int i,int j){        int temp=arr[i];        arr[i]=arr[j];        arr[j]=temp;    }}</code></pre></li></ul><h5 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.  冒泡排序"></a>2.  冒泡排序</h5><ul><li><p>算法思想</p><p>通过比较相邻的两个元素，将大的元素或者小的元素交换到后面，这样越大或者越小的元素都会交换到数组的后端。</p></li><li><p>时间复杂度</p><p>时间复杂度是O(n^2)</p></li><li><p>空间复杂度</p><p>空间复杂度为O(1)</p></li><li><p>稳定性</p><p>稳定</p></li><li><p>优化思路</p><ul><li>用一个计数器记录交换的次数，当某一轮交换次数为0则表示数组已经有序，那么就不用继续进行了。</li><li>记录最后一次交换的位置，该位置之后没有进行交换说明是有序的了，下一轮只用遍历该位置即可。</li></ul></li><li><p>代码</p><pre><code class="java">public class BubbleSort {    public static void main(String[] args) {        int[] arr={1,4,23,2,1,1,23,2,1,8};        sort(arr);        for (int i=0;i&lt;arr.length;i++){            System.out.print(arr[i]+&quot; &quot;);        }    }    public static void sort(int[] arr){        for (int i=0;i&lt;arr.length-1;i++){            for (int j=0;j&lt;arr.length-i-1;j++){                if (arr[j]&gt;arr[j+1]){                    swap(arr,j,j+1);                }            }        }    }    private static void swap(int[] arr,int i,int j){        int temp=arr[i];        arr[i]=arr[j];        arr[j]=temp;    }}</code></pre></li></ul><h5 id="3-直接-插入排序"><a href="#3-直接-插入排序" class="headerlink" title="3. (直接)插入排序"></a>3. (直接)插入排序</h5><ul><li><p>算法思想</p><p>每趟将一个元素，按照其关键字的大小插入到它前面已经排序的子序列中，依此重复，直到插入全部元素。</p></li><li><p>时间复杂度</p><p>时间复杂度为O(n^2)</p></li><li><p>空间复杂度</p><p>空间复杂度为O(1)</p></li><li><p>稳定性</p><p>稳定</p></li><li><p>优化思路</p><ul><li>希尔排序</li><li>二分查找插入排序<ul><li>二分查找插入排序的原理：是直接插入排序的一个变种，区别是：在有序区中查找新元素插入位置时，为了减少元素比较次数提高效率，采用二分查找算法进行插入位置的确定。</li></ul></li></ul></li><li><p>代码</p><pre><code class="java">public class InsertionSort {    public static void main(String[] args) {        int[] arr={1,5,4,3,2,6,7,8,9};        sort(arr);        for (int i : arr) {            System.out.print(i+&quot; &quot;);        }    }    public static void sort(int[] arr){        for (int i=0;i&lt;arr.length;i++){            int temp=arr[i];            int j=i-1;            for (;j&gt;=0&amp;&amp;arr[j]&gt;temp;j--){                arr[j+1]=arr[j];            }            arr[j+1]=temp;        }    }}</code></pre></li></ul><h5 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4. 希尔排序"></a>4. 希尔排序</h5><ul><li><p>算法思路</p><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p></li><li><p>时间复杂度</p><p>​    时间复杂度取决于增量序列的选择O(n^1.3)</p></li><li><p>空间复杂度</p></li><li><p>稳定性</p><p>不稳定</p></li><li><p>代码</p><pre><code class="java">public class ShellSort {    public static void main(String[] args) {        int[] arr={1,3,2,4,6,5,7,9,8,0};        sort(arr);        for (int i : arr) {            System.out.print(i+&quot; &quot;);        }    }    public static void sort(int [] arr){        // 增量序列        int[] ds={1,3,7};        for (int i=ds.length-1;i&gt;=0;i--){            insertSort(arr,1);        }    }    /**     * 按增量分组进行直接插入排序     * @param arr 数组     * @param d 增量     */    private static void insertSort(int[] arr,int d){        for (int i=0;i&lt;d;i++){            for (int j=i;j&lt;arr.length;j+=d){                int k=j-d;                int temp=arr[j];                for (;k&gt;=i&amp;&amp;arr[k]&gt;temp;k-=d){                    arr[k+d]=arr[k];                }                arr[k+d]=temp;            }        }    }}</code></pre></li></ul><h5 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5. 堆排序"></a>5. 堆排序</h5><ul><li><p>算法思路</p><p>堆是这样一种数据结构，首先堆是一个完全二叉树，其父节点一定大于其所有的子节点。堆排序就是利用堆这种数据结构进行排序，首先构造一个堆，堆顶元素就是最大或最小的元素，把他与堆的最后一个元素交换，这样堆顶元素就调整到了排序后的顺序，而堆的元素个数减少了一个且结构发生了变化，只需要重新调整堆就可以了。循环这个步骤数组就变成有序的了。</p></li><li><p>时间复杂度</p><p>nlogn -&gt; n表示第几轮 logn为调整堆的时间复杂度</p></li><li><p>空间复杂度</p><p>O(1)</p></li><li><p>稳定性</p><p>不稳定</p></li><li><p>代码</p><pre><code class="java">public class HeapSort {    public static void main(String[] args) {        int[] arr={1,4,3,2,5,7,6,8,9,0};        sort(arr);        for (int i : arr) {            System.out.print(i+&quot; &quot;);        }    }    public static void sort(int[] arr){        // 首先要对整个数组进行heapify操作        for (int i=arr.length/2;i&gt;=0;i--){            heapify(arr,arr.length,i);        }        for (int i=1;i&lt;=arr.length;i++){            swap(arr,0,arr.length-i);            heapify(arr,arr.length-i,0);        }    }    private static void swap(int[] arr,int i,int j){        int temp=arr[i];        arr[i]=arr[j];        arr[j]=temp;    }    private static void heapify(int[] arr,int len,int i){        int left=i*2+1;        int right=i*2+2;        int max=i;        if (left&lt;len&amp;&amp;arr[left]&gt;arr[max]){            max=left;        }        if (right&lt;len&amp;&amp;arr[right]&gt;arr[max]){            max=right;        }        if (max!=i){            swap(arr,i,max);            heapify(arr,len,max);        }    }}</code></pre></li></ul><h5 id="6-归并排序"><a href="#6-归并排序" class="headerlink" title="6. 归并排序"></a>6. 归并排序</h5><ul><li><p>算法思路</p><p>基于二路归并算法，将数组分成两个部分，对每一部分递归采取归并排序，这样数组两个部分就排好序了，对于两个已排好序的数组，只需要进行二路归并就可以得到一个有序的数组。</p></li><li><p>时间复杂度</p><p>O(nlogn)</p></li><li><p>空间复杂度</p><p>O(n)</p></li><li><p>稳定性</p><p>稳定</p></li><li><p>优化思路</p><ul><li><p>原地归并</p><p>因为用归并将一个大数组排序时，需要进行多次归并，而且每次归并会都创建一个新数组来存储排序结果会带来问题。由于原地归并排序不需要额外的空间，所以空间复杂度为O(1)。</p></li><li><p>当递归到规模足够小时，利用插入排序 </p></li></ul></li><li><p>代码</p><pre><code class="java">public class MergeSort {    private static int[] tempArr;    public static void main(String[] args) {        int[] arr={1,2,5,4,3,6,9,7,8,0};        sort(arr);        for (int i : arr) {            System.out.print(i+&quot; &quot;);        }    }    public static void sort(int[] arr){        tempArr=new int[arr.length];        sort(arr,0,arr.length-1);    }    private static void sort(int[] arr,int start,int end){        if (start==end){            return;        }        int mid=start+(end-start)/2;        sort(arr,start,mid);        sort(arr,mid+1,end);        merge(arr,start,mid,end);    }    private static void merge(int[] arr,int start,int mid,int end){        System.arraycopy(arr,0,tempArr,0,arr.length);        int i=start;        int j=mid+1;        int k=start;        while (i&lt;=mid&amp;&amp;j&lt;=end){            if (tempArr[i]&lt;tempArr[j]){                arr[k++]=tempArr[i++];            }else{                arr[k++]=tempArr[j++];            }        }        while (i&lt;=mid){            arr[k++]=tempArr[i++];        }        while (j&lt;=end){            arr[k++]=tempArr[j++];        }    }}</code></pre></li></ul><h5 id="7-快速排序"><a href="#7-快速排序" class="headerlink" title="7. 快速排序"></a>7. 快速排序</h5><ul><li><p>算法思路</p><p>快速排序使用分治法策略来把一个序列分为较小和较大的2个子序列，然后递归地排序两个子序列。具体步骤是选择一个元素作为基准元素，将比它小的元素放置在它的左边，将比它大的元素排它的后面，这样基准元素的位置就确定了，然后分别对基准元素左边和右边的序列进行相同操作，每次都能将一个元素排放到正确的位置。</p></li><li><p>时间复杂度</p><p>O(nlogn) 递归的过程O(n) partition过程O(n)-&gt;O(nlogn)</p></li><li><p>空间复杂度</p><p>空间复杂度为logn</p></li><li><p>优化思路</p></li><li><p>代码</p><pre><code class="java">public class QuickSort {    public static void main(String[] args) {        int[] arr={1,4,2,3,6,5,7,9,8,0};        sort(arr);        for (int i : arr) {            System.out.print(i+&quot; &quot;);        }    }    public static void sort(int[] arr){        quickSort(arr,0,arr.length-1);    }    private static void quickSort(int[] arr,int start,int end){        if (start&gt;=end){            return;        }        int pos=partition(arr,start,end);        quickSort(arr,start,pos-1);        quickSort(arr,pos+1,end);    }    private static int partition(int[] arr,int start,int end){       int left=start-1;       int k=start;       while (k&lt;=end){           if(arr[k]&gt;arr[start]){               k++;           }else{               swap(arr,++left,k++);           }       }       swap(arr,start,left);       return left;    }    private static void swap(int[] arr,int i,int j){        int temp=arr[i];        arr[i]=arr[j];        arr[j]=temp;    }}</code></pre></li></ul><h5 id="8-桶排序"><a href="#8-桶排序" class="headerlink" title="8. 桶排序"></a>8. 桶排序</h5><ul><li><p>算法思路</p><p>这是一种算法思想，基于非比较的排序算法，时间复杂度比较低但是一般需要额外的空间，将数组中的元素分配到不同的桶，桶与桶之间是有顺序的，桶的内部元素无序，对每个不为空的桶进行排序（可以使用别的排序算法），然后将不为空的桶中的元素进行输出就可以完成排序。</p></li><li><p>代码</p><pre><code class="java">public class BucketSort {    public static void main(String[] args) {        int[] arr={1,3,2,5,4,6,9,8,7,0};        sort(arr);        for (int i : arr) {            System.out.printf(i+&quot; &quot;);        }    }    public static void sort(int[] arr){        int max=arr[0];        int min=arr[0];        for (int value : arr) {            min = Math.min(value, min);            max = Math.max(value, max);        }        ArrayList&lt;Integer&gt;[] buckets=new ArrayList[max/10-min/10+1];        for (int i=0;i&lt;buckets.length;i++){            buckets[i]=new ArrayList&lt;Integer&gt;();        }        for (int value : arr) {            buckets[(value-min)/10].add(value);        }        for (int i=0;i&lt;buckets.length;i++){            if (buckets[i].size()!=0){                Collections.sort(buckets[i]);            }        }        int k=0;        for (int i=0;i&lt;buckets.length;i++){            if (buckets[i].size()!=0){                for (int j=0;j&lt;buckets[i].size();j++){                    arr[k++]=buckets[i].get(j);                }            }        }    }}</code></pre></li></ul><h5 id="9-基数排序"><a href="#9-基数排序" class="headerlink" title="9. 基数排序"></a>9. 基数排序</h5><ul><li><p>算法思想</p><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。是桶排序思想的一种。是一种多关键字排序。</p></li><li><p>代码</p><pre><code class="java">public class RadixSort {    public static void main(String[] args) {        int[] arr={123,43,231,24,56,432,124};        sort(arr);        for (int i : arr) {            System.out.print(i+&quot; &quot;);        }    }    public static void sort(int[] arr){        int[] result=new int[arr.length];        int[] count=new int[10];        int maxLen=maxLen(arr);        // 分别对十位，个位，百位......进行排序        for (int i=0;i&lt;=maxLen;i++){            int temp= (int) Math.pow(10,i);            for (int value : arr) {                count[value / temp % 10]++;            }            for (int j=1;j&lt;count.length;j++){                count[j]+=count[j-1];            }            for (int j=arr.length-1;j&gt;=0;j--){                result[--count[arr[j]/temp%10]]=arr[j];            }            System.arraycopy(result,0,arr,0,arr.length);            Arrays.fill(count,0);        }    }    private static int maxLen(int[] arr){        int max=arr[0];        for (int i : arr) {            max=Math.max(i,max);        }        int len=0;        while (max!=0){            max/=10;            len++;        }        return len;    }}</code></pre></li></ul><h5 id="10-计数排序"><a href="#10-计数排序" class="headerlink" title="10. 计数排序"></a>10. 计数排序</h5><ul><li><p>算法思路</p><p>准备一个桶，桶的长度为n，且待排序数组的范围都在0到n-1之间，这样数组中的数i就可以放入桶的第i项，桶只要记住每个数字出现的次数，然后扫描桶就可以得到排序后的序列，适合数组范围不大的元素。</p></li><li><p>代码</p><pre><code class="java">public class CountSort {    public static void main(String[] args) {        int[] arr={1,3,2,4,5,6,8,7,9,0};        sort(arr);        for (int i : arr) {            System.out.print(i+&quot; &quot;);        }    }    private static void sort(int[] arr){        int[] count=new int[10];// 计数数组，数组的数的范围落在0-count.length-1        for (int value : arr) {            count[value]++;        }        int k=0;        for (int i=0;i&lt;count.length;i++){            while (count[i]&gt;0){                count[i]--;                arr[k++]=i;            }        }    }}</code></pre></li></ul><h5 id="11-常用排序一览表"><a href="#11-常用排序一览表" class="headerlink" title="11. 常用排序一览表"></a>11. 常用排序一览表</h5><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/image-20200111095013095.png" alt=""></p><h5 id="12-常见面试问题总结"><a href="#12-常见面试问题总结" class="headerlink" title="12. 常见面试问题总结"></a>12. 常见面试问题总结</h5><ul><li>告诉你某种算法，比如很明确的问你某种算法然后不断追问，如快速排序（字节跳动一面）<ol><li>说一下快速排序的思想（先考你知不知道思想）</li><li>快速排序的时间复杂度/空间复杂度/稳定(考一下你会不会分析算法或者说这个算法是不是你背下来的实际上你并不知道或不理解)</li><li>快速排序不适合什么样的数据（考你某种算法的缺点，进一步看你理不理解这个算法）</li><li>如果要排上面的算法，怎么优化（基于某个问题，要求你进行优化，这类问题最深应该就问到这一步了，后面也问不下去了）</li></ol></li><li>不明确告诉你某种算法，问你排某一类特征的数据应该用什么算法排序(字节跳动一面)<ul><li>这类问题难在要逆向思考，你得对所有算法都得足够的熟悉</li><li>问题：排一组比较有序的数组用什么算法，为什么可以用这种算法</li></ul></li></ul><h5 id="13-一些其他排序算法"><a href="#13-一些其他排序算法" class="headerlink" title="13.一些其他排序算法"></a>13.一些其他排序算法</h5><ul><li>置换选择排序</li><li>枚举排序</li></ul><h5 id="14-总结"><a href="#14-总结" class="headerlink" title="14. 总结"></a>14. 总结</h5><ul><li>一共有四种不稳定的排序算法，选择排序，堆排序，希尔排序，快速排序，其他的都是稳定的排序。</li><li>数据的特征大概有：数据基本有序，数据范围不大，数据逆序</li><li>分析数据的时间复杂度必须知道他的循环嵌套关系，以及每层循环的时间复杂度，优化也是这么思考的，看每一层循环这么优化</li><li>空间复杂度比较好分析，但是注意递归的情况，比如快速排序的空间时间复杂度不是O(1)而是logn(上面的表示错误的)</li><li>要理解算法的稳定性有什么影响，不稳定为什么不好？</li></ul>]]></content>
      
      
      <categories>
          
          <category> 经典算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java虚拟机问题总结</title>
      <link href="/2019/12/19/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/19/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="java虚拟机问题总结"><a href="#java虚拟机问题总结" class="headerlink" title="java虚拟机问题总结"></a>java虚拟机问题总结</h3><h4 id="一-自动内存管理机制"><a href="#一-自动内存管理机制" class="headerlink" title="一. 自动内存管理机制"></a>一. 自动内存管理机制</h4><h5 id="1-java虚拟机运行时数据区有哪些，各自的功能"><a href="#1-java虚拟机运行时数据区有哪些，各自的功能" class="headerlink" title="1. java虚拟机运行时数据区有哪些，各自的功能"></a>1. java虚拟机运行时数据区有哪些，各自的功能</h5><ul><li><p>程序计数器</p><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的<strong>行号指示器</strong>。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p></li><li><p>java堆</p><p>此内存区域的唯一目的就是<strong>存放对象实例</strong>，几乎所有的对象实例都在这里分配内存，由于栈上分配、标量替换技术的存在，<strong>对象不一定都在堆中分配</strong>。</p></li><li><p>方法区</p><p>用于存储已被虚拟机加载的<strong>类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。</p></li><li><p>虚拟机栈</p><p>每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个<strong>方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程</strong>。</p></li><li><p>本地方法栈</p><p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/image-20200128195246.png" alt=""></p></li></ul><h5 id="2-永久代和元空间的概念"><a href="#2-永久代和元空间的概念" class="headerlink" title="2. 永久代和元空间的概念"></a>2. 永久代和元空间的概念</h5><p>在JDK1.8之前方法区被称为“永久代”，原因是当时将方法区划分出一块永久代来实现方法区，这样垃圾收集器就可以像管理java堆来管理方法区，而到了jdk1.8，则是使用本地空间实现的元空间来代替永久代。</p><h5 id="3-什么是运行时常量池，存放什么"><a href="#3-什么是运行时常量池，存放什么" class="headerlink" title="3. 什么是运行时常量池，存放什么"></a>3. 什么是运行时常量池，存放什么</h5><p>运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的<strong>各种字面量</strong>和<strong>符号引用</strong>，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><h5 id="4-什么是直接内存，有什么用"><a href="#4-什么是直接内存，有什么用" class="headerlink" title="4.什么是直接内存，有什么用"></a>4.什么是直接内存，有什么用</h5><p>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p><p>在JDK 1.4中新加入了NIO类，引入了一种基于通道与缓冲区的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是会受到本机总内存限制。</p><h5 id="5-对象是如何创建的"><a href="#5-对象是如何创建的" class="headerlink" title="5. 对象是如何创建的"></a>5. 对象是如何创建的</h5><ul><li><p>虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。</p></li><li><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存</p></li><li><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值</p></li><li><p>接下来，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对象头之中。根据虚拟机当前的运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p></li><li><p>执行new指令之后会接着执行＜init＞方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p></li></ul><h5 id="6-对象在内存中是怎样分配的"><a href="#6-对象在内存中是怎样分配的" class="headerlink" title="6.对象在内存中是怎样分配的"></a>6.对象在内存中是怎样分配的</h5><p>一个对象在内存中由三部分组成：<strong>对象头</strong>，<strong>实例数据</strong>，<strong>对齐填充</strong>。</p><ul><li><p>HotSpot虚拟机的对象头包括两部分信息组成，第一部分用于存储对象自身的运行时数据，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“Mark Word”。对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据。</p></li><li><p>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。</p></li><li><p>对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或者2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p></li></ul><h5 id="7-对象分配的方式"><a href="#7-对象分配的方式" class="headerlink" title="7. 对象分配的方式"></a>7. 对象分配的方式</h5><ul><li><p>指针碰撞（非线程安全）</p><p>假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”。</p></li><li><p>CAS同步处理（线程安全）</p><p>对分配内存空间的动作进行同步处理，虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。</p></li><li><p>TALB（线程安全）</p><p>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local AllocationBuffer，TLAB），哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。</p></li></ul><h5 id="8-如何定位到一个对象，这些方法有什么优点和缺点"><a href="#8-如何定位到一个对象，这些方法有什么优点和缺点" class="headerlink" title="8. 如何定位到一个对象，这些方法有什么优点和缺点"></a>8. 如何定位到一个对象，这些方法有什么优点和缺点</h5><p>有两种方式，一种是<strong>直接指针访问</strong>，一种是<strong>对象句柄访问</strong>。如果使用句柄访问的话，那么Java堆中将会划分出一块内存来作为句柄池，对象引用中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。直接指针访问，对象引用存放了对象的真实地址。直接指针引用的优点是定位快，但是缺点是，当对象移动时需要修改对象引用的内容，句柄访问的缺点是需要两次定位才能找到对象，但是优点是对象移动，不需要改变对象引用的内容。<strong>使用句柄访问的方式更加常见</strong>。</p><h5 id="9-JVM中可能发生的OOM的情况"><a href="#9-JVM中可能发生的OOM的情况" class="headerlink" title="9. JVM中可能发生的OOM的情况"></a>9. JVM中可能发生的OOM的情况</h5><p>什么是OOM，OOM的全称是OutOfMemory，当申请的内存太大，java虚拟机无法满足我们的时候就会抛出OOM异常。</p><p>java运行时数据区<strong>只有程序计数器不会发生OOM，其他区域都有可能发生OOM</strong></p><ul><li>方法区OOM</li><li>java堆OOM</li><li>虚拟方法栈OOM</li><li>本地方法栈OOM</li><li>本机直接内存OOM</li></ul><h5 id="10-如何确定哪些内存需要回收"><a href="#10-如何确定哪些内存需要回收" class="headerlink" title="10. 如何确定哪些内存需要回收"></a>10. 如何确定哪些内存需要回收</h5><p>主要两种方法，一种是<strong>引用计数算法</strong>，一种是<strong>可达性分析算法</strong>。</p><ul><li><p>引用计数算法：对象都拥有一个计数器，当有一个地方引用该对象则计数器加1,引用失效就减1，当计数器的值为0的时候，这个对象就需要被回收</p></li><li><p>可达性分析算法：通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</p></li></ul><h5 id="11-哪些对象可以作为GC-ROOT"><a href="#11-哪些对象可以作为GC-ROOT" class="headerlink" title="11. 哪些对象可以作为GC ROOT"></a>11. 哪些对象可以作为GC ROOT</h5><p>基本上就是java代码可以写出来的对象引用</p><ul><li>虚拟机栈中的对象（本地变量）</li><li>方法区静态属性引用的对象(静态变量)</li><li>方法区中常量引用的对象（常量）</li><li>本地方法栈中JNI(native方法)引用的对象</li></ul><h5 id="12-引用有哪些类型"><a href="#12-引用有哪些类型" class="headerlink" title="12. 引用有哪些类型"></a>12. 引用有哪些类型</h5><ul><li><p>强引用</p><p>强引用就是指在程序代码之中普遍存在的，类似“Object obj=new Object（）”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象</p></li><li><p>软引用</p><p>软引用是用来描述一些还有用但并非必需的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常</p></li><li><p>弱引用</p><p>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。</p></li><li><p>虚引用</p><p>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知</p></li></ul><h5 id="13-finalize方法的作用"><a href="#13-finalize方法的作用" class="headerlink" title="13. finalize方法的作用"></a>13. finalize方法的作用</h5><p>一个对象被标记为不可达的时候，并不意味着一定会回收这个对象，还需要经过一次筛选，筛选的条件是这个对象的finalize方法是否有必要执行。。当对象没有覆盖finalize（）方法，或者finalize（）方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行“。当一个对象被判断有必要执行，会把这个对象放置在一个做作F-QUEUE的队列中，并在稍后由一个由虚拟机自动建立的、低优先级的Finalizer线程去执行它。如果在finalize方法中重新把这个对象赋到对象引用链中，这个对象就不会被回收。</p><h5 id="14-方法区是否会被回收，回收的内容是什么，什么时候需要回收方法区"><a href="#14-方法区是否会被回收，回收的内容是什么，什么时候需要回收方法区" class="headerlink" title="14. 方法区是否会被回收，回收的内容是什么，什么时候需要回收方法区"></a>14. 方法区是否会被回收，回收的内容是什么，什么时候需要回收方法区</h5><p>java虚拟机规范中没有定义必须回收方法区，并且回收方法区的收益非常低。主要回收两部分内容：<strong>废弃常量</strong>和<strong>无用的类</strong>。一个无用的类是指：该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。加载该类的ClassLoader已经被回收。该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p><p>在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。</p><h5 id="15-有哪些垃圾收集算法"><a href="#15-有哪些垃圾收集算法" class="headerlink" title="15. 有哪些垃圾收集算法"></a>15. 有哪些垃圾收集算法</h5><ul><li><p>标记清除算法</p><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p><p>标记清除算法可能会造成大量的内存碎片</p></li><li><p>标记整理算法</p><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p></li><li><p>复制算法</p><p>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着<br>的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p>这种方法的缺点就是浪费了空间。</p><p>s实际上：将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的内存会被“浪费”。</p></li><li><p>分代收集算法</p><p>这种算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记—清理”或者“标记—整理”算法来进行回收。</p></li></ul><h5 id="16-Partial-GC、Minor-GC、Major-GC、Mixed-GC、Full-GC"><a href="#16-Partial-GC、Minor-GC、Major-GC、Mixed-GC、Full-GC" class="headerlink" title="16. Partial GC、Minor GC、Major GC、Mixed GC、Full GC"></a>16. Partial GC、Minor GC、Major GC、Mixed GC、Full GC</h5><table><thead><tr><th>名词</th><th>含义</th></tr></thead><tbody><tr><td>Partial GC</td><td>不是完整收集整个Java堆的垃圾收集，分为：Minor GC，Major GC和Mixed GC</td></tr><tr><td>Minor GC</td><td>指目标只是新生代的垃圾收集，Young GC</td></tr><tr><td>Major GC</td><td>指目标只是老年代的垃圾收集，Old GC，这个概念有点资料指整堆收集</td></tr><tr><td>Mixed GC</td><td>指目标是收集整个新生代以及部分老年代的垃圾收集。目前G1收集器会有这种行为</td></tr><tr><td>Full GC</td><td>收集整个Java堆和方法区的垃圾收集。</td></tr></tbody></table><h5 id="17-Remember-Set"><a href="#17-Remember-Set" class="headerlink" title="17. Remember Set"></a>17. Remember Set</h5><p>通常将java堆划分为不同的区域，每次只对一个区域进行回收。假如要现在进行一次只局限于新生代区域内的收集（Minor GC），但新生代中的对象是完全有可能被老年代所引用的，为了找出该区域中的存活对象，不得不在固定的GC Roots之外，再额外遍历整个老年代中所有对象来确保可达性分析结果的正确性，反过来也是一样。遍历整个老年代所有对象的方案虽然理论上可行，但无疑<strong>会为内存回收带来很大的性能负担</strong>。为了解决这个问题提出了跨代引用假说，即跨代引用相对于同代引用来说仅占极少数。基于这条假说，我们就不应再为了少量的跨代引用去扫描整个老年代，也不必浪费空间专门记录每一个对象是否存在及存在哪些跨代引用，只需在新生代上建立一个全局的数据结构（该结构被称为“记忆集”，RememberedSet），这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。此后当发生Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots进行扫描。虽然这种方法需要在对象改变引用关系（如将自己或者某个属性赋值）时维护记录数据的正确性，会增加一些运行时的开销，但比起收集时扫描整个老年代来说仍然是划算的。</p><h5 id="18-什么是OopMap"><a href="#18-什么是OopMap" class="headerlink" title="18. 什么是OopMap"></a>18. 什么是OopMap</h5><p>采用可达性分析算法来识别需要回收的对象，通常第一步是进行GC-Roots的枚举（也就是在整个内存中把Gc-roots找出来），但是在整片内存中查找符合要求的对象引用需要扫描内存，这个步骤是非常耗时间的，并且枚举根节点需要在一个不变的内存快照中进行，所以会先阻塞所有用户线程的执行，因此如果花大量的时间进行枚举根节点，程序会进行长时间的停顿，这一点是无法让用户接受的。为了解决这个问题，我们使用了OopMap这种数据结构，一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接从得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找。</p><p>OopMap是一种数据结构，利用它可以解决枚举根节点长时间停顿的问题。</p><h5 id="19-什么是安全点"><a href="#19-什么是安全点" class="headerlink" title="19. 什么是安全点"></a>19. 什么是安全点</h5><p>虽然OopMap解决了枚举根节点的时间问题，但是程序运行时，引用关系是变化的，因此每一条指令都可能生成新的OopMap，这样的话内存中需要存放许多OopMap，占用大量的额外空间，安全点就是来解决引入OopMap带来的空间消耗问题的。</p><p>安全点的思想是不在每一条指令生成OopMap，而只在特定的指令生成OopMap，这些指令的位置就是安全点，程序执行时，只有在安全点才会停顿下来开始GC。</p><p>安全点的选定会带来一些问题，如果安全点选的太少，会让两次GC的等待时间太长，太频繁会导致工作线程经常停顿，增大运行时的负荷。因此安全点的选取必须遵循一个特定的原则，真实情况下，所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定，比如方法调用，循环跳转，异常跳转等。</p><p>但是还有一个问题，如何保证GC时所有的线程都停顿在安全点位置，有两种方式，一种是抢先式中断，一种是主动式中断。</p><ul><li><p>抢先式中断式先把所有线程中断，对于没有在安全点中断的线程恢复其执行，直到它运行到安全点。</p></li><li><p>当GC需要中断线程的时候，不直接对线程操作，会在安全点位置设置标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。</p></li></ul><h5 id="20-什么是安全区域"><a href="#20-什么是安全区域" class="headerlink" title="20. 什么是安全区域"></a>20. 什么是安全区域</h5><p>安全区域解决了安全点没有解决的问题，比如安全点机制下，如果某个线程处于阻塞状态或者放弃了CPU，那么该线程无法响应JVM的中断请求。</p><p>安全区域是指在一段代码片段中，引用关系不会发生改变，在这个区域中的任意位置开始GC都是安全的。</p><p>当线程执行到安全区域中的代码时，首先标识自己已经进入了安全区域，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为安全区域状态的线程了。在线程要离开安全区域时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开安全区域的信号为止。</p><h5 id="21-你知道哪些垃圾收集器"><a href="#21-你知道哪些垃圾收集器" class="headerlink" title="21. 你知道哪些垃圾收集器"></a>21. 你知道哪些垃圾收集器</h5><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/image-20200120144239677.png" alt="image-20200120144239677"></p><ul><li><p>Serial、Serial Old</p><p>Serial收集器是一个单线程的收集器，当它进行垃圾收集时，必须暂停其他所有的工作线程，然后启动一个收集线程进行垃圾收集，直到它收集结束。Serial Old是老年版本</p><p><strong>Serial作用于新生代使用复制算法，Serial Old作用于老年代使用标记整理算法。</strong></p><ul><li><p><strong>Serial如此简单，并且会引发STW，它的应用场景是什么</strong></p><p>简单而高效（与其他收集器的单线程相比），对于内存资源受限的环境，它是所有收集器里额外<strong>内存消耗最小</strong>的；对于单核处理器或处理器核心数较少的环境来说，Serial收集器由于<strong>没有线程交互的开销</strong>，专心做垃圾收集自然可以获得最高的单线程收集效率。在<strong>用户桌面的应用场景</strong>以及近年来流行的<strong>部分微服务应用</strong>中，分配给虚拟机管理的内存一般来说并不会特别大，收集几十兆甚至一两百兆的新生代，垃圾收集的停顿时间完全可以控制在十几、几十毫秒，最多一百多毫秒以内，只要不是频繁发生收集，这点停顿时间对许多用户来说是完全可以接受的。</p></li></ul></li><li><p>ParNew</p><p>ParNew收集器其实就是Serial收集器的多线程版本，新生代使用复制算法，老年代使用标记整理算法。<strong>除了Serial收集器外，目前只有它能与CMS收集器配合工作</strong>。</p></li><li><p>Parallel Scavenge</p><p>Parallel Scavenge收集器是一个新生代收集器，使用复制算法，是并行的多线程收集器。Parallel Scavenge收集器的目标是达到一个可控制的吞吐量。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值。</p><p>Parallel Scavenge收集器提供了<strong>两个参数用于精确控制吞吐量</strong>，分别是控制<strong>最大垃圾收集停顿时间</strong>的-XX：MaxGCPauseMillis参数以及<strong>直接设置吞吐量大小</strong>的-XX：GCTimeRatio参数</p></li><li><p>Parallel Old</p><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p></li><li><p>CMS</p><p>CMS收集器是一种以获取最短回收停顿时间为目标的收集器，它的优点是<strong>并发收集、低停顿</strong>；</p><p>它的缺点是<strong>对处理器资源很敏感</strong>，在并发阶段，它虽然不会导致用户线程停顿，但却会因为占用了一部分线程而导致应用程序变慢，降低总吞吐量。CMS收集器<strong>无法处理“浮动垃圾”</strong>，有可能出现“Con-current Mode Failure”失败进而导致另一次完全“StopThe World”的Full GC的产生。基于标记清除算法，收集结束时<strong>会有大量空间碎片产生</strong>。</p><ul><li><p><strong>什么是浮动垃圾</strong></p><p>在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”。</p></li></ul></li><li><p>G1</p><p>Garbage First（简称G1）收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和<strong>基于Region的内存布局</strong>形式。</p><p>G1不再坚持固定大小以及固定数量的分代区域划分，而是<strong>把连续的Java堆划分为多个大小相等的独立区域</strong>，每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果。</p><p>更具体的处理思路是让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间，优先处理回收价值收益最大的那些Region，这也就是“Garbage First”名字的由来。</p></li></ul><h5 id="22-CMS收集器的工作过程"><a href="#22-CMS收集器的工作过程" class="headerlink" title="22. CMS收集器的工作过程"></a>22. CMS收集器的工作过程</h5><ul><li><p>初始标记</p><p>标记GC-ROOTS可以直接引用的对象，会停顿工作线程，但是速度很快</p></li><li><p>并发标记</p><p>进行GC ROOTS track的过程，找到引用链其他对象，花费的时间相对长，但是可以与工作线程并发执行</p></li><li><p>重新标记</p><p>重新标记由于并发标记过程中引用关系发生变化的那部分对象，会停顿工作线程</p></li><li><p>并发清除</p><p>并发清除垃圾</p></li></ul><h5 id="23-G1收集器的工作过程"><a href="#23-G1收集器的工作过程" class="headerlink" title="23. G1收集器的工作过程"></a>23. G1收集器的工作过程</h5><ul><li><p>初始标记</p></li><li><p>并发标记</p></li><li><p>再次标记</p></li><li><p>筛选回收</p></li></ul><h5 id="24-CMS与G1的对比"><a href="#24-CMS与G1的对比" class="headerlink" title="24. CMS与G1的对比"></a>24. CMS与G1的对比</h5><p>与CMS的“标记-清除”算法不同，G1从整体来看是基于“标记-整理”算法实现的收集器，但从局部（两个Region之间）上看又是基于“标记-复制”算法实现，无论如何，这两种算法都意味着<strong>G1运作期间不会产生内存空间碎片</strong>，垃圾收集完成之后能提供规整的可用内存。</p><p>内存占用来说，虽然G1和CMS都使用卡表来处理跨代指针，但G1的卡表实现更为复杂，而且堆中每个Region，无论扮演的是新生代还是老年代角色，都必须有一份卡表，这导致<strong>G1的记忆集（和其他内存消耗）可能会占整个堆容量的20%乃至更多的内存空间</strong>；</p><p>目前在小内存应用上CMS的表现大概率仍然要会优于G1，而在大内存应用上G1则大多能发挥其优势，这个优劣势的Java堆容量平衡点通常在6GB至8GB之间</p><h5 id="25-有哪些低延迟垃圾收集器"><a href="#25-有哪些低延迟垃圾收集器" class="headerlink" title="25. 有哪些低延迟垃圾收集器"></a>25. 有哪些低延迟垃圾收集器</h5><p>Shenandoah、ZGC</p><h5 id="26-对象分配要遵循哪些策略"><a href="#26-对象分配要遵循哪些策略" class="headerlink" title="26. 对象分配要遵循哪些策略"></a>26. 对象分配要遵循哪些策略</h5><ul><li><p>对象优先在Eden分配</p><p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟<br>机将发起一次Minor GC。</p></li><li><p>大对象直接进入老年代</p></li><li><p>长期存活的对象将进入老年代</p><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每“熬过”一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。</p></li><li><p>动态对象年龄判定</p></li></ul><h5 id="27-如何判断对象的年龄"><a href="#27-如何判断对象的年龄" class="headerlink" title="27. 如何判断对象的年龄"></a>27. 如何判断对象的年龄</h5><p>为了能更好地适应不同程序的内存状况，虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</p><h5 id="28-什么是内存分配担保"><a href="#28-什么是内存分配担保" class="headerlink" title="28. 什么是内存分配担保"></a>28. 什么是内存分配担保</h5><p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。</p><hr><h4 id="二-虚拟机执行子系统"><a href="#二-虚拟机执行子系统" class="headerlink" title="二. 虚拟机执行子系统"></a>二. 虚拟机执行子系统</h4><h5 id="1-什么是java的平台无关性和语言无关性"><a href="#1-什么是java的平台无关性和语言无关性" class="headerlink" title="1. 什么是java的平台无关性和语言无关性"></a>1. 什么是java的平台无关性和语言无关性</h5><p>平台无关性是指java代码可以不经过任何修改在不同的操作系统中运行，平台无关性是通过java虚拟机将物理硬件的区别和实际操作系统的系统调用细节屏蔽实现的，对于java来说看到的java虚拟机是一样的。语言无关性是指java虚拟机运行的是Class文件，至于这个Class文件是怎么产生的，由什么语言产生的都无所谓，只要符合虚拟机规范都可以运行。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/image-20200129103320.png" alt=""></p><h5 id="2-说一下Class文件的结构"><a href="#2-说一下Class文件的结构" class="headerlink" title="2. 说一下Class文件的结构"></a>2. 说一下Class文件的结构</h5><p>《Java虚拟机规范》的规定，Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型：“无符号数”和“表”。</p><p><strong>无符号数</strong>属于基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值</p><p><strong>表</strong>是由多个无符号数或者其他表作为数据项构成的复合数据类型，为了便于区分，所有表的命名都习惯性地以“_info”结尾</p><ul><li><p>魔数</p><p>魔数的作用是确定这个文件是否是一个能被虚拟机接受的Class文件，魔数为CAFEBABE</p></li><li><p>Class的版本号</p><p>版本号由次版本号和主板本号组成，虚拟机必须拒绝执行超过其版本号的Class文件。</p></li><li><p>常量池</p><p>紧接着主次版本号之后的是常量池入口，常量池中主要存放两大类常量：<strong>字面量</strong>和<strong>符号引用</strong>。</p></li><li><p>访问标志</p><p>这个标志用于识别一些类或者接口层次的访问信息，包括：这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否被声明为final等。</p></li><li><p>类索引、父类索引和接口索引集合</p><p>类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名</p></li><li><p>字段表集合</p><p>字段表用于描述接口或者类中声明的变量。字段包括类级变量以及实例级变量，但不包括在方法内部声明的局部变量。</p></li><li><p>方法表集合</p></li><li><p>属性表集合</p></li></ul><h5 id="3-类加载时机"><a href="#3-类加载时机" class="headerlink" title="3. 类加载时机"></a>3. 类加载时机</h5><ol><li><p>遇到new、getStatic、setStatic、invokeStatic指令时</p></li><li><p>反射调用时</p></li><li><p>子类加载时，如果父类没有被加载则会先加载父类</p></li><li><p>main方法所在的类会在虚拟机启动时加载</p></li><li><p>当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄 所对应的类没有进行过初始化，则需要先触发其初始化。</p></li></ol><h5 id="4-类加载的过程"><a href="#4-类加载的过程" class="headerlink" title="4. 类加载的过程"></a>4. 类加载的过程</h5><ul><li><p>加载</p><ul><li>类加载的时机（有且仅有五个）<ol><li>遇到new、getStatic、setStatic、invokeStatic指令时</li><li>反射调用时</li><li>子类加载时，如果父类没有被加载则会先加载父类</li><li>main方法所在的类会在虚拟机启动时加载</li><li>当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄 所对应的类没有进行过初始化，则需要先触发其初始化。</li></ol></li><li>加载需要完成的事情<ol><li>通过类的全限定名获取这个类的二进制字节流</li><li>将这个二进制流代表的静态存储结构转化成运行时数据结构</li><li>在内存中生成一个java.lang.Class对象（虽然是对象，但是在hotspot中放到方法区），作为方法区这个类的各种数据的访问入口</li></ol></li><li>可以从什么地方获取二进制字节流<ul><li>各种zip包，比如jar包，war包，ear包等</li><li>网络中，典型应用是Applet</li><li>运行时计算生成，如动态代理</li><li>其他文件生成，如jsp</li><li>数据库中获取</li></ul></li><li>数组类的加载<ul><li>数组类不是由类加载器去加载的，而是虚拟机创建的</li><li>数组类的元素类型需要类加载器加载</li><li>如果数组的组件类型（Component Type，指的是数组去掉一个维度的类型）是引用类 型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组C将在加载该组件类型 的类加载器的类名称空间上被标识</li><li>如果数组的组件类型不是引用类型（例如int[]数组），Java虚拟机将会把数组C标记为与 引导类加载器关联。</li><li>数组类的可见性与它的组件类型的可见性一致，如果组件类型不是引用类型，那数组类 的可见性将默认为public。</li></ul></li></ul></li><li><p>验证</p><ul><li><p>验证的目的</p><p>确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p></li><li><p>验证阶段的检验动作</p><ul><li><p>文件格式验证</p><p>保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求。</p><p>包括魔数检验，版本号检验等……</p></li><li><p>元数据验证</p><p>对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求。</p></li><li><p>字节码验证</p><p>对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。</p></li><li><p>符号引用验证</p><p>发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证可以看做是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验。</p><p>包括：</p><ul><li>符号引用中通过字符串描述的全限定名是否能找到对应的类。</li><li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</li><li>符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被 当前类访问。</li></ul></li></ul></li></ul></li><li><p>准备</p><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。</p></li><li><p>解析</p><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程</p></li><li><p>初始化</p><p>初始化阶段是执行类构造器&lt;clinit&gt;()方法的过程</p></li></ul><h5 id="5-有哪些类加载器"><a href="#5-有哪些类加载器" class="headerlink" title="5. 有哪些类加载器"></a>5. 有哪些类加载器</h5><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/image-20200120200132139.png" alt="image-20200120200132139"></p><h5 id="6-什么是双亲委派模型"><a href="#6-什么是双亲委派模型" class="headerlink" title="6. 什么是双亲委派模型"></a>6. 什么是双亲委派模型</h5><ul><li><p>类加载器之间的这种层次关系，称为类加载器的双亲委派模型。</p></li><li><p>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。</p></li><li><p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p></li></ul><h5 id="9-双亲委派模型的好处"><a href="#9-双亲委派模型的好处" class="headerlink" title="9. 双亲委派模型的好处"></a>9. 双亲委派模型的好处</h5><p>使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处就是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object，它存放在rt.jar之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为java.lang.Object的类，并放在程序的ClassPath中，那系统中将会出现多个不同的Object类，Java类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱。</p><h5 id="10-如何实现自定义类加载器"><a href="#10-如何实现自定义类加载器" class="headerlink" title="10. 如何实现自定义类加载器"></a>10. 如何实现自定义类加载器</h5><p>只需要继承ClassLoader，并覆盖findClass方法。在调用loadClass方法时，会先根据委派模型在父加载器中加载，如果加载失败，则会调用自己的findClass方法来完成加载。</p><h5 id="11-有哪些破坏双亲委派模型的例子"><a href="#11-有哪些破坏双亲委派模型的例子" class="headerlink" title="11. 有哪些破坏双亲委派模型的例子"></a>11. 有哪些破坏双亲委派模型的例子</h5><ul><li><p>第一次被破坏是双亲委派出现之前</p></li><li><p>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷所导致的，双亲委派很好地解决了各个类加载器的基础类的统一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美，如果基础类又要调用回用户的代码，那该怎么办</p></li><li><p>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，这里所说的“动态性”指的是当前一些非常“热门”的名词：代码热替换</p></li></ul><h5 id="12-栈帧存放了什么"><a href="#12-栈帧存放了什么" class="headerlink" title="12. 栈帧存放了什么"></a>12. 栈帧存放了什么</h5><p>局部变量表、操作数栈、动态链接和方法返回地址</p><h5 id="13-局部变量表存放什么"><a href="#13-局部变量表存放什么" class="headerlink" title="13. 局部变量表存放什么"></a>13. 局部变量表存放什么</h5><p>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。</p><p>局部变量表的容量以变量槽（Variable Slot，下称Slot）为最小单位</p><h5 id="14-操作数栈的运行过程"><a href="#14-操作数栈的运行过程" class="headerlink" title="14. 操作数栈的运行过程"></a>14. 操作数栈的运行过程</h5><p>当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法的执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是出栈/入栈操作。例如，在做算术运算的时候是通过操作数栈来进行的，又或者在调用其他方法的时候是通过操作数栈来进行参数传递的。</p><h5 id="15-动态链接是什么"><a href="#15-动态链接是什么" class="headerlink" title="15. 动态链接是什么"></a>15. 动态链接是什么</h5><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接</p>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究java虚拟机：垃圾收集器总结</title>
      <link href="/2019/12/19/%E6%8E%A2%E7%A9%B6java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%9A%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/19/%E6%8E%A2%E7%A9%B6java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%9A%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="一-经典的垃圾收集器特点总结"><a href="#一-经典的垃圾收集器特点总结" class="headerlink" title="一. 经典的垃圾收集器特点总结"></a>一. 经典的垃圾收集器特点总结</h4><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E6%8E%A2%E7%A9%B6java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%8E%E5%BB%B6%E8%BF%9F%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/image-20200129113418.png" alt=""></p><h5 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1. Serial收集器"></a>1. Serial收集器</h5><p>Serial收集器的工作方式是停止所有正在运行的用户线程，然后启动一个线程进行垃圾收集。它工作在新生代，使用复制算法。特点是简单高效，没有额外的内存开销，并且没有线程切换开销。适合客户端场景和微服务等管理内存小的场景。</p><h5 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2. ParNew收集器"></a>2. ParNew收集器</h5><p>ParNew收集器实质上是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其他和Serial收集器一样。它的特点是除了Serial收集器外，目前只有它能与CMS收集器配合工作。但是也是HotSpot虚拟机第一款退出历史舞台的垃圾收集器。</p><p>ParNew收集器在单核心处理器的环境不比Serial收集器性能好，甚至由于存在线程交互的开销，该收集器在某些时候不能超越Serial收集器。</p><p>随着可以被使用的处理器核心数量的增加，ParNew对于垃圾收集时系统资源的高效利用还是很有好处的。它默认开启的收集线程数与处理器核心数量相同。</p><h5 id="3-Parallel-Scavenge收集器"><a href="#3-Parallel-Scavenge收集器" class="headerlink" title="3. Parallel Scavenge收集器"></a>3. Parallel Scavenge收集器</h5><p>Parallel Scavenge收集器作用于新生代，使用复制算法，采用多线程进行垃圾收集，与ParNew收集器类似，但是不同的地方是，Parallel Scavenge收集器的目标是达到一个可控制的吞吐量（吞吐量是指CPU处理用户代码的时间与总CPU时间的之比）。</p><p>Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX：MaxGCPauseMillis参数以及直接设置吞吐量大小的-XX：GCTimeRatio参数。</p><h5 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4. Serial Old收集器"></a>4. Serial Old收集器</h5><p>Serial收集器的老年版本，使用标记整理算法，作用于老年代，其他特性与Serial收集器一样。</p><h5 id="5-Parallel-Old收集器"><a href="#5-Parallel-Old收集器" class="headerlink" title="5. Parallel Old收集器"></a>5. Parallel Old收集器</h5><p>Parallel Scavenge收集器的老年版本，基于标记整理算法实现。它的意义是使得新生代和老年代都可以达到一个可控制的吞吐量的目标。</p><h5 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6. CMS收集器"></a>6. CMS收集器</h5><p>作用于老年代，使用标记清除算法，是第一个真正可以与用户工作线程并发执行的垃圾收集器，目标是获取最短回收停顿时间。它的优点是并发收集和低停顿。缺点是对CPU资源敏感，无法清除浮动垃圾，会产生大量的内存碎片。</p><p>CMS默认启动的回收线程数是（处理器核心数量+3）/4，也就是说，如果处理器核心数在四个或以上，并发回收时垃圾收集线程只占用不超过25%的处理器运算资源，并且会随着处理器核心数量的增加而下降。</p><p>工作流程如下：</p><ul><li><p>初始标记</p><p>仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，会发生STW。</p></li><li><p>并发标记</p><p>从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</p></li><li><p>重新标记</p><p>为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</p></li><li><p>并发清除</p><p>清理删除掉标记阶段判断的已经死亡的对象，由于采用标记清除算法不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的。</p></li></ul><h5 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7. G1收集器"></a>7. G1收集器</h5><p>G1收集器开创了收集器面向局部收集的设计思路和基于Region的内存布局形式，它不再按照新生代和老年代的方式划分堆，而是将堆划分成相等大小的区域（Region），G1收集器会跟踪每一个区域的回收价值，即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，默认的回收策略是优先回收价值大的区域。Region中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。</p><p>工作过程如下：</p><ul><li><p>初始标记</p><p>仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。需要停顿工作线程。</p></li><li><p>并发标记</p><p>从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以后，还要重新处理SATB记录下的在并发时有引用变动的对象。</p></li><li><p>重新标记<br>对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。</p></li><li><p>筛选回收</p><p>负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的。</p></li></ul><hr><h4 id="二-低延迟垃圾收集器"><a href="#二-低延迟垃圾收集器" class="headerlink" title="二. 低延迟垃圾收集器"></a>二. 低延迟垃圾收集器</h4><p>衡量一款垃圾收集器的标准有：内存占用、吞吐量、延迟。垃圾收集器很难同时实现三个标准，但是随着计算机硬件的发展，内存占用和吞吐量逐渐变得不是问题，内存价格的下降使得不在过分关注内存占用问题，CPU性能的提高使得吞吐量提高，但是延迟问题无法通过计算机硬件的进步解决，比如说回收1TB的内存花费的时间自然要比回收1GB的内存的时间长。Shenandoah和ZGC都是低延迟的垃圾收集器，它们都可以在任意可管理的（譬如现在ZGC只能管理4TB以内的堆）堆容量下，实现垃圾收集的停顿都不超过十毫秒的目标。</p><h5 id="1-Shenandoah收集器"><a href="#1-Shenandoah收集器" class="headerlink" title="1. Shenandoah收集器"></a>1. Shenandoah收集器</h5><p>Shenandoah收集器不是由Oracle开发的“官方“垃圾收集器，它是由RedHat公司开发的新型收集器项目，现在已经贡献给OpenJDK 12，并且成为OpenJDK 12的新特性。它的目标是实现一种能在任何堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的垃圾收集器。</p><p>Shenandoah更像是G1的下一代继承者，它们两者有着相似的堆内存布局，在初始标记、并发标记等许多阶段的处理思路上都高度一致，甚至还直接共享了一部分实现代码。</p><p><strong>Shenandoah相比起G1的改进主要有三点</strong>：</p><ul><li>支持并发的整理算法</li><li>不会有专门的新生代Region或者老年代Region的存在，没有实现分代</li><li>Shenandoah摒弃了在G1中耗费大量内存和计算资源去维护的记忆集，改用名为“连接矩阵”的全局数据结构来记录跨Region的引用关系，降低了处理跨代指针时的记忆集维护消耗，也降低了伪共享问题的发生概率</li></ul><p><strong>工作过程</strong>：</p><ul><li><p>初始标记</p><p>与G1一样，首先标记与GC Roots直接关联的对象，这个阶段仍是“Stop The World”的，但停顿时间与堆大小无关，只与GC Roots的数量相关。</p></li><li><p>并发标记</p><p>与G1一样，遍历对象图，标记出全部可达的对象，这个阶段是与用户线程一起并发的，时间长短取决于堆中存活对象的数量以及对象图的结构复杂程度。</p></li><li><p>最终标记</p><p>与G1一样，处理剩余的SATB扫描，并在这个阶段统计出回收价值最高的Region，将这些Region构成一组回收集（Collection Set）。最终标记阶段也会有一小段短暂的停顿。</p></li><li><p>并发清理</p><p>这个阶段用于清理那些整个区域内连一个存活对象都没有找到的Region。</p></li><li><p>并发回收</p><p>把回收集里面的存活对象先复制一份到其他未被使用的Region之中，并发运行，此时工作线程的引用会发生变化，会通过读屏障和被称为“Brooks Pointers”的转发指针来解决。</p></li><li><p>初始引用更新</p><p>并发回收阶段复制对象结束后，还需要把堆中所有指向旧对象的引用修正到复制后的新地址，这个操作称为引用更新。引用更新的初始化阶段实际上并未做什么具体的处理，设立这个阶段只是为了建立一个线程集合点，确保所有并发回收阶段中进行的收集器线程都已完成分配给它们的对象移动任务而已。初始引用更新时间很短，会产生一个非常短暂的停顿。</p></li><li><p>并发引用更新</p><p>真正开始进行引用更新操作，这个阶段是与用户线程一起并发的，时间长短取决于内存中涉及的引用数量的多少。并发引用更新与并发标记不同，它不再需要沿着对象图来搜索，只需要按照内存物理地址的顺序，线性地搜索出引用类型，把旧值改为新值即可。</p></li><li><p>最终引用更新</p><p>修正存在于GC Roots中的引用</p></li><li><p>并发清理</p><p>经过并发回收和引用更新之后，整个回收集中所有的Region已再无存活对象，这些Region都变成ImmediateGarbage Regions了，最后再调用一次并发清理过程来回收这些Region的内存空间，供以后新对象分配使用。</p></li></ul><p><strong>转发指针</strong></p><p>转发指针是实现对象移动与用户程序并发的一种解决方案。</p><p>此前，要做类似的并发操作，通常是在被移动对象原有的内存上设置保护陷阱，一旦用户程序访问到归属于旧对象的内存空间就会产生自陷中段，进入预设好的异常处理器中，再由其中的代码逻辑把访问转发到复制后的新对象上。虽然确实能够实现对象移动与用户线程并发，但是如果没有操作系统层面的直接支持，这种方案将导致用户态频繁切换到核心态，代价是非常大的，不能频繁使用。</p><p>新方案不需要用到内存保护陷阱，而是在原有对象布局结构的最前面统一增加一个新的引用字段，在正常不处于并发移动的情况下，该引用指向对象自己。使用时只需要修改一处指针的值，即旧对象上转发指针的引用位置，使其指向新对象，便可将所有对该对象的访问转发到新的副本上。</p><p>转发指针与某些早期Java虚拟机使用过的句柄定位有一些相似之处，两者都是一种间接性的对象访问方式，差别是句柄通常会统一存储在专门的句柄池中，而转发指针是分散存放在每一个对象头前面。</p><h5 id="2-ZGC收集器"><a href="#2-ZGC收集器" class="headerlink" title="2. ZGC收集器"></a>2. ZGC收集器</h5><p>ZGC是jdk 11的新特性，由Oracle公司研发，目标是在尽可能对吞吐量影响不太大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的低延迟。</p><p>ZGC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法的，以低延迟为首要目标的一款垃圾收集器</p><p>ZGC的内存布局与Shenandoah和G1一样，也采用基于Region的堆内存布局，但不同的是，ZGC的Region具有动态性——动态创建和销毁，以及动态的区域容量大小。在x64硬件平台下，ZGC的Region可以具有大、中、小三类容量</p><ul><li>小型Region：容量固定为2MB，用于放置小于256KB的小对象。</li><li>中型Region：容量固定为32MB，用于放置大于等于256KB但小于4MB的对象。</li><li>大型Region：容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。每个大型Region中只会存放一个大对象</li></ul><p><strong>染色指针</strong></p><p>染色指针是一种直接将少量额外的信息存储在指针上的技术，因为操作系统寻址的时候并不需要用到指针上的所有位，那么剩下的位就可以存一些信息。染色指针直接将引用的信息记录在引用中，这样一个对象是否存活只与其引用有关，与对象本身无关，这样即使对象移动了，也能知道一个引用是否需要重置。</p><p><strong>工作过程</strong></p><ul><li><p>并发标记</p><p>与G1、Shenandoah一样，并发标记是遍历对象图做可达性分析的阶段，但是ZGC的<strong>标记是在指针上而不是在对象上进行的，标记阶段会更新染色指针中的Marked 0、Marked 1标志位</strong>。</p></li><li><p>并发预备重分配</p><p>统计得出本次收集过程要清理哪些Region，将这些Region组成重分配集。</p><p>ZGC的重分配集只是决定了里面的存活对象会被重新复制到其他的Region中，里面的Region会被释放，而并不能说回收行为就只是针对这个集合里面的Region进行，因为标记过程是针对全堆的</p></li><li><p>并发重分配</p><p>把重分配集中的存活对象复制到新的Region上，并为重分配集中的每个Region维护一个转发表，记录从旧对象到新对象的转向关系。</p><p>因为染色指针技术，ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集之中，如果用户线程此时并发访问了位于重分配集中的对象，这次访问将会被预置的内存屏障所截获，然后立即根据Region上的转发表记录将访问转发到新复制的对象上，并同时修正更新该引用的值，使其直接指向新对象，ZGC将这种行为称为指针的“自愈”能力。</p><p>染色指针带来的好处：</p><ul><li>只有第一次访问旧对象会陷入转发，也就是额外的开销只有一次</li><li>一旦重分配集中某个Region的存活对象都复制完毕后，这个Region就可以立即释放用于新对象的分配，旧指针一旦被使用，它们都是可以自愈的</li></ul></li><li><p>并发重映射</p><p>重映射所做的就是修正整个堆中指向重分配集中旧对象的所有引用，ZGC很巧妙地把并发重映射阶段要做的工作，合并到了下一次垃圾收集循环中的并发标记阶段里去完成，反正它们都是要遍历所有对象的，这样合并就节省了一次遍历对象图的开销。</p></li></ul><hr><p><em>参考：《深入理解java虚拟机：JVM高级特性与最佳实践（第三版）》周志明</em></p>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring原理总结</title>
      <link href="/2019/12/19/Spring%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/19/Spring%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>本文不是源码分析，源码分析的过程很复杂，本文的目的是使用精简的语言，基于源码分析的基础，将框架原理进行总结。</p><h5 id="1-Spring-Boot自动装配的原理"><a href="#1-Spring-Boot自动装配的原理" class="headerlink" title="1. Spring Boot自动装配的原理"></a>1. Spring Boot自动装配的原理</h5><p>首先在使用Spring Boot的时候main方法所在的类会加上一个叫做<code>@SpringBootApplication</code>的注解，这个注解之上主要有三个注解</p><ul><li><p><code>@SpringBootConfiguration</code></p></li><li><p><code>@EnableAutoConfiguratio</code></p></li><li><p><code>@ComponentScan</code></p></li></ul><p>其中<code>@SpringBootConfiguratio</code>注解被<code>@Configuration</code>注解修饰，作用是将main方法所在的那个类声明成一个配置类，然后<code>@ComponentScan</code>的作用使容器扫描与main方法同一级的包及其子包，然后最重要的一个注解<code>@EnableAutoConfiguration</code>，<strong>这个注解与自动装配密切相关</strong>。</p><p>注解<code>@EnableAutoConfiguration</code>上面有一个注解<code>@Import</code>，这个注解的作用是将一些类注入到容器中，<code>@Import</code>注解有三个用法</p><ul><li><p>直接将某一个指定的类注入到容器中</p></li><li><p>借助于ImportBeanDefinitionRegistrar接口将类注入到容器中</p></li><li><p>借助于ImportSelector类将类注入到容器中</p></li></ul><p>Spring Boot使用的是第三种方式，借助一个叫<code>AutoConfigurationImportSelector</code>的类，返回类的全限定名数组，这些数组中的元素所代表的的类都会被注入到容器中，具体是哪些类呢？首先会去加载所有Spring预先定义的配置条件信息，这些信息位于<code>org.springframework.boot.autoconfigure</code>包下的<code>META-INF/spring-autoconfigure-metadata.properties</code>文件中，这些类都是被注解<code>@Configuration</code>修饰的配置类，这些配置类还存在一些和条件装配相关的注解，配置类中约定好了配置方式，这样用户就不需要手动去配置，如果需要修改模型信息，可以修改yml文件的内容，这也就是<strong>所谓的约定大于配置</strong>。</p><h5 id="2-Spring-IOC的原理"><a href="#2-Spring-IOC的原理" class="headerlink" title="2. Spring IOC的原理"></a>2. Spring IOC的原理</h5><p>首先解释一下什么是IOC，IOC的意思是控制反转，控制反转是一种思想，它指的是将类管理自身成员变量的权利交给第三方容器，也就是说在没有使用IOC容器的时候，一个对象所依赖的成员变量是需要自己管理、实例化的，但是有了IOC之后，程序员只要通过配置信息描述对象与对象之间的关系，然后交给ioc容器，容器会自动帮我们配置好类与类之间的关系。</p><p>然后在Spring中实现控制反转的方式叫做DI，也就是依赖注入。首先我们使用Spring创建IOC容器是通过ApplicationContex这个类创建的，而这个类有一个顶层的类，叫做BeanFactory，BeanFactory这个类不是由用户直接使用的，而是Spring内部的一个很重要的类，它是实现了ioc的基本功能。ApplicationContex也有几个子类，如<code>ClassPathXmlApplicationContex</code>、<code>FileSystemXmlApplicationContex</code>、<code>AnnotationConfigApplicationContex</code>，这些子类的区别在于配置信息的位置和类型不同，比如<code>ClassPathXmlApplicationContex</code>的配置信息是XML文件，并且会在ClassPath下找，而<code>FileSystemXmlApplicationContex</code>的配置文件是xml文件，但是需要提供一个全路径名的xml文件，<code>AnnotationConfigApplicationContex</code>它的配置信息是java类和一些注解。</p><p>以最简单的<code>ClassPathXmlApplicationContex</code>为例说明IoC容器的初始化过程，首先在构造对象时会调用构造方法，构造方法中有一个叫做<strong>refresh</strong>的方法，它的作用是销毁旧的容器并创建新的容器，也就是初始化的过程。</p><p>首先refresh方法会先加一个同步代码块然后执行后续的步骤，第一步是准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符、校验配置文件。然后调用obtainFreshBeanFactory()方法返回一个BeanFactory，这个方法内部具体的过程是，首先关闭旧的BeanFactory然后new一个类型是<strong>DefaultListableBeanFactory</strong>的<code>BeanFactory</code>。生成之后会调用<strong>loadBeanDefinition</strong>来加载bean到BeanFactory。</p><p>这个<code>BeanDefinition</code>代表了一个bean的所有信息，如bean的名称，bean的id，bean的类型，是否为单例，是否懒加载，所有的依赖等信息。因此实现ioc容器的一个最重要的步骤是如何把配置信息转化成BeanDefinition对象。</p><p>具体如何和加载BeanDefinition的呢，它会去实例化一个<code>XmlBeanDefinitionReader</code>对象，通过它来加载配置信息，首先会根据配置文件的信息比如说文件地址把这个文件读到内存中，因为这个文件是xml格式的，所以会把他转化为一个DOM树，方便后面的操作，后面就是对这棵DOM树进行解析，将其中的标签解析成BeanDefinition并且把它们注册到BeanFactory中，具体就是把BeanDefinition放入一个Map中。这样我们的BeanFactory就得到了所有的<code>BeanDefinition</code>，但是此时还没有进行初始化。</p><p>Spring 把我们在 xml 配置的 bean 都注册以后，会设置类加载器，然后还会”手动”注册一些特殊的 bean，这些bean有特殊的作用，比如：</p><p>最后一步是把那些没有声明为懒加载的bean实例化，并放在一个单例池中。</p><p>之后我们使用这个容器一般是通过<code>getBean</code>方法来获取一个Bean的实例，这个方法的参数是bean的Name或者是Bean的Class，首先回去单例池中找，如果找到了就返回，否则会去检查当前这个bean所对应的BeanDefinition是否存在，如果存在就回去尝试加载这个<code>BeanDefinition</code>的类，然后实例化，最后进行依赖注入，得到bean实例后返回。</p><h5 id="3-Spring-AOP的原理"><a href="#3-Spring-AOP的原理" class="headerlink" title="3. Spring AOP的原理"></a>3. Spring AOP的原理</h5><p>首先解释一下什么是AOP，AOP的全称是面向切面编程，在开发的过程中，有很多的代码是与业务无关的，比如说日志的打印等，但是这些代码可能散落在源代码的各个地方，如果以硬编码的形式实现则维护难度比较大，而使用AOP可以预编译或者运行时动态代理的方式对对象的方法进行增强。</p><p>Spring的AOP主要使用了两种技术，一是JDK的Proxy类，二是Cglib。Spring AOP作用于IOC容器中的bean，具体的实现是这样的，在从Spring ioc容器中获取bean的过程中，Spring容器提供了一个调用点给用户，具体来说是在创建出bean的实例后，会调用BeanPostProcessor来处理bean，AOP就是在这个过程中对bean的实例进行了动态代理，然后返回的也是代理类。</p><h5 id="4-Spring-MVC的实现原理"><a href="#4-Spring-MVC的实现原理" class="headerlink" title="4. Spring MVC的实现原理"></a>4. Spring MVC的实现原理</h5><p>首先，用户从客户端过来的请求会被一个叫做DispatcherServlet的前端控制器拦截，这个DispatcherServlet类继承自Servlet，拦截到请求后，会通过HandlerMapping去查找处理这个请求的uri的handler，因为handler有多种类型，所以会去找到handleAdapter去处理，处理完以后会返回一个ModelAndView，然后前端控制器会把这个ModelAndView交给视图解析器进行解析和渲染，然后把响应发送到客户端。</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/SSM%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/clipboard.png" alt=""></p><ol><li>用户发送请求至前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle</li><li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet； </li><li>DispatcherServlet 调用 HandlerAdapter处理器适配器</li><li>HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)； </li><li>Handler执行完成返回ModelAndView； </li><li>HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet； </li><li>DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析； </li><li>ViewResolver解析后返回具体View； </li><li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中） 、</li><li>DispatcherServlet响应用户。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发机制的底层实现原理</title>
      <link href="/2019/01/06/java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2019/01/06/java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id="1-volatitle"><a href="#1-volatitle" class="headerlink" title="1. volatitle"></a>1. volatitle</h5><p>volatile是轻量级的synchronized，他的作用有：</p><ul><li><p>保证共享变量的<strong>可见性</strong></p><p>当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。</p></li><li><p><strong>禁止指令重排序</strong></p></li><li><p><strong>不保证原子性</strong></p><p>与synchronized的一个区别是不保证原子性</p></li></ul><p><strong>定义</strong></p><p>Java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致地更新，线程应该确保通过排他锁单独获得这个变量。Java语言提供了volatile，在某些情况下比锁要更加方便。如果一个字段被声明volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。</p><p><strong>实现原理</strong></p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/%E6%9C%AF%E8%AF%AD%E8%A1%A81.jpg" style="zoom: 67%;" /><ul><li><p><strong>volatile是如何来保证可见性</strong></p><p>有volatile变量修饰的共享变量进行写操作的时候会多出lock前缀的指令</p><ul><li>Lock前缀指令会引起处理器缓存回写到内存</li><li>根据缓存一致性协议，一个处理器的缓存回写到内存会导致其他处理器的缓存无效</li></ul></li><li><p><strong>volatitle是如何禁止指令重排序的</strong></p><p>???</p></li></ul><hr><h5 id="2-synchronized"><a href="#2-synchronized" class="headerlink" title="2. synchronized"></a>2. synchronized</h5><p>在早期的java中synchronized是重量级锁，但是后来引入了偏向锁和轻量级锁使得synchronize的效率有所提高。</p><p>synchronized锁的是对象：</p><ul><li>对于普通同步方法，锁是当前实例对象。</li><li>对于静态同步方法，锁是当前类的Class对象</li><li>对于同步方法块，锁是Synchonized括号里配置的对象</li></ul><p>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁</p><p><strong>实现原理</strong></p><p>同步代码块的实现是通过<code>monitorenter</code>和<code>monitorexit</code>指令实现的，<code>monitorenter</code>添加在同步代码块开始处，<code>monitorexit</code>添加在同步代码块结束和异常处。JVM要保证每个<code>monitorenter</code>必须有对应的<code>monitorexit</code>与之配对。任何对象都有一个<code>monitor</code>与之关联，当且一个<code>monitor</code>被持有后，它将处于锁定状态。线程执行到<code>monitorenter</code>指令时，将会尝试获取对象所对应的<code>monitor</code>的所有权，即尝试获得对象的锁。线程执行到<code>monitorexit</code>指令时，将会释放对象所对应的<code>monitor</code>的所有权，即释放对象的锁。synchronize是可重入的，monitor中有一个计数器，每当相同的线程获取锁后，计数器的值会加1，释放时减去1，只有当计时器为0，锁才真正被释放。</p><p>对象头的MarkWord中记录了指向monitor的起始地址，同时monitor中有一个字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用</p><p><strong>偏向锁</strong></p><p>大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，<strong>为了让线程获得锁的代价更低而引入了偏向锁</strong>。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p><ul><li><p><strong>偏向锁的撤销</strong></p><p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程。</p></li><li><p><strong>偏向锁的关闭</strong></p><p>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：<code>-XX:BiasedLockingStartupDelay=0</code>。如果你确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁：<code>-XX:-UseBiasedLocking=false</code>，那么程序默认会进入轻量级锁状态。</p></li></ul><p><strong>轻量级锁</strong></p><ul><li><p>轻量级加锁</p><p>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</p></li><li><p>轻量级解锁</p><p>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p></li></ul><p><strong>不同锁的对比</strong></p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%AF%B9%E6%AF%94.jpg" alt=""></p><hr><h5 id="3-原子操作"><a href="#3-原子操作" class="headerlink" title="3. 原子操作"></a>3. 原子操作</h5><p>原子操作是不可被中断的一个或一系列操作</p><p><strong>java中如何实现原子操作</strong></p><ul><li><p>使用循环CAS实现原子操作</p><p>CAS有三个参数，内存的实际值，期望值和新的值，只有当实际值与期望值相同时才能成功将新的值赋给期望的值，如果失败则进行自旋。</p><ul><li><p>可能出现的问题</p><ul><li><p>ABA问题</p><p>因为CAS需要在操作值的时候，检查值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。</p><p>解决思路：在变量前面追加上版本号，每次变量更新的时候把版本号加1，JDK的Atomic包里提供了一个类AtomicStampedReference来解决ABA问题</p></li><li><p>循环时间长开销大</p><p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销</p></li><li><p>只能保证一个共享变量的原子操作</p><p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p></li></ul></li></ul></li><li><p>使用锁机制实现原子操作</p><p>锁机制保证了只有获得锁的线程才能够操作锁定的内存区域。JVM内部实现了很多种锁机制，有偏向锁、轻量级锁和互斥锁。有意思的是除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。</p></li></ul><hr><h5 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h5><p>volatile、synchronized和原子操作的实现原理是实现java并发编程最基础工具</p><hr><p><strong>5. 参考</strong></p><p><em>《java并发编程的艺术》方腾飞 魏鹏 程晓明</em></p>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
          <category> java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 总结 </tag>
            
            <tag> java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层：路由选择协议</title>
      <link href="/2019/01/04/%E7%BD%91%E7%BB%9C%E5%B1%82%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/04/%E7%BD%91%E7%BB%9C%E5%B1%82%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="1-IP数据报的转发"><a href="#1-IP数据报的转发" class="headerlink" title="1. IP数据报的转发"></a>1. IP数据报的转发</h5><p>网络通过路由器连接在一起，每个路由器维护了一个路由表，路由表的每一条路由主要是由目的网络地址和下一条地址组成。因此如果一个数据报到达一个路由器，首先会去查路由表，找到下一跳地址，然后转发，如果找不到就向默认路由转发。如果数据报的目的地址就是本网络，则可以直接交付。</p><hr><h5 id="2-理想的路由算法"><a href="#2-理想的路由算法" class="headerlink" title="2. 理想的路由算法"></a>2. 理想的路由算法</h5><p>路由选择协议的核心是路由算法，理想的路由算法具有如下特点：</p><ul><li>算法必须是正确和完整的</li><li>算法在计算上应该简单</li><li>算法能够适应通信量和网络拓扑的变化</li><li>算法应该具有稳定性</li><li>算法是公平的</li><li>算法应该是最佳的</li></ul><hr><h5 id="3-分层次的路由选择协议"><a href="#3-分层次的路由选择协议" class="headerlink" title="3. 分层次的路由选择协议"></a>3. 分层次的路由选择协议</h5><p>路由算法分为<strong>静态路由选择策略</strong>与<strong>动态路由选择策略</strong>，静态路由选择策略需要手动配置，特点是简单开销小，但是不能及时适应网络状态的变化，适用于小规模网络。动态路由选择策略的特点是可以较好的适应网络状态的变化，但实现起来较为复杂，开销也比较大，适用于大规模网络。</p><p>互联网中采用的路由选择协议有以下特点</p><ul><li><p>自适应</p><p>动态路由选择，能够较好的适应网络状态的变化</p></li><li><p>分布式</p><p>路由选择之间交换路由信息</p></li><li><p>分层次</p><p>将整个互联网分成许多较小的自治系统AS</p></li></ul><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E7%BD%91%E7%BB%9C%E5%B1%82%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%8D%8F%E8%AE%AE/image-20200204132413.png"  /><hr><h5 id="4-内部网关协议RIP"><a href="#4-内部网关协议RIP" class="headerlink" title="4. 内部网关协议RIP"></a>4. 内部网关协议RIP</h5><p><strong>RIP是一种分布式局域距离向量的路由选择协议</strong>，是互联网的标准协议，最大的优点是简单。</p><p>RIP协议要求网络中每一个路由器都要维护从它自己到其他每一个目的网络的距离记录，距离的定义如下：</p><ul><li>路由器直接相连的网络距离定义为1，一个路由器到另一个非直接相连的路由器的距离为中间所经过的路由器数量加1。RIP协议中的距离也称跳数，当距离等于16时相当于不可达，RIP只适用于小型网络。</li></ul><p>RIP协议认为跳数小的路由是好路由而不考虑其他因素比如网络带宽，所以实现简单。</p><p><strong>RIP协议的基本工作原理</strong></p><ul><li>启动了RIP的接口将发生RIP请求报文，收到RIP请求报文的路由器，如果启动了RIP，则会发生RIP响应报文</li><li>RIP报文封装在UDP用户数据报中，发送和接收端口都是520</li><li>封装有RIP报文的UDP用户数据报封装在IP数据报中，目的IP地址为<code>255.255.255</code></li><li>RIP会启动一个更新定时器，超时时间为30s，也就是说每隔30秒发送一次RIP更新，实际上为了避免路由器同时发生RIP更新，超时时间会加上一个随机的偏移量，该偏移量在-5到+5之间选择。</li><li>路由器的每个条目都有一个失效定时器，默认超时时间为180s，超时后，会将条目的距离变成PD，该条目不会被转发。</li><li>路由器的每个条目都有一个清除定时器，默认超时时间为240s，超时后，会将该条目的清除。</li></ul><p><strong>RIP路由条目更新规则</strong></p><ul><li>若收到的某条路由条目在路由表中没有，则直接在路由表中添加，原因是发现了新网络</li><li>若路由表中已有到达相同目的网络的路由表条目：<ul><li>若来自相同的下一跳路由，则进行更新，因为这是到达目的网络且下一跳相同的最新路由信息。</li><li>若来自不同的下一跳路由，则需要比较距离：<ul><li>若新路由条目中的距离小于原路由条目中的距离，则进行更新，这是因为新路由更具优势。</li><li>若新路由条目中的距离等于原路由条目中的距离，则添加新路由，以便等价负载均衡。</li><li>若新路由条目中的距离大于原路由条目中的距离，则不更新，因为新路由劣势。</li></ul></li></ul></li></ul><p><strong>RIP减少路由环路产生以及加快收敛速度的方法</strong></p><ul><li><p>水平分割</p><p>从某接口学习来的路由信息不能再从该接口发送出去，避免两个路由间的路由环路问题。</p></li><li><p>带有毒化逆转的水平分割</p><p>从某接口学习来的路由信息可以从该接口发送出去，但是需要将距离改为16。</p></li><li><p>触发更新</p><p>只要路由条目被更新，则立刻将该路由条目发给邻居，而不必等更新定时器到时</p></li></ul><p><strong>RIP不能完全避免路由环路产生</strong></p><hr><h5 id="5-内部网关协议OSPF"><a href="#5-内部网关协议OSPF" class="headerlink" title="5. 内部网关协议OSPF"></a>5. 内部网关协议OSPF</h5><p><strong>OSPF特点</strong></p><ul><li>开放最短路径优先OSPF<ul><li>开发表明OSPF是公开发表的，不受任何一家厂商控制</li><li>最短路径有限是因为使用了Dijkstra提出的最短路径算法</li></ul></li><li>OSPF是基于链路状态的，而不像RIP基于距离向量</li><li>OSPF采用SPF算法计算路由，理论上不会出现路由环路</li><li>OSPF不限制网络规模，更新效率高，收敛速度快</li><li>OSP分组使用IP数据报进行封装，协议号89，组播地址224.0.0.5和224.0.0.6</li><li>OSPF的默认管理距离为110，可手动修改</li></ul><p><strong>链路状态</strong></p><p>链路状态时指本路由器都和哪些路由相邻，以及相应链路的代价，代价用来表示费用，距离，时延，带宽等等，这些都由网络管理人员来决定。思科路由器计算代价的方法是计算100M带宽/链路带宽，小于1的用1表示大于1的舍去小数。</p><p><strong>邻居关系的建立和维护</strong></p><p>OSPF路由器之间通过交换问候(Hello)分组，建立和维护邻居关系。</p><ul><li>Hello分组发往组播地址224.0.0.5</li><li>发送周期为10秒</li><li>40秒未收到来自邻居路由器的Hello分组，则认为该邻居路由器不可达</li></ul><p><strong>链路状态通告LSA</strong></p><p>每个路由器都会产生链路状态通告LSA，LSA中包含以下内容：</p><ul><li>直连网络的链路状态信息</li><li>邻居路由器的链路状态信息</li></ul><p><strong>链路状态更新LSU</strong></p><ul><li>LSA被封装在链路状态更新分组LSU</li><li>采用洪泛法发送LSU</li></ul><p><strong>链路状态数据库LSDB</strong></p><ul><li>每个路由器都有一个链路状态数据库LSDB，用于存储LSA</li><li>通过各路由器洪泛发送封装有自己LSA的LSU分组，各路由器的LSDB最终将达到一致</li></ul><p><strong>有了LSDB，就可以基于LSDB进行SPF计算</strong></p><p><strong>OSPF五种分组类型及其作用</strong></p><ul><li><p>周期性发送，建立和维护邻居关系</p><ul><li>问候分组Hello</li></ul></li><li><p>LSDB同步</p><ul><li><p>数据库描述分组</p><p>向邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息</p></li><li><p>链路状态请求分组</p><p>向对方请求发送某些链路状态项目的详细信息</p></li><li><p>链路状态更新分组</p><p>用洪泛法对全网更新链路状态</p></li><li><p>链路状态确认分组</p><p>对链路更新分组的确认</p></li></ul></li></ul><p><strong>多路访问网络中路由邻居关系的建立</strong></p><ul><li>选举指定的路由器DR与备用指定路由器BDR</li><li>所有的非DR/BDR只与DR/BDR建立连接关系</li><li>非DR/BDR之间通过DR/BDR交换信息</li><li>目的是减少邻居关系的数量</li></ul><p><strong>OSPF划分区域机制</strong></p><p>使用OSPF的自治系统可以划分成多个区域，每个区域由区域描述符表示，这样做的目的是使得洪泛法只局限于当前区域，减少洪泛法发送的数据量。每个区域内部的路由器称为<strong>区域内路由器</strong>，为了使得区域与区域之间连通，每个区域会有一个<strong>区域边界路由器</strong>。</p><hr><h5 id="6-外部网关协议BGP"><a href="#6-外部网关协议BGP" class="headerlink" title="6. 外部网关协议BGP"></a>6. 外部网关协议BGP</h5><p><strong>不同自治系统为什么不能使用内部网关协议</strong></p><ul><li>互联网的规模太大，使得自治系统之间路由选择非常困难</li><li>自治系统AS之间的路由选择必须考虑有关策略，如安全、经济、政治等。</li></ul><p><strong>BGP工作原理</strong></p><ul><li>在配置BGP时，每个自治系统选择至少一个路由器作为BGP发言人</li><li>一个BGP发言人与其他AS的BGP发言人要交换路由信息就要先建立TCP连接（端口号为179</li><li>BGP刚建立时，需要交换整个BGP路由表，但之后只需要交换更新的部分</li></ul><p><strong>BGP四种报文</strong></p><ul><li><p>OPEN报文</p><p>用来与相邻的BGP发言人建立关系，使通信初始化</p></li><li><p>UPDATE报文</p><p>用来通告某一路由信息，以及列出要撤销的多条路由</p></li><li><p>KEEPALIVE报文</p><p>用来周期性证实邻站的连通性</p></li><li><p>NOTIFICATION报文</p><p>用来发送检测到的差错</p></li></ul><hr><h5 id="7-路由器的构成"><a href="#7-路由器的构成" class="headerlink" title="7. 路由器的构成"></a>7. 路由器的构成</h5><p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。从路由器某个输入端口收到的分组，按照分组的目的地，把该分组从路由器的某个输出端口转发给下一个路由器。路由器的构成框图如下：</p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E7%BD%91%E7%BB%9C%E5%B1%82%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%8D%8F%E8%AE%AE/image-20200204134442.png" style="zoom: 50%;" /><p>路由器可以分为两部分<strong>路由选择部分</strong>和<strong>分组转发部分</strong>。</p><ul><li>控制选择部分也叫做控制部分，核心是路由选择处理机，其任务是根据所选定的路由协议构造出路由表，同时不断更新和维护路由表。</li><li>分组转发部分由三部分组成：输入端口，输出端口，交换结构<ul><li>交换结构将分组从一个输入端口转移到某个输出端口</li><li>输入端口从线路接收分组，并进行物理层处理，数据链路层处理，最后经过网络层处理得到IP数据报放到输入缓存中等待查表和转发</li><li>输出端口将待转发的网络层数据报放到缓存中管理，经过网络层处理，数据链路层处理和物理层处理向线路中发送分组</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 网络层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络层 </tag>
            
            <tag> 路由选择协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层：其他重要协议</title>
      <link href="/2019/01/04/%E7%BD%91%E7%BB%9C%E5%B1%82ICMP,IGMP,NAT/"/>
      <url>/2019/01/04/%E7%BD%91%E7%BB%9C%E5%B1%82ICMP,IGMP,NAT/</url>
      
        <content type="html"><![CDATA[<h5 id="1-网际控制报文协议ICMP"><a href="#1-网际控制报文协议ICMP" class="headerlink" title="1. 网际控制报文协议ICMP"></a>1. 网际控制报文协议ICMP</h5><p>为了更有效地转发IP数据报和提高交付成功的机会，在网际层使用了网际控制报文协议ICMP。<strong>ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告。</strong></p><ul><li><p><strong>ICMP差错报告报文</strong></p><ul><li><p>终点不可达</p><p>当路由器或主机不能交付数据报时就向源点发送终点不可达报文</p></li><li><p>时间超过</p><p>当路由器收到TTL为0的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文</p></li><li><p>参数问题</p><p>当路由器或目的主机收到的数据报的首部中有的此段的值不正确就丢弃该数据报，并向源点发送参数问题报文</p></li><li><p>改变路由（重定向）</p><p>路由器把改变路由报文发送给主机，让主机知道下次应将数据包发送给另外的路由器</p></li></ul></li><li><p><strong>ICMP询问报文</strong></p><ul><li><p>回送请求和回答报文</p><p>ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。这种询问报文用来测试目的站是否可达以及了解其有关状态。</p></li><li><p>时间戳请求和回答报文</p><p>时间戳请求与回答可用于时钟同步和时间测量。</p></li></ul></li></ul><p><strong>PING</strong></p><p>ICMP的一个重要应用就是分组网间探测<strong>PING</strong>，用来测试两台主机之间的连通性。PING使用了ICMP回送请求和回送回答报文，它是应用层直接使用网络层ICMP的一个例子，没有经过运输层TCP或UDP。</p><p><strong>traceroute</strong></p><p>另一个应用是traceroute，用来跟踪一个分组从源点到终点的路径。源主机向目的主机发送一连串IP数据报，数据报中封装的是无法交付的UDP用户数据报，并且TTL值不断递增，每一个数据报都会对应一个时间超过差错报文，根据这些报文就可以知道从源主机到目的主机需要经过哪些路由器。</p><hr><h5 id="2-网际组管理协议IGMP"><a href="#2-网际组管理协议IGMP" class="headerlink" title="2. 网际组管理协议IGMP"></a><strong>2. 网际组管理协议IGMP</strong></h5><p><strong>IP多播</strong></p><p>与单播相比，多播可大大节约网络资源。多播允许一台主机发送单个数据报多台主机，当一个多播分组转发到达路由器后，路由器会把收到的分组复制成多个副本从不同的发送端口发送出去，当分组到达目的局域网时，由于局域网具有硬件多播功能，因此不需要复制分组，局域网上的多播组成员都能收到这个分组。</p><p>IP多播分为两种：局域网上进行硬件多播，互联网范围进行多播。</p><p><strong>多播数据报</strong></p><p>多播数据报的目的地址不能写主机的IP地址，因为在同一时间有许多主机加入同一个多播组，当然也不可能在其首部写入所有主机的IP地址，而是要使用给一个多播组的标识，这个标识就是IP地址中的D类地址。D类地址就是多播地址，<strong>多播地址只能用于目的地址，不能用于源地址</strong>，并且对于多播数据报补偿ICMP差错报文，因此如果使用ping命令的参数是一个多播地址，是无法收到响应的。</p><p><strong>硬件多播</strong></p><p>以太网硬件地址字段中的<strong>第一字节的最低位为1</strong>即为多播地址。</p><p><strong>IGMP</strong></p><p>IGMP已有三个版本</p><ul><li>IGMP的工作过程<ul><li>第一阶段：当某台主机加入新的多播组时，该主机应向多博组的多播地址发送一个IGMP报文，声明自己要成为w该组的成员。本地的多播路由器收到IGMP报文后，还要利用多播路由选择协议把这种组成员关系转发给互联网上的其他多播路由器。</li><li>第二阶段：组成员关系是动态的。本地多播路由器要周期性地探询本地局域网上的主机，以便知道这些主机是否还继续是组的成员。只要有一台主机对某个组响应，那么路由器就认为这个组是活跃的，如果一个组经过几次探询仍然没有一台主机响应，多播路由器就认为本网络上的主机已经离开了这个组，因此也不再把这个组的成员关系转发给其他的多播路由器</li></ul></li><li>IGMP的细节<ul><li>在主机和多播路由器之间的所有同学都是IP多播</li><li>多播路由器在探询组成员关系时，只需要对所有的组发送一个请求信息的询问报文，而不需要对每个组发送一个询问报文。</li><li>当同一个网络上连接有几个多播路由器时，它们能够迅速和有效地选择其中的一个来探询主机的成员关系。</li><li>在IGMP的询问报文中有一个数值N，它指明一个最长响应时间。当收到询问时，主机在0到N中随机选择发送响应所需经过的时延。</li><li>同一个组内的每一台主机都要监听响应，只要有本组其他主机先发送了相应，就可以不再发送响应了。</li></ul></li></ul><hr><h5 id="3-虚拟专用网VPN"><a href="#3-虚拟专用网VPN" class="headerlink" title="3. 虚拟专用网VPN"></a>3. 虚拟专用网VPN</h5><p><strong>本地地址和全球地址</strong></p><p>许多机构的主机并不需要暴露在互联网中，也就是说在机构内部计算机可以自行分配其IP地址，这些地址只在本机构内部有效，称为<strong>本地地址</strong>，而向互联网的管理机构中申请的全球唯一的IP地址称为<strong>全球地址</strong>。</p><p><strong>虚拟专用网VPN</strong></p><p>某些机构可能非常庞大，部门分布在世界各地，但是这些部门之间需要交换信息，解决的方法是利用公有的互联网作为本机构各专用网之间的通信载体，这样的专业又称为虚拟专用网VPN。专有网不同网点通信必须经过互联网，并且所有通过互联网传送的数据都必须加密。</p><p>假设一个机构有两个相隔较远的场所A和B，想要建立VPN系统，首先每个场所的网络中的路由器R1和R2应该分别有一个全球IP地址。在场所内部A和B内部的通信量不经过互联网，但是场所A的主机要和场所B的主机通信。数据就要经过路由器穿过互联网。路由器会把收到的内部数据进行加密然后重新加上首部称为在互联网上发送的外部数据报，其源地址是路由器R1的全球地址，目的地址是R2的全球地址。路由器R2收到数据后会进行解密恢复成原来的内部数据报，然后交付给目的主机。</p><h5 id="4-网络地址转换NAT"><a href="#4-网络地址转换NAT" class="headerlink" title="4. 网络地址转换NAT"></a>4. 网络地址转换NAT</h5><p>网络地址转换要解决的问题是专业网内部一些分配到了本地IP地址的主机如何与互联网中的其他主机通信。</p><p>网络地址转换NAT首先要求专用网连接到互联网的路由器上安装NAT软件，装有NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球IP地址，所有本地主机在和外界通信时，都要在NAT路由器上将其本地地址转换成全球IP地址。</p><p><strong>工作过程</strong></p><p>NAT路由器收到从专用网内部的主机发往互联网上的主机的报文时，会把报文的源IP地址转换为路由器的IP地址</p><p>NAT路由器收到互联网中主机发来的数据报时，会通过NAT地址转换表，将IP数据报的目的地址(路由器的IP地址)转化为新的IP地址（本地IP地址）</p><p><strong>网络地址与端口号NAPT</strong></p><p>通过端口来确定转换规则，比如主机192.168.3在端口3000上发送，就将其转化为路由器ip地址加上一个唯一的端口，这样之后路由器在这个端口收到了数据报就知道一个交给哪台主机的哪个端口。</p><h5 id="5-IPV6"><a href="#5-IPV6" class="headerlink" title="5. IPV6"></a>5. IPV6</h5><p>IPV6的变化主要由</p><ul><li>更大的地址空间，IPV6地址的长度为128位，理论上在可预计的将来是用不完的</li><li>扩展的地址层次结构，由于IPv6地址空间很大，因此可以划分为更多的层次</li><li>灵活的首部格式，IPv6的首部与IPv4首部不兼容，定义了许多可选的扩展首部，可提供比IPv4更多的功能</li><li>改进的选项，IPv6的首部长度是固定的，选项放在有效载荷中</li><li>允许协议继续扩充，IPv4的功能是固定不变的</li><li>支持即插即用，自动配置，不需要DHCP</li><li>支持资源的预分配，支持要求保证一定带宽和时延的应用</li><li>首部改为8字节对齐，IPv4是4字节对齐</li></ul><p>IPv6数据报由两个部分组成，<strong>基本首部</strong>和<strong>有效载荷</strong>，有效载荷允许零个或多个扩展首部，再后面是数据部分。</p><p><strong>IPv4如何过渡到IPv6</strong></p><ul><li><p>双协议栈</p><p>使主机运行两个协议IPv4和IPv6</p></li><li><p>隧道技术</p><p>在IPv6数据报要进入IPv4网络时，把IPv6数据报封装成为IPv4数据报。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 网络层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络层 </tag>
            
            <tag> ICMP </tag>
            
            <tag> IGMP </tag>
            
            <tag> IPv6 </tag>
            
            <tag> NAT </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层：IP地址分类</title>
      <link href="/2019/01/03/%E7%BD%91%E7%BB%9C%E5%B1%82IP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB/"/>
      <url>/2019/01/03/%E7%BD%91%E7%BB%9C%E5%B1%82IP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1. IP地址"></a>1. IP地址</h5><p>IP地址是互联网中的主机在全球的唯一标识符，IPV4的IP地址为32位，由互联网名字和数字分配机构进行分配。</p><hr><h5 id="2-分类的IP地址"><a href="#2-分类的IP地址" class="headerlink" title="2. 分类的IP地址"></a>2. 分类的IP地址</h5><p>将IP地址分成固定的几类，每一类IP地址都由网络号和主机号组成</p><p><code>IP地址=网络号，主机号</code></p><p>IP地址一共分成五类</p><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E7%BD%91%E7%BB%9C%E5%B1%82IP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB/image-20200203194658.png" alt=""></p><p>其中D类地址用于IP多播，E类地址保留。</p><p><strong>为什么要把IP地址分成A类，B类，C类</strong></p><p>各种网络的差距很大，有的网络中主机数量多，有的主机数量少，将IP地址分成A，B，C三类是为了满足不同用户的需求，某个单位申请IP地址时会获得一个网络号，然后IP地址自行分配。</p><p><strong>A类、B类、C类地址最大可指派的网络数和主机数</strong></p><ul><li>A类地址的网络号占8位，其中第一位固定为0，<strong>可指派的网络数为2<sup>7</sup>-2</strong>。减2的原因是网络号全0不能使用，表示本网络，网络号为<strong>127</strong>(01111111)保留作为本地环回地址。主机号占24位，<strong>可指派的主机数为2<sup>24</sup>-2</strong>。减去2的目的是全0的主机号表示该IP地址是”本主机“所连接到的单个网络地址，全1表示网络中所有的地址。A类地址占整个IP地址的50%。</li><li>B类地址的网络号占16位，前2位已经固定了，<strong>可指派的网络数为2<sup>14</sup>-1</strong>，网络号不能组成全0或全1(因为固定位为01)，但是<strong>128.0.0.0</strong>是不能指派的。主机号占16位，<strong>可以指派的主机数为2<sup>16</sup>-2</strong>。减2的原因是全0和全1的地址不能使用。B类地址占整个IP地址的25%。</li><li>C类地址的网络号占24位，前3位已经固定了，<strong>可指派的网络数为2<sup>21</sup>-1</strong>。减1的原因是<strong>192.0.0.0</strong>不可分配。<strong>可指派的主机数为2<sup>8</sup>-2</strong>。全0个全1的地址不能使用。C类地址占整个IP地址的12.5%。</li></ul><hr><h5 id="3-划分子网"><a href="#3-划分子网" class="headerlink" title="3. 划分子网"></a>3. 划分子网</h5><p><strong>分类的IP地址存在的问题</strong></p><p>两级IP地址的问题在于A类地址和B类地址所支持连接的主机数量相差太大，对于有些单位可能为了发展申请一个支持主机数量多的A类地址，但实际上又使用不完，从而导致<strong>IP地址的大量浪费</strong>。另外<strong>两级IP地址不够灵活</strong>，想要开头一个新网络，必须重新申请一个网络号。</p><p><strong>划分子网</strong></p><p>将物理网络划分为若干个子网，划分子网只能在网络内部发现，在网络外部只能看到一个统一的网络。此时IP地址的组成。</p><p><code>IP地址=网络号，子网号，主机号</code></p><p>划分子网只是将主机号继续划分，而不改变IP地址原来的网络号。</p><p><strong>子网掩码</strong></p><p>子网掩码用于判断IP地址属于哪个子网络，子网掩码是一个32位的序列，其前半部分是连续的1，后半部分是连续的0。并且网络号的长度和子网的长度之和为多少，子网掩码中连续的1的数量就为多少，计算时，使用子网掩码与IP地址进行与运算，就得到了IP地址所属的子网络。其中A类地址的默认子网掩码为255.0.0.0,B类地址的默认子网掩码为255.255.0.0,C类地址的默认子网掩码为255.255.255.0。</p><hr><h5 id="4-构造超网"><a href="#4-构造超网" class="headerlink" title="4. 构造超网"></a>4. 构造超网</h5><p>构造超网又称无分类编址CIDR。</p><p><strong>CIDR解决的问题</strong></p><p>划分子网在一定程度上缓解了互联网在发展过程中遇到的困难，但是1992年互联网面临三个问题：</p><ul><li>B类地址在1992年已分配一半</li><li>互联网主干网上的路由表中的项目数急剧增长</li><li>整个IPV4地址终将耗尽</li></ul><p>无分类编址方法可以解决前两个问题</p><p><strong>CIDR的特点</strong></p><ul><li><p>CIDR消除了传统的A类，B类，C类地址以及划分子网的概念，IP地址的组成为：</p><p><code>IP地址=网络前缀，主机号</code></p></li><li><p>CIDR把网络前缀都相同的连续IP地址组成一个CIDR地址块，比如IP地址128.14.35.7/20，前20位就是网络前缀</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 网络层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络层 </tag>
            
            <tag> IP地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层：地址解析协议</title>
      <link href="/2019/01/02/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/02/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h5><p>IP协议的设计目标是为跨域不同类型物理网络的分组交换提供互操作，这需要网络层软件使用的地址和底层网络硬件之间进行转换。</p><h5 id="2-MAC地址和IP地址"><a href="#2-MAC地址和IP地址" class="headerlink" title="2. MAC地址和IP地址"></a>2. MAC地址和IP地址</h5><p>网络接口硬件通常有一个硬件地址，称为MAC（介质访问控制）地址，由设备制造商定义并且永久的存储在设备中，这个地址长48位，是全球唯一的，其中前24位称为组织标识符分配给厂家，后24位称为扩展标识符，由厂家自行分配。因为MAC地址是全球唯一的并且不可变，所以可以唯一标识一台硬件设备。</p><p>网络层地址（IP地址）是由用户或网络管理员分配的，为设备分配的IP地址是可以变的，也就是说IP地址不能确定某台设备的身份。</p><p>通常使用IP地址进行两台主机的通信，那么问题在于怎么找到通信对方的IP地址到底对应哪台设备呢？这就需要将IP地址转换成MAC地址。</p><h5 id="3-ARP协议"><a href="#3-ARP协议" class="headerlink" title="3. ARP协议"></a>3. ARP协议</h5><p>地址解析是发现两个地址之间的映射关系的过程。对于使用IPV4的TCP/IP协议族，主要由ARP协议来实现，简单来说ARP解决的问题是已知某个IP地址，怎么知道这个IP地址对应局域网的哪一台主机。</p><ul><li><p>ARP协议</p><p>在主机<strong>ARP缓存</strong>中维护本局域网上的各主机的ip地址到硬件地址的映射表。当主机要向本局域网中的某台主机发送IP数据报时，首先会在缓存中查找，如果找不到，则会向该局域网中所有主机发送<strong>ARP请求</strong>，ARP请求中包含发送主机的ip地址，硬件地址，以及目的IP地址。局域网中的其他主机收到这个ARP请求后，会检查目的ip地址与自己的ip地址是不是相同，如果相同则会构造<strong>ARP响应</strong>分组返回给主机，响应分组包含了自己的物理地址。当发送方主机收到ARP响应后，就会把目的IP地址和对应的物理地址存在ARP缓存中，并设置一个过期时间。</p><p>假如目的主机不在这个网络上，就会找到路由器的地址，将这个数据报由路由器转发到其他的网络上。</p><p><strong>ARP协议是自动进行的，主机的用户对这种解析过程是不知道的</strong>。</p></li></ul><h5 id="4-ARP相关的攻击"><a href="#4-ARP相关的攻击" class="headerlink" title="4. ARP相关的攻击"></a>4. ARP相关的攻击</h5><ul><li><p>ARP欺骗</p><p>使用代理伪装成主机，对ARP请求进行应答。</p></li></ul><h5 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h5><p>网络层解决的问题的一台主机与另一台主机通信，每一台主机都有一个全球唯一的IP地址，但是IP地址虽然是唯一的但是只是一个逻辑地址，也就是说一台主机的IP地址是可以改变的。除了IP地址之外，主机网络接口还有一个固定的全球唯一的硬件地址。因此为了使得网络层中的两台主机可以通信，可以先把IP地址转换为硬件地址，ARP协议就解决了这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 网络层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络层 </tag>
            
            <tag> ARP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层：IP数据报格式</title>
      <link href="/2019/01/02/%E7%BD%91%E7%BB%9C%E5%B1%82IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/01/02/%E7%BD%91%E7%BB%9C%E5%B1%82IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="1-IP数据报格式"><a href="#1-IP数据报格式" class="headerlink" title="1. IP数据报格式"></a>1. IP数据报格式</h5><p><img src="https://severinblog-1257009269.cos.ap-guangzhou.myqcloud.com/%E7%BD%91%E7%BB%9C%E5%B1%82IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F/image-20200203194652.png" alt=""></p><p>一个IP数据报由IP首部和数据部分组成。IP首部的前一部分是固定首部，共20字节，后一部分是可选字段，其长度是可变的。</p><hr><h5 id="2-首部字段"><a href="#2-首部字段" class="headerlink" title="2. 首部字段"></a>2. 首部字段</h5><ul><li><p>版本</p><p>占四位，指IP协议的版本，通信双方IP协议的版本必须一致，目前广泛使用的IP协议的版本是IPV4，不就的将来会广泛使用IPV6。</p></li><li><p>首部长度</p><p>占四位，表示IP数据报首部长度，最大值为15，单位为4字节，所以最大IP数据报为60字节，固定首部长度为20字节，因此选项最大占用20字节。最常用的首部长度是20，表示不使用任何选项。</p></li><li><p>服务类型</p><p>占8位，在使用区分服务时，这个字段才起作用。</p></li><li><p>总长度</p><p>首部和数据之和的字节数，长度为16位，表示一个IP数据报最大长度为65535字节，但是实际上不会传输那么大的数据报。因为IP层之下的数据链路层协议规定了数据帧中的数据字段的最大长度，称为最大传输单元MTU，常见的以太网规定MTU为1500字节，所以如果数据报长度大于1500字节就会被分片。</p><p>如果数据报长度太长，传输效率会变高，但是如果数据报长度很小，却有利于路由器转发数据报。</p></li><li><p>标识</p><p>IP软件会维护一个计数器，每产生一个数据报，计数器就加1，并赋值给标识字段。如果IP数据报被分片，这个标识会赋值给每一个数据报片的标识字段。相同的标识字段的值使分片后的各数据片最后可以组合成原来的数据报。</p></li><li><p>标志</p><p>占3位，但是只有前两位有意义</p><ul><li>最低位记为MF，MF为1表示后面还有分片，为0表示当前数据报是数据报分片中的最后一个</li><li>中间的位记为DF，标识不能分片</li></ul></li><li><p>片偏移</p><p>分组在分片之后，某片在原分组中的相对位置，单位为8字节。</p></li><li><p>生存时间</p><p>TTL，占8位，表示数据报最多能经过几个路由器，每经过一个路由器，该值就减1，TTL减为0后该数据报就被丢弃。</p></li><li><p>协议</p><p>占8位，指明当前数据报携带的数据使用哪种协议，比如常见的TCP取值为6，UDP为17。</p></li><li><p>首部校验和</p><p>占16位，用来检验IP数据报首部，如何计算：</p><p>将首部划分为16位的序列，并把校验和置为0，将所有的16位序列反码算术求和后取反码作为校验和，校验时方法类似，只不过不需要将校验和置为0，求得结果为0则收下这个数据报，否则丢弃。</p></li><li><p>源IP地址、目的IP地址</p><p>发送方和接受方的IP地址。</p></li><li><p>选项</p><p>用来增加IP数据报的功能</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 网络层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络层 </tag>
            
            <tag> IP数据报 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
